const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://xqjqjqjqjqjqjqjqjqj.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhxanFqcWpxanFqcWpxanFqcWpxanFqIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczOTU0OTMzNywiZXhwIjoyMDU1MTI1MzM3fQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testProduitsEligibles() {
  console.log('üîç Analyse d√©taill√©e des produits √©ligibles\n');
  
  const clientId = '25274ba6-67e6-4151-901c-74851fe2d82a';
  const clientEmail = 'grandjean.laporte@gmail.com';
  
  try {
    // 1. V√©rifier si le client existe
    console.log('1Ô∏è‚É£ V√©rification de l\'existence du client...');
    const { data: client, error: clientError } = await supabase
      .from('clients')
      .select('*')
      .eq('id', clientId)
      .single();
    
    if (clientError) {
      console.log('‚ùå Erreur client:', clientError.message);
      return;
    }
    
    if (!client) {
      console.log('‚ùå Client non trouv√©');
      return;
    }
    
    console.log('‚úÖ Client trouv√©:', {
      id: client.id,
      email: client.email,
      user_type: client.user_type,
      created_at: client.created_at
    });

    // 2. V√©rifier les produits √©ligibles directement
    console.log('\n2Ô∏è‚É£ V√©rification des produits √©ligibles...');
    const { data: produitsEligibles, error: produitsError } = await supabase
      .from('client_produit_eligible')
      .select('*')
      .eq('client_id', clientId);
    
    if (produitsError) {
      console.log('‚ùå Erreur produits √©ligibles:', produitsError.message);
      return;
    }
    
    console.log('üìä Produits √©ligibles trouv√©s:', produitsEligibles.length);
    if (produitsEligibles.length > 0) {
      produitsEligibles.forEach((produit, index) => {
        console.log(`   ${index + 1}. ID: ${produit.id}`);
        console.log(`      Produit: ${produit.produit_id}`);
        console.log(`      Statut: ${produit.statut}`);
        console.log(`      Cr√©√© le: ${produit.created_at}`);
        console.log(`      Modifi√© le: ${produit.updated_at}`);
        console.log('');
      });
    }

    // 3. V√©rifier les politiques RLS
    console.log('3Ô∏è‚É£ V√©rification des politiques RLS...');
    const { data: rlsPolicies, error: rlsError } = await supabase
      .rpc('get_rls_policies', { table_name: 'client_produit_eligible' });
    
    if (rlsError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les politiques RLS:', rlsError.message);
    } else {
      console.log('üìã Politiques RLS trouv√©es:', rlsPolicies?.length || 0);
    }

    // 4. Tester avec un token utilisateur
    console.log('\n4Ô∏è‚É£ Test avec authentification utilisateur...');
    
    // Simuler une connexion utilisateur
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: clientEmail,
      password: 'profitum'
    });
    
    if (authError) {
      console.log('‚ùå Erreur authentification:', authError.message);
    } else {
      console.log('‚úÖ Authentification r√©ussie');
      console.log('Token utilisateur:', authData.session?.access_token ? 'Pr√©sent' : 'Absent');
      
      // Tester la requ√™te avec le token utilisateur
      const { data: produitsWithAuth, error: produitsAuthError } = await supabase
        .from('client_produit_eligible')
        .select('*')
        .eq('client_id', clientId);
      
      if (produitsAuthError) {
        console.log('‚ùå Erreur avec auth:', produitsAuthError.message);
      } else {
        console.log('‚úÖ Produits avec auth:', produitsWithAuth.length);
      }
    }

    // 5. V√©rifier la structure de la table
    console.log('\n5Ô∏è‚É£ V√©rification de la structure de la table...');
    const { data: tableInfo, error: tableError } = await supabase
      .rpc('get_table_info', { table_name: 'client_produit_eligible' });
    
    if (tableError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les infos de table:', tableError.message);
    } else {
      console.log('üìã Structure de la table:', tableInfo);
    }

    // 6. V√©rifier les contraintes et index
    console.log('\n6Ô∏è‚É£ V√©rification des contraintes...');
    const { data: constraints, error: constraintsError } = await supabase
      .rpc('get_table_constraints', { table_name: 'client_produit_eligible' });
    
    if (constraintsError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les contraintes:', constraintsError.message);
    } else {
      console.log('üîí Contraintes trouv√©es:', constraints?.length || 0);
    }

    // 7. Test de requ√™te brute
    console.log('\n7Ô∏è‚É£ Test de requ√™te brute...');
    const { data: rawQuery, error: rawError } = await supabase
      .rpc('test_raw_query', { 
        query: `SELECT COUNT(*) as count FROM client_produit_eligible WHERE client_id = '${clientId}'` 
      });
    
    if (rawError) {
      console.log('‚ö†Ô∏è Impossible d\'ex√©cuter la requ√™te brute:', rawError.message);
    } else {
      console.log('üîç R√©sultat requ√™te brute:', rawQuery);
    }

    // 8. V√©rifier les logs d'acc√®s
    console.log('\n8Ô∏è‚É£ V√©rification des logs...');
    const { data: logs, error: logsError } = await supabase
      .from('audit_logs')
      .select('*')
      .eq('user_id', clientId)
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (logsError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les logs:', logsError.message);
    } else {
      console.log('üìù Logs r√©cents:', logs?.length || 0);
      if (logs && logs.length > 0) {
        logs.forEach((log, index) => {
          console.log(`   ${index + 1}. ${log.action} - ${log.created_at}`);
        });
      }
    }

    // 9. Test de l'API backend
    console.log('\n9Ô∏è‚É£ Test de l\'API backend...');
    const axios = require('axios');
    
    try {
      const response = await axios.get(`http://localhost:5001/api/produits-eligibles/client/${clientId}`, {
        headers: {
          'Authorization': `Bearer ${authData?.session?.access_token || 'test-token'}`
        }
      });
      
      console.log('‚úÖ API backend - Status:', response.status);
      console.log('‚úÖ API backend - Data:', response.data);
    } catch (apiError) {
      console.log('‚ùå Erreur API backend:', apiError.response?.status, apiError.response?.data);
    }

    console.log('\nüéØ R√©sum√© de l\'analyse:');
    console.log(`   - Client: ${client ? 'Trouv√©' : 'Non trouv√©'}`);
    console.log(`   - Produits √©ligibles: ${produitsEligibles.length}`);
    console.log(`   - Authentification: ${authData ? 'R√©ussie' : '√âchec'}`);
    console.log(`   - Probl√®me probable: ${produitsEligibles.length === 0 ? 'Aucun produit √©ligible en base' : 'Politiques RLS ou permissions'}`);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Ex√©cuter l'analyse
testProduitsEligibles(); 