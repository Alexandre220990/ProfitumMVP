const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY requises');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyCharteMigration() {
  console.log('üöÄ Application de la migration de signature de charte...');
  
  try {
    // 1. V√©rifier si les colonnes existent d√©j√†
    console.log('üîç V√©rification des colonnes existantes...');
    
    const { data: existingColumns, error: checkError } = await supabase
      .from('information_schema.columns')
      .select('column_name')
      .eq('table_name', 'ClientProduitEligible')
      .in('column_name', ['charte_signed', 'charte_signed_at']);

    if (checkError) {
      console.error('‚ùå Erreur lors de la v√©rification:', checkError);
      return;
    }

    const existingColumnNames = existingColumns.map(col => col.column_name);
    console.log('üìä Colonnes existantes:', existingColumnNames);

    if (existingColumnNames.includes('charte_signed') && existingColumnNames.includes('charte_signed_at')) {
      console.log('‚úÖ Les colonnes existent d√©j√† !');
      return;
    }

    // 2. Ajouter les colonnes une par une
    console.log('üìù Ajout des colonnes...');
    
    if (!existingColumnNames.includes('charte_signed')) {
      console.log('‚ûï Ajout de la colonne charte_signed...');
      // Note: Nous ne pouvons pas ex√©cuter ALTER TABLE directement via l'API
      // Il faudra le faire manuellement dans l'interface Supabase
      console.log('‚ö†Ô∏è  Veuillez ajouter manuellement la colonne charte_signed BOOLEAN DEFAULT FALSE dans l\'interface Supabase');
    }

    if (!existingColumnNames.includes('charte_signed_at')) {
      console.log('‚ûï Ajout de la colonne charte_signed_at...');
      console.log('‚ö†Ô∏è  Veuillez ajouter manuellement la colonne charte_signed_at TIMESTAMP WITH TIME ZONE dans l\'interface Supabase');
    }

    // 3. V√©rifier la table ChartesProduits
    console.log('üìã V√©rification de la table ChartesProduits...');
    
    const { data: tables, error: tableCheckError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_name', 'ChartesProduits');

    if (tableCheckError) {
      console.error('‚ùå Erreur lors de la v√©rification de la table:', tableCheckError);
      return;
    }

    if (tables.length === 0) {
      console.log('‚ö†Ô∏è  Veuillez cr√©er manuellement la table ChartesProduits dans l\'interface Supabase');
      console.log('üìã Structure requise:');
      console.log(`
        CREATE TABLE "ChartesProduits" (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          produit_id UUID REFERENCES "ProduitEligible"(id) ON DELETE CASCADE,
          nom_charte VARCHAR(255) NOT NULL,
          contenu_charte TEXT NOT NULL,
          version VARCHAR(10) DEFAULT '1.0',
          active BOOLEAN DEFAULT TRUE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `);
    } else {
      console.log('‚úÖ Table ChartesProduits existe d√©j√†');
    }

    console.log('üìã Instructions pour finaliser la migration:');
    console.log('1. Allez dans l\'interface Supabase > Table Editor');
    console.log('2. S√©lectionnez la table ClientProduitEligible');
    console.log('3. Ajoutez les colonnes:');
    console.log('   - charte_signed (BOOLEAN, DEFAULT FALSE)');
    console.log('   - charte_signed_at (TIMESTAMP WITH TIME ZONE)');
    console.log('4. Cr√©ez la table ChartesProduits si elle n\'existe pas');
    console.log('5. Activez RLS sur ChartesProduits');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'application de la migration:', error);
  }
}

applyCharteMigration(); 