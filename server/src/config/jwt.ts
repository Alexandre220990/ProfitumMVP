/**
 * Configuration s√©curis√©e pour JWT
 * ‚ö†Ô∏è En production, JWT_SECRET DOIT √™tre d√©fini dans les variables d'environnement
 */

const isProduction = process.env.NODE_ENV === 'production';
const isDevelopment = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;

/**
 * R√©cup√®re le JWT_SECRET de mani√®re s√©curis√©e
 * En production: Lance une erreur si JWT_SECRET n'est pas d√©fini
 * En d√©veloppement: Utilise un fallback avec un warning
 */
export function getJWTSecret(): string {
  const secret = process.env.JWT_SECRET;

  // En production, JWT_SECRET est OBLIGATOIRE
  if (isProduction && !secret) {
    throw new Error(
      'üö® ERREUR CRITIQUE: JWT_SECRET n\'est pas d√©fini en production. ' +
      'D√©finissez cette variable d\'environnement avant de d√©marrer le serveur.'
    );
  }

  // En d√©veloppement, warning si pas d√©fini
  if (isDevelopment && !secret) {
    console.warn(
      '‚ö†Ô∏è  WARNING: JWT_SECRET n\'est pas d√©fini. ' +
      'Utilisation d\'un secret de d√©veloppement (NON S√âCURIS√â pour la production)'
    );
    return 'dev_jwt_secret_please_set_env_variable_in_production';
  }

  return secret as string;
}

/**
 * Configuration JWT
 */
export const jwtConfig = {
  secret: getJWTSecret(),
  expiresIn: '24h' as const, // Dur√©e du token d'acc√®s
  refreshExpiresIn: '7d' as const, // Dur√©e du refresh token
  algorithm: 'HS256' as const
};

/**
 * V√©rifie que la configuration JWT est valide au d√©marrage
 */
export function validateJWTConfig(): void {
  try {
    getJWTSecret();
    console.log('‚úÖ Configuration JWT valide');
  } catch (error) {
    console.error('‚ùå Configuration JWT invalide:', error);
    throw error;
  }
}

