import express, { Response, Request } from 'express';
import crypto from 'crypto';
import { supabase } from '../lib/supabase';
const fetch = require('node-fetch');
import { PYTHON_API_URL } from '../config/api';
import jwt from 'jsonwebtoken';


// Types pour l'authentification
interface AuthUser {
  id: string;
  email: string;
  type: 'client' | 'expert' | 'admin';
  user_metadata?: any;
  app_metadata?: any;
  aud?: string;
  created_at?: string;
}

interface TableTestResult {
  status: string;
  message?: string;
  count?: number;
  sample?: any;
  isEmpty?: boolean;
  sampleError?: string;
}

interface PythonAnalyseResponse {
  eligibleProduitIds?: string[];
  [key: string]: any;
}

const router = express.Router();

// Cl√© JWT pour la validation des tokens
import { jwtConfig } from '../config/jwt';
const JWT_SECRET = jwtConfig.secret;

// Route de test pour v√©rifier les tables
router.get('/test-tables', async (req: Request, res: Response) => {
  try {
    console.log('Test des tables...');
    const results: Record<string, any> = {};
    
    // Tables √† tester
    const tables = [
      'Client', 
      'Simulation', 
      'ProduitEligible', 
      'ClientProduitEligible', 
      'Question', 
      'Reponse', 
      'SimulationResult'
    ];
    
    // Tester chaque table
    for (const table of tables) {
      try {
        console.log(`Test de la table ${table}...`);
        
        // V√©rifier la table
        let tableTest: TableTestResult;
        try {
          const { data, error } = await supabase
            .from(table)
            .select('count')
            .single();
          
          if (error) {
            console.error(`Erreur lors de la v√©rification de la table ${table}:`, error);
            tableTest = { status: 'error', message: error.message };
          } else {
            tableTest = { status: 'ok', count: data?.count || 0 };
          }
        } catch (error) {
          console.error(`Erreur de requ√™te pour ${table}:`, error);
          tableTest = { status: 'error', message: error instanceof Error ? error.message : 'Erreur inconnue' };
        }
        
        // R√©cup√©rer un √©chantillon
        try {
          const { data, error } = await supabase
            .from(table)
            .select('*')
            .limit(1);
          
          if (!error && data && data.length > 0) {
            tableTest.sample = data[0];
            tableTest.isEmpty = false;
          } else {
            tableTest.isEmpty = true;
          }
        } catch (error) {
          console.error(`Erreur lors de l'√©chantillonnage de ${table}:`, error);
          tableTest.sampleError = error instanceof Error ? error.message : 'Erreur inconnue';
        }
        
        results[table] = tableTest;
      } catch (tableError) {
        console.error(`Erreur globale pour ${table}:`, tableError);
        results[table] = { 
          status: 'error', 
          message: tableError instanceof Error ? tableError.message : 'Erreur inconnue' 
        };
      }
    }
    
    // Essayer de r√©cup√©rer la configuration supabase
    results.config = {
      url: process.env.SUPABASE_URL,
      keyPresent: !!process.env.SUPABASE_KEY
    };
    
    return res.json({
      success: true,
      data: results,
      message: 'Test des tables termin√©'
    });
  } catch (error) {
    console.error('Erreur lors du test des tables:', error);
    return res.status(500).json({
      success: false,
      message: 'Erreur lors du test des tables',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

// V√©rifier s'il existe une simulation r√©cente pour le client (AVEC AUTHENTIFICATION) - OPTIMIS√â
router.get('/check-recent/:clientId', async (req: Request, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({ success: false, message: 'Non authentifi√©' });
    }

    const authUser = req.user as AuthUser;
    const { clientId } = req.params;
    
    console.log('üîç V√©rification simulation r√©cente pour le client:', clientId, 'par utilisateur:', authUser.email);
    
    // V√©rifier que l'utilisateur a acc√®s √† ce client
    if (authUser.type === 'client') {
      // R√©cup√©rer le client par auth_id pour v√©rifier l'acc√®s
      const { data: client, error: clientError } = await supabase
        .from('Client')
        .select('id')
        .eq('auth_id', authUser.id)
        .single();

      if (clientError || !client || client.id !== clientId) {
        console.log('‚ùå Acc√®s refus√©: client ne peut acc√©der qu\'√† ses propres donn√©es');
        return res.status(403).json({ 
          success: false, 
          message: 'Acc√®s non autoris√© √† ce client' 
        });
      }
    }
    
    // Rechercher les simulations des 24 derni√®res heures (requ√™tes parall√®les)
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);
    const yesterdayISO = yesterday.toISOString();

    const [simulationResult, processedResult] = await Promise.all([
      supabase
        .from('simulations')
        .select('id, created_at, status')
        .eq('client_id', clientId)
        .gt('created_at', yesterdayISO)
        .order('created_at', { ascending: false })
        .limit(1),
      
      supabase
        .from('SimulationProcessed')
        .select('id, createdat, statut')
        .eq('clientid', clientId)
        .gt('createdat', yesterdayISO)
        .order('createdat', { ascending: false })
        .limit(1)
    ]);
    
    if (simulationResult.error) {
      console.error('‚ùå Erreur Supabase Simulation:', simulationResult.error);
      throw simulationResult.error;
    }

    if (processedResult.error) {
      console.error('‚ö†Ô∏è Erreur lors de la v√©rification des simulations trait√©es:', processedResult.error);
    }

    // D√©terminer s'il y a une simulation r√©cente
    const hasRecentSimulation = 
      (simulationResult.data && Array.isArray(simulationResult.data) && simulationResult.data.length > 0) || 
      (processedResult.data && Array.isArray(processedResult.data) && processedResult.data.length > 0);

    console.log('‚úÖ V√©rification termin√©e:', {
      hasRecentSimulation,
      simulationFound: simulationResult.data && Array.isArray(simulationResult.data) && simulationResult.data.length > 0,
      processedFound: processedResult.data && Array.isArray(processedResult.data) && processedResult.data.length > 0
    });

    return res.json({
      success: true,
      hasRecentSimulation,
      data: {
        simulation: simulationResult.data?.[0] || null,
        processed: processedResult.data?.[0] || null
      }
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des simulations r√©centes:', error);
    return res.status(500).json({
      success: false,
      message: 'Erreur lors de la v√©rification des simulations r√©centes',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

// Route pour cr√©er une simulation
router.post('/', async (req: Request, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({ success: false, message: 'Non authentifi√©' });
    }

    const authUser = req.user as AuthUser;
    const { clientId, type, data } = req.body;

    // V√©rifier que l'utilisateur a le droit de cr√©er une simulation
    if (authUser.type === 'client' && authUser.id !== clientId) {
      return res.status(403).json({ 
        success: false, 
        message: 'Vous ne pouvez cr√©er des simulations que pour votre propre compte' 
      });
    }

    console.log('üöÄ Cr√©ation d\'une nouvelle simulation:', { clientId, type, userId: authUser.id });

    // Cr√©er la simulation en base
    const { data: simulation, error: simulationError } = await supabase
      .from('simulations')
      .insert({
        client_id: clientId,
        type,
        answers: data || {},
        status: 'en_cours',
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
      })
      .select()
      .single();

    if (simulationError) {
      console.error('‚ùå Erreur lors de la cr√©ation de la simulation:', simulationError);
      throw simulationError;
    }

    console.log('‚úÖ Simulation cr√©√©e avec succ√®s:', simulation.id);

    // Envoyer √† l'API Python pour analyse
    try {
      const startTime = Date.now();
      
      const response = await fetch(`${PYTHON_API_URL}/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          simulation_id: simulation.id,
          client_id: clientId,
          answers: data,
          type: type
        })
      });

      const responseTime = Date.now() - startTime;
      console.log(`‚è±Ô∏è Temps de r√©ponse Python: ${responseTime}ms`);

      if (!response.ok) {
        throw new Error(`Erreur API Python: ${response.status} ${response.statusText}`);
      }

      const pythonResponse: PythonAnalyseResponse = await response.json();
      console.log('üìä R√©ponse Python re√ßue:', pythonResponse);

      // Mettre √† jour la simulation avec les r√©sultats
      const { error: updateError } = await supabase
        .from('simulations')
        .update({
          status: 'completed',
          results: pythonResponse,
          updated_at: new Date().toISOString()
        })
        .eq('id', simulation.id);

      if (updateError) {
        console.error('‚ùå Erreur lors de la mise √† jour de la simulation:', updateError);
      }

      // Enregistrer les produits √©ligibles avec le nouveau syst√®me
      if (pythonResponse.eligibleProduitIds && pythonResponse.eligibleProduitIds.length > 0) {
        await enregistrerProduitsEligibles(clientId, simulation.id, pythonResponse.eligibleProduitIds);
      } else {
        // Fallback : √âvaluer avec le nouveau moteur de r√®gles
        console.log('‚ö†Ô∏è Pas de produits √©ligibles de Python, utilisation du moteur de r√®gles');
        // TODO: Impl√©menter l'√©valuation bas√©e sur les r√©ponses de la simulation
      }

      return res.json({
        success: true,
        data: {
          simulation: {
            ...simulation,
            results: pythonResponse
          }
        },
        message: 'Simulation cr√©√©e et analys√©e avec succ√®s'
      });

    } catch (pythonError) {
      console.error('‚ùå Erreur lors de l\'analyse Python:', pythonError);
      
      // Marquer la simulation comme √©chou√©e
      await supabase
        .from('simulations')
        .update({
          status: 'failed',
          metadata: { 
            error: pythonError instanceof Error ? pythonError.message : 'Erreur inconnue'
          }
        })
        .eq('id', simulation.id);

      return res.status(500).json({
        success: false,
        message: 'Erreur lors de l\'analyse de la simulation',
        error: pythonError instanceof Error ? pythonError.message : 'Erreur inconnue'
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la simulation:', error);
    return res.status(500).json({
      success: false,
      message: 'Erreur lors de la cr√©ation de la simulation',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

// Route pour r√©cup√©rer les simulations d'un client
router.get('/client/:clientId', async (req: Request, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({ success: false, message: 'Non authentifi√©' });
    }

    const authUser = req.user as AuthUser;
    const { clientId } = req.params;

    // V√©rifier les permissions
    if (authUser.type === 'client' && authUser.id !== clientId) {
      return res.status(403).json({ 
        success: false, 
        message: 'Vous ne pouvez voir que vos propres simulations' 
      });
    }

    console.log('üîç R√©cup√©ration des simulations pour le client:', clientId);

    const { data: simulations, error } = await supabase
      .from('simulations')
      .select('*')
      .eq('client_id', clientId)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des simulations:', error);
      throw error;
    }

    return res.json({
      success: true,
      data: {
        simulations: simulations || []
      }
    });

  } catch (error: unknown) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des simulations:', error);
    return res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des simulations',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

// Route pour exporter une simulation
router.post('/:id/export', async (req: Request, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({ success: false, message: 'Non authentifi√©' });
    }

    const authUser = req.user as AuthUser;
    const { id } = req.params;
    const { format, products, answers } = req.body;

    console.log('üì§ Export de simulation:', { id, format, userId: authUser.id });

    // R√©cup√©rer la simulation
    const { data: simulation, error: simulationError } = await supabase
      .from('simulations')
      .select('*')
      .eq('id', id)
      .single();

    if (simulationError || !simulation) {
      return res.status(404).json({
        success: false,
        message: 'Simulation non trouv√©e'
      });
    }

    // V√©rifier les permissions
    if (authUser.type === 'client' && simulation.clientId !== authUser.id) {
      return res.status(403).json({
        success: false,
        message: 'Vous ne pouvez exporter que vos propres simulations'
      });
    }

    let buffer: Buffer;
    let filename: string;
    let contentType: string;

    switch (format) {
      case 'xlsx':
        buffer = await generateExcelExport(products, answers, simulation);
        filename = `simulation_${id}.xlsx`;
        contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        break;
      case 'pdf':
        buffer = await generatePDFExport(products, answers, simulation);
        filename = `simulation_${id}.pdf`;
        contentType = 'application/pdf';
        break;
      case 'docx':
        buffer = await generateWordExport(products, answers, simulation);
        filename = `simulation_${id}.docx`;
        contentType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
        break;
      default:
        return res.status(400).json({
          success: false,
          message: 'Format d\'export non support√©'
        });
    }

    res.setHeader('Content-Type', contentType);
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    return res.send(buffer);

  } catch (error: unknown) {
    console.error('‚ùå Erreur lors de l\'export:', error);
    return res.status(500).json({
      success: false,
      message: 'Erreur lors de l\'export',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
});

// Fonction pour enregistrer TOUS les produits (√©ligibles ou non)
async function enregistrerProduitsEligibles(clientId: string, simulationId: number, produitIdsEligibles: string[]) {
  try {
    console.log('üíæ Enregistrement de TOUS les produits pour le client:', { clientId, simulationId, produitIdsEligibles });

    // 1. R√©cup√©rer TOUS les 10 produits actifs de la BDD
    const { data: tousProduits, error: produitsError } = await supabase
      .from('ProduitEligible')
      .select('id, nom')
      .eq('active', true)
      .order('nom');

    if (produitsError || !tousProduits) {
      console.error('‚ùå Erreur r√©cup√©ration produits:', produitsError);
      throw produitsError;
    }

    console.log(`üì¶ ${tousProduits.length} produits actifs trouv√©s dans la BDD`);

    // 2. Cr√©er les entr√©es pour TOUS les produits
    const produitsToInsert = tousProduits.map((produit, index) => {
      const isEligible = produitIdsEligibles.includes(produit.id);
      const eligibleIndex = produitIdsEligibles.indexOf(produit.id);
      
      return {
        clientId,
        produitId: produit.id,
        statut: isEligible ? 'eligible' : 'non_eligible',
        priorite: isEligible ? (eligibleIndex + 1) : (index + 10), // √âligibles en premier
        notes: isEligible 
          ? 'Produit d√©tect√© comme √©ligible via simulation' 
          : 'Produit non √©ligible selon simulation - Contactez un expert pour plus d\'informations',
        metadata: {
          source: 'simulation',
          simulation_id: simulationId,
          detected_at: new Date().toISOString(),
          is_eligible: isEligible,
          priority_label: isEligible 
            ? (eligibleIndex === 0 ? 'high' : eligibleIndex < 3 ? 'medium' : 'low')
            : 'none',
          eligibility_rank: isEligible ? (eligibleIndex + 1) : null
        },
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
    });

    // 3. Ins√©rer TOUS les produits
    const { error } = await supabase
      .from('ClientProduitEligible')
      .insert(produitsToInsert);

    if (error) {
      console.error('‚ùå Erreur lors de l\'enregistrement des produits:', error);
      throw error;
    }

    const nbEligibles = produitsToInsert.filter(p => p.statut === 'eligible').length;
    const nbNonEligibles = produitsToInsert.filter(p => p.statut === 'non_eligible').length;
    
    console.log(`‚úÖ ${produitsToInsert.length} produits enregistr√©s avec succ√®s:`);
    console.log(`   - ${nbEligibles} √©ligibles`);
    console.log(`   - ${nbNonEligibles} non √©ligibles`);
    console.log(`   - Source: simulation`);
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'enregistrement des produits:', error);
    throw error;
  }
}

// Fonction pour g√©n√©rer l'export Excel
async function generateExcelExport(products: any[], answers: any, simulation: any): Promise<Buffer> {
  // Impl√©mentation simplifi√©e - retourner un buffer vide pour l'instant
  return Buffer.from('Export Excel - √Ä impl√©menter');
}

// Fonction pour g√©n√©rer l'export PDF
async function generatePDFExport(products: any[], answers: any, simulation: any): Promise<Buffer> {
  // Impl√©mentation simplifi√©e - retourner un buffer vide pour l'instant
  return Buffer.from('Export PDF - √Ä impl√©menter');
}

// Fonction pour g√©n√©rer l'export Word
async function generateWordExport(products: any[], answers: any, simulation: any): Promise<Buffer> {
  // Impl√©mentation simplifi√©e - retourner un buffer vide pour l'instant
  return Buffer.from('Export Word - √Ä impl√©menter');
}

export default router;