import express, { Response, RequestHandler } from 'express';
import { authMiddleware, getAuthHeaders } from '../middleware/auth';
import { RequestWithUser, AuthUser, BaseUser, UserMetadata } from '../types/auth';
import crypto from 'crypto';
import { supabase } from '../lib/supabase';
const fetch = require('node-fetch');
import { PYTHON_API_URL } from '../config/api';
import jwt from 'jsonwebtoken';

interface TableTestResult {
  status: string;
  message?: string;
  count?: number;
  sample?: any;
  isEmpty?: boolean;
  sampleError?: string;
}

interface PythonAnalyseResponse {
  eligibleProduitIds?: string[];
  [key: string]: any;
}

const router = express.Router();

// Cl√© JWT pour la validation des tokens
const JWT_SECRET = process.env.JWT_SECRET || "EhAhS26BXDsowVPe";

// Route de test pour v√©rifier les tables
router.get('/test-tables', (async (req, res) => {
  const typedReq = req as RequestWithUser;
  try {
    console.log('Test des tables...');
    const results: Record<string, any> = {};
    
    // Tables √† tester
    const tables = [
      'Client', 
      'Simulation', 
      'ProduitEligible', 
      'ClientProduitEligible', 
      'Question', 
      'Reponse', 
      'SimulationResult'
    ];
    
    // Tester chaque table
    for (const table of tables) {
      try {
        console.log(`Test de la table ${table}...`);
        
        // V√©rifier la table
        let tableTest: TableTestResult;
        try {
          const { data, error } = await supabase
            .from(table)
            .select('count')
            .single();
          
          if (error) {
            console.error(`Erreur lors de la v√©rification de la table ${table}:`, error);
            tableTest = { status: 'error', message: error.message };
          } else {
            tableTest = { status: 'ok', count: data?.count || 0 };
          }
        } catch (error) {
          console.error(`Erreur de requ√™te pour ${table}:`, error);
          tableTest = { status: 'error', message: error instanceof Error ? error.message : 'Erreur inconnue' };
        }
        
        // R√©cup√©rer un √©chantillon
        try {
          const { data, error } = await supabase
            .from(table)
            .select('*')
            .limit(1);
          
          if (!error && data && data.length > 0) {
            tableTest.sample = data[0];
            tableTest.isEmpty = false;
          } else {
            tableTest.isEmpty = true;
          }
        } catch (error) {
          console.error(`Erreur lors de l'√©chantillonnage de ${table}:`, error);
          // Ne pas √©craser le statut si l'√©chantillonnage √©choue
          tableTest.sampleError = error instanceof Error ? error.message : 'Erreur inconnue';
        }
        
        results[table] = tableTest;
      } catch (tableError) {
        console.error(`Erreur globale pour ${table}:`, tableError);
        results[table] = { 
          status: 'error', 
          message: tableError instanceof Error ? tableError.message : 'Erreur inconnue' 
        };
      }
    }
    
    // Essayer de r√©cup√©rer la configuration supabase
    results.config = {
      url: process.env.SUPABASE_URL,
      keyPresent: !!process.env.SUPABASE_KEY
    };
    
    res.json({
      success: true,
      data: results,
      message: 'Test des tables termin√©'
    });
  } catch (error) {
    console.error('Erreur lors du test des tables:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors du test des tables',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
}) as RequestHandler);

// V√©rifier s'il existe une simulation r√©cente pour le client (SANS AUTHENTIFICATION)
router.get('/check-recent/:clientId', (async (req, res) => {
  try {
    const { clientId } = req.params;
    console.log('üîç V√©rification simulation r√©cente pour le client:', clientId);
    
    // Rechercher les simulations des 24 derni√®res heures
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);

    // V√©rifier d'abord dans la table Simulation
    const { data: recentSimulations, error } = await supabase
      .from('Simulation')
      .select('*')
      .eq('clientId', clientId)
      .gt('created_at', yesterday.toISOString())
      .order('created_at', { ascending: false })
      .limit(1);
    
    if (error) {
      console.error('‚ùå Erreur Supabase Simulation:', error);
      throw error;
    }

    // V√©rifier √©galement dans la table SimulationProcessed
    const { data: recentProcessed, error: processedError } = await supabase
      .from('SimulationProcessed')
      .select('*')
      .eq('clientid', clientId)
      .gt('createdat', yesterday.toISOString())
      .order('createdat', { ascending: false })
      .limit(1);
    
    if (processedError) {
      console.error('‚ö†Ô∏è Erreur lors de la v√©rification des simulations trait√©es:', processedError);
      // Ne pas interrompre le flux si cette requ√™te √©choue
    }

    // D√©terminer s'il y a une simulation r√©cente
    const hasRecentSimulation = 
      (recentSimulations && recentSimulations.length > 0) || 
      (recentProcessed && recentProcessed.length > 0);

    console.log('‚úÖ V√©rification termin√©e:', {
      hasRecentSimulation,
      simulationFound: recentSimulations?.length > 0,
      processedFound: Array.isArray(recentProcessed) && recentProcessed.length > 0
    });

    // Formater la r√©ponse
    res.json({
      success: true,
      hasRecentSimulation,
      data: {
        simulation: recentSimulations?.[0] || null,
        processed: recentProcessed?.[0] || null
      }
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des simulations r√©centes:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la v√©rification des simulations r√©centes',
      error: error instanceof Error ? error.message : 'Erreur inconnue'
    });
  }
}) as RequestHandler);

// Route pour cr√©er ou r√©cup√©rer une simulation
router.post('/', authMiddleware, (async (req, res) => {
  const typedReq = req as RequestWithUser;
  try {
    console.log('[POST /api/simulations] Requ√™te re√ßue');
    console.log('Headers:', req.headers);
    console.log('Body re√ßu:', req.body);

    const { client_id } = req.body;

    if (!client_id) {
      console.log('‚ùå Client ID manquant');
      return res.status(400).json({ 
        success: false, 
        message: "L'ID du client est requis" 
      });
    }

    // V√©rifier que l'utilisateur a le droit de cr√©er une simulation pour ce client
    if (typedReq.user?.id !== client_id) {
      console.log('‚ùå Acc√®s non autoris√©');
      return res.status(403).json({ 
        success: false, 
        message: "Acc√®s non autoris√©" 
      });
    }

    console.log(`[POST /api/simulations] Client ID re√ßu : ${client_id}`);
    
    // Cr√©er une nouvelle simulation
    const now = new Date().toISOString();
    
    const { data: simulation, error } = await supabase
      .from('Simulation')
      .insert({
        clientId: client_id,
        statut: 'en_cours',
        dateCreation: now,
        createdAt: now,
        updatedAt: now
      })
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Erreur lors de la cr√©ation de la simulation:', error);
      return res.status(500).json({
        success: false,
        message: 'Erreur lors de la cr√©ation de la simulation'
      });
    }
    
    console.log('‚úÖ Simulation cr√©√©e:', simulation);
    
    return res.status(200).json({
      success: true,
      data: {
        simulation,
        message: 'Simulation cr√©√©e avec succ√®s'
      }
    });
  } catch (error) {
    console.error('‚ùå Exception g√©n√©rale dans POST /api/simulations:', error);
    
    return res.status(500).json({
      success: false,
      message: error instanceof Error ? error.message : 'Erreur inconnue lors du traitement de la demande'
    });
  }
}) as RequestHandler);

// Fonction pour enregistrer une simulation trait√©e
async function enregistrerSimulationTraitee(
  clientId: string,
  simulationId: number, // L'ID g√©n√©r√© par PostgreSQL
  produitsEligiblesIds: string[],
  produitsDetails: any[],
  rawAnswers: any,
  score: number,
  dureeAnalyseMs: number
) {
  try {
    console.log(`Enregistrement de la simulation trait√©e ${simulationId} pour le client ${clientId}`);
    
    const now = new Date().toISOString();
    
    const { data, error } = await supabase
      .from('SimulationProcessed')
      .insert({
        clientid: clientId,
        simulationid: simulationId,
        dateprocessed: now,
        produitseligiblesids: produitsEligiblesIds,
        produitsdetails: produitsDetails,
        rawanswers: rawAnswers,
        score: score,
        dureeanalysems: dureeAnalyseMs,
        statut: 'completed',
        createdat: now,
        updatedat: now
      })
      .select()
      .single();
      
    if (error) {
      console.error('Erreur lors de l\'enregistrement de la simulation trait√©e:', error);
      return null;
    }
    
    console.log('Simulation trait√©e enregistr√©e avec succ√®s:', data);
    return data;
  } catch (error) {
    console.error('Exception lors de l\'enregistrement de la simulation trait√©e:', error);
    return null;
  }
}

// R√©cup√©rer les simulations d'un client
router.get('/client/:clientId', authMiddleware, (async (req, res) => {
  const typedReq = req as RequestWithUser;
  try {
    if (!typedReq.user) {
      return res.status(401).json({ message: 'Utilisateur non authentifi√©' });
    }
    
    if (typedReq.params.clientId !== typedReq.user.id && typedReq.user.type !== 'expert') {
      return res.status(403).json({ message: 'Acc√®s non autoris√©' });
    }

    // R√©cup√©rer les simulations avec leurs r√©sultats associ√©s
    const { data: simulations, error } = await supabase
      .from('Simulation')
      .select(`
        *,
        SimulationResult (*)
      `)
      .eq('clientId', typedReq.params.clientId)
      .order('createdAt', { ascending: false });

    if (error) {
      throw error;
    }

    res.json({
      success: true,
      data: simulations
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des simulations:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des simulations'
    });
  }
}) as RequestHandler);

// Fonction pour d√©terminer les produits √©ligibles en fonction des r√©ponses
async function determinerProduitsEligibles(answers: any): Promise<string[]> {
  try {
    console.log('Analyse des r√©ponses pour d√©terminer les produits √©ligibles:', answers);

    // V√©rification de s√©curit√© pour s'assurer que answers est un objet
    if (!answers || typeof answers !== 'object') {
      console.warn('Format des r√©ponses invalide, utilisation de la logique de secours');
      answers = {};
    }

    console.log('Appel √† l\'API Python pour d√©terminer les produits √©ligibles');

    const response = await fetch(`${PYTHON_API_URL}/analyse`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ answers })
    });

    if (!response.ok) {
      console.error('Erreur de l\'API Python:', response.statusText);
      throw new Error('√âchec de l\'analyse via l\'API Python');
    }

    const result = await response.json() as PythonAnalyseResponse;
    console.log('R√©sultat re√ßu de l\'API Python:', result);

    // Correction du typage avec l'interface d√©finie
    const eligibleProduitIds = result && Array.isArray(result.eligibleProduitIds) 
      ? result.eligibleProduitIds 
      : [];
      
    if (eligibleProduitIds.length === 0) {
      console.warn('Aucun produit √©ligible retourn√© par l\'API Python ou format invalide');
    }

    return eligibleProduitIds;
  } catch (error) {
    console.error('Erreur lors de la d√©termination des produits √©ligibles:', error);
    // En cas d'erreur, renvoyer un tableau vide
    return [];
  }
}

// Fonction utilitaire pour extraire les r√©ponses en tant qu'array
function extractArrayOrString(value: any): string[] {
  if (!value) return [];
  if (Array.isArray(value)) return value;
  if (typeof value === 'string') return [value];
  return [];
}

// R√©cup√©rer la liste des questions pour le simulateur
router.get('/questions', (async (req, res) => {
  const typedReq = req as RequestWithUser;
  try {
    console.log('üì© GET /api/simulations/questions appel√©e');
    
    // Version simplifi√©e retournant des donn√©es statiques
    const questionsStatiques = [
      {
        id: 1,
        texte: 'Quel est le chiffre d\'affaires annuel de votre entreprise ?',
        type: 'nombre',
        ordre: 1,
        categorie: 'finance',
        options: {
          min: 0,
          max: 100000000,
          unite: '‚Ç¨'
        },
        description: 'Indiquez le montant hors taxes du dernier exercice fiscal.',
        importance: 3
      },
      {
        id: 2,
        texte: 'Combien d\'employ√©s compte votre entreprise ?',
        type: 'nombre',
        ordre: 2,
        categorie: 'rh',
        options: {
          min: 0,
          max: 10000
        },
        description: 'Comptez tous les types de contrats (CDI, CDD, int√©rim...)',
        importance: 2
      },
      {
        id: 3,
        texte: 'Quel est votre secteur d\'activit√© principal ?',
        type: 'choix_unique',
        ordre: 3,
        categorie: 'general',
        options: {
          choix: [
            'Agriculture',
            'Industrie',
            'Construction',
            'Commerce',
            'Services',
            'Autre'
          ]
        },
        importance: 3
      },
      {
        id: 4,
        texte: 'Quels types de v√©hicules utilisez-vous dans votre activit√© ?',
        type: 'choix_multiple',
        ordre: 4,
        categorie: 'transport',
        options: {
          choix: [
            'V√©hicules l√©gers',
            'Utilitaires',
            'Poids lourds',
            'Engins de chantier',
            'Aucun'
          ]
        },
        description: 'S√©lectionnez tous les types applicables.',
        importance: 2
      }
    ];

    console.log(`‚úÖ ${questionsStatiques.length} questions statiques pr√©par√©es`);
    
    // Renvoyer les donn√©es au client
    return res.json({
      success: true,
      data: questionsStatiques
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des questions:', error);
    return res.status(500).json({
      success: false,
      message: error instanceof Error ? error.message : 'Erreur inconnue lors de la r√©cup√©ration des questions'
    });
  }
}) as RequestHandler);

export default router;