import express from 'express';
import { SessionMigrationService, MigrationData } from '../services/sessionMigrationService';
import { supabase } from '../lib/supabase';

const router = express.Router();

/**
 * Routes de migration des sessions temporaires vers des comptes clients
 * ====================================================================
 * 
 * Ces routes permettent de transformer les utilisateurs du simulateur
 * en v√©ritables clients avec leurs produits √©ligibles.
 */

// Route pour v√©rifier si une session peut √™tre migr√©e
router.get('/can-migrate/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;

    if (!sessionId) {
      return res.status(400).json({
        success: false,
        error: 'Session ID requis'
      });
    }

    const canMigrate = await SessionMigrationService.canMigrateSession(sessionId);

    res.json({
      success: true,
      can_migrate: canMigrate,
      session_id: sessionId
    });

  } catch (error) {
    console.error('Erreur v√©rification migration:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la v√©rification de migration'
    });
  }
});

// Route pour r√©cup√©rer les donn√©es de session pour migration
router.get('/session-data/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;

    if (!sessionId) {
      return res.status(400).json({
        success: false,
        error: 'Session ID requis'
      });
    }

    // V√©rifier que la session peut √™tre migr√©e
    const canMigrate = await SessionMigrationService.canMigrateSession(sessionId);
    if (!canMigrate) {
      return res.status(400).json({
        success: false,
        error: 'Cette session ne peut pas √™tre migr√©e'
      });
    }

    // R√©cup√©rer les donn√©es de session
    const { data: sessionData, error: sessionError } = await supabase
      .from('TemporarySession')
      .select('*')
      .eq('id', sessionId)
      .single();

    if (sessionError || !sessionData) {
      return res.status(404).json({
        success: false,
        error: 'Session non trouv√©e'
      });
    }

    // R√©cup√©rer les r√©ponses
    const { data: responses, error: responsesError } = await supabase
      .from('TemporaryResponse')
      .select(`
        *,
        QuestionnaireQuestion (
          question_text,
          question_type,
          produits_cibles
        )
      `)
      .eq('session_id', sessionId);

    if (responsesError) {
      console.error('Erreur r√©cup√©ration r√©ponses:', responsesError);
    }

    // R√©cup√©rer les r√©sultats d'√©ligibilit√©
    const { data: eligibilityResults, error: eligibilityError } = await supabase
      .from('TemporaryEligibility')
      .select('*')
      .eq('session_id', sessionId);

    if (eligibilityError) {
      console.error('Erreur r√©cup√©ration √©ligibilit√©:', eligibilityError);
    }

    // Extraire les donn√©es client des r√©ponses
    const extractedData = SessionMigrationService.extractClientDataFromResponses(responses || []);

    res.json({
      success: true,
      data: {
        session: sessionData,
        responses: responses || [],
        eligibility_results: eligibilityResults || [],
        extracted_client_data: extractedData,
        total_potential_savings: (eligibilityResults || []).reduce((sum: number, r: any) => sum + (r.estimated_savings || 0), 0),
        high_eligibility_count: (eligibilityResults || []).filter((r: any) => r.eligibility_score >= 70).length
      }
    });

  } catch (error) {
    console.error('Erreur r√©cup√©ration donn√©es session:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des donn√©es de session'
    });
  }
});

// Route pour migrer une session vers un compte client
router.post('/migrate', async (req, res) => {
  try {
    const migrationData: MigrationData = req.body;

    // Validation des donn√©es requises
    if (!migrationData.sessionToken || !migrationData.sessionId || !migrationData.clientData) {
      return res.status(400).json({
        success: false,
        error: 'Donn√©es de migration incompl√®tes'
      });
    }

    const { email, password, username, company_name, phone_number, address, city, postal_code, siren } = migrationData.clientData;

    if (!email || !password || !username || !company_name || !phone_number || !address || !city || !postal_code || !siren) {
      return res.status(400).json({
        success: false,
        error: 'Tous les champs client sont requis'
      });
    }

    // V√©rifier que la session peut √™tre migr√©e
    const canMigrate = await SessionMigrationService.canMigrateSession(migrationData.sessionId);
    if (!canMigrate) {
      return res.status(400).json({
        success: false,
        error: 'Cette session ne peut pas √™tre migr√©e'
      });
    }

    // Effectuer la migration
    const migrationResult = await SessionMigrationService.migrateSessionToClient(migrationData);

    if (!migrationResult.success) {
      return res.status(500).json({
        success: false,
        error: migrationResult.error || 'Erreur lors de la migration'
      });
    }

    // Retourner le r√©sultat avec les informations du client cr√©√©
    res.json({
      success: true,
      message: 'Migration r√©ussie',
      data: {
        client_id: migrationResult.clientId,
        client_produit_eligibles: migrationResult.clientProduitEligibles,
        migration_details: migrationResult.details
      }
    });

  } catch (error) {
    console.error('Erreur migration session:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la migration de la session'
    });
  }
});

// Route pour r√©cup√©rer les statistiques de migration
router.get('/stats', async (req, res) => {
  try {
    const stats = await SessionMigrationService.getMigrationStats();

    if (!stats) {
      return res.status(500).json({
        success: false,
        error: 'Erreur lors de la r√©cup√©ration des statistiques'
      });
    }

    res.json({
      success: true,
      data: stats
    });

  } catch (error) {
    console.error('Erreur r√©cup√©ration stats migration:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des statistiques'
    });
  }
});

// Route pour r√©cup√©rer les sessions migr√©es d'un client
router.get('/client/:clientId/migrations', async (req, res) => {
  try {
    const { clientId } = req.params;

    if (!clientId) {
      return res.status(400).json({
        success: false,
        error: 'Client ID requis'
      });
    }

    // R√©cup√©rer les sessions migr√©es pour ce client
    const { data: sessions, error: sessionsError } = await supabase
      .from('TemporarySession')
      .select(`
        *,
        TemporaryResponse (count),
        TemporaryEligibility (count)
      `)
      .eq('client_id', clientId)
      .eq('migrated_to_account', true);

    if (sessionsError) {
      console.error('Erreur r√©cup√©ration sessions migr√©es:', sessionsError);
      return res.status(500).json({
        success: false,
        error: 'Erreur lors de la r√©cup√©ration des sessions migr√©es'
      });
    }

    res.json({
      success: true,
      data: {
        client_id: clientId,
        migrated_sessions: sessions || [],
        total_migrations: sessions?.length || 0
      }
    });

  } catch (error) {
    console.error('Erreur r√©cup√©ration migrations client:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des migrations'
    });
  }
});

// Route pour annuler une migration (en cas d'erreur)
router.post('/rollback/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;

    if (!sessionId) {
      return res.status(400).json({
        success: false,
        error: 'Session ID requis'
      });
    }

    // Marquer la session comme non migr√©e
    const { error: updateError } = await supabase
      .from('TemporarySession')
      .update({
        migrated_to_account: false,
        migrated_at: null,
        client_id: null
      })
      .eq('id', sessionId);

    if (updateError) {
      console.error('Erreur rollback migration:', updateError);
      return res.status(500).json({
        success: false,
        error: 'Erreur lors du rollback'
      });
    }

    res.json({
      success: true,
      message: 'Rollback effectu√© avec succ√®s',
      session_id: sessionId
    });

  } catch (error) {
    console.error('Erreur rollback migration:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du rollback de la migration'
    });
  }
});

// Route de migration simplifi√©e (sans d√©pendance au simulateur)
router.post('/migrate-simple', async (req, res) => {
  try {
    const { clientData, eligibilityResults } = req.body;

    if (!clientData || !eligibilityResults) {
      return res.status(400).json({
        success: false,
        error: 'Donn√©es client et r√©sultats d\'√©ligibilit√© requis'
      });
    }

    console.log('üîÑ Migration simplifi√©e - Cr√©ation client direct');

    // 1. Cr√©er directement le compte client
    const clientId = await SessionMigrationService.createClientAccountDirect(clientData);

    if (!clientId) {
      return res.status(500).json({
        success: false,
        error: '√âchec de la cr√©ation du compte client'
      });
    }

    // 2. Cr√©er les ClientProduitEligible
    const clientProduitEligibles = await SessionMigrationService.createClientProduitEligiblesDirect(
      clientId,
      eligibilityResults
    );

    // 3. Sauvegarder les donn√©es de simulation
    await SessionMigrationService.saveSimulationDataDirect(
      clientId,
      eligibilityResults
    );

    res.json({
      success: true,
      data: {
        clientId,
        client_produit_eligibles: clientProduitEligibles || [],
        message: 'Client cr√©√© avec succ√®s'
      }
    });

  } catch (error) {
    console.error('Erreur migration simplifi√©e:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la migration'
    });
  }
});

export default router; 