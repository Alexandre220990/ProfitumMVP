import { Pool } from 'pg';
import { ClientProfile } from './eligibilityEngine';
import dotenv from 'dotenv';
import OpenAI from 'openai';
import { SequentialProductAnalyzer } from './sequentialProductAnalyzer';

dotenv.config();

// Pool PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DATABASE_URL?.includes('supabase') ? { rejectUnauthorized: false } : undefined,
});

// Initialiser le client OpenAI seulement si la cl√© est disponible
let openai: OpenAI | null = null;
if (process.env.OPENAI_API_KEY) {
  openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
  console.log('‚úÖ Client OpenAI initialis√©');
} else {
  console.log('‚ö†Ô∏è  Cl√© OpenAI non trouv√©e - fonctionnalit√©s IA d√©sactiv√©es');
}

// Instance du service d'analyse s√©quentielle
const sequentialAnalyzer = new SequentialProductAnalyzer();

// √âtats de validation produit
export enum ValidationPhase {
  WELCOME = 'welcome',
  COLLECTING_PROFILE = 'collecting_profile',
  VALIDATING_PRODUCTS = 'validating_products',
  COMPLETED = 'completed',
  // Nouveaux √©tats s√©quentiels
  SEQUENTIAL_MODE = 'sequential_mode',
  ANALYZING_PRODUCT = 'analyzing_product',
  RECAP_PRODUCT = 'recap_product',
  SHOWING_RESULTS = 'showing_results'
}

// Interface pour l'√©tat s√©quentiel
export interface SequentialState {
  currentProductIndex: number;
  totalProducts: number;
  products: Array<{
    id: string;
    nom: string;
    description: string;
    isEligible: boolean;
    estimatedGain: number;
    reasons: string[];
    analysisComplete: boolean;
  }>;
  currentProduct: {
    id: string;
    nom: string;
    description: string;
    questions: string[];
    currentQuestionIndex: number;
  } | null;
}

export interface ValidationState {
  simulationId: string;
  clientId: string;
  phase: ValidationPhase;
  profileData: ClientProfile;
  conversationHistory: Array<{role: 'user' | 'assistant', content: string, timestamp: Date}>;
  lastInteraction: Date;
  collectedInfo: {
    secteur?: string;
    nombreEmployes?: number;
    chiffreAffaires?: string;
    vehiculesProfessionnels?: boolean;
    activitesRD?: boolean;
    proprietaireLocaux?: boolean;
    nombreCamions?: number;
    consommationCarburant?: number;
    activitesEnergetiques?: boolean;
    taxeFonciere?: number;
    masseSalariale?: number;
    salaireBrutMoyen?: number;
    consommationEnergie?: number;
    metiersDFS?: boolean;
    dfsAppliquee?: boolean;
    accordBranche?: boolean;
    [key: string]: any;
  };
  eligibleProducts: Array<{
    id: string;
    nom: string;
    description: string;
    estimatedGain: number;
    reasons: string[];
  }>;
  // Nouveau : √©tat s√©quentiel
  sequentialState?: SequentialState;
  // Nouveau : mode s√©quentiel
  sequentialMode?: boolean;
}

export interface ValidationResponse {
  response: string;
  phase: ValidationPhase;
  isComplete: boolean;
  eligibleProducts: Array<{
    id: string;
    nom: string;
    description: string;
    estimatedGain: number;
    reasons: string[];
  }>;
  profileData: ClientProfile;
}

export class ProductValidationOrchestrator {
  private states: Map<string, ValidationState> = new Map();

  constructor() {}

  // üéØ Traitement principal du message utilisateur
  async processUserMessage(
    simulationId: string,
    clientId: string,
    message: string,
    history: Array<{role: 'user' | 'assistant', content: string, timestamp: Date}> = []
  ): Promise<ValidationResponse> {
    try {
      // R√©cup√©rer ou cr√©er l'√©tat de validation
      const state = await this.getOrCreateValidationState(simulationId, clientId, history);
      
      // Ajouter le message utilisateur √† l'historique
      state.conversationHistory.push({
        role: 'user',
        content: message,
        timestamp: new Date()
      });

      // Analyser le message et extraire les informations
      this.analyzeMessageAndUpdateProfile(state, message);

      // Traiter selon la phase actuelle
      const response = await this.processCurrentPhase(state, message);
      
      // Ajouter la r√©ponse √† l'historique
      state.conversationHistory.push({
        role: 'assistant',
        content: response.response,
        timestamp: new Date()
      });

      // Sauvegarder l'√©tat
      await this.saveValidationState(state);

      return response;
    } catch (error) {
      console.error('‚ùå Erreur processUserMessage:', error);
      return {
        response: "D√©sol√©, je rencontre un probl√®me technique. Pouvez-vous r√©essayer ?",
        phase: ValidationPhase.WELCOME,
        isComplete: false,
        eligibleProducts: [],
        profileData: { besoinsSpecifiques: [] }
      };
    }
  }

  // üîÑ Traitement selon la phase actuelle
  private async processCurrentPhase(state: ValidationState, message: string): Promise<ValidationResponse> {
    switch (state.phase) {
      case ValidationPhase.WELCOME:
        return this.processWelcome(state);
      case ValidationPhase.COLLECTING_PROFILE:
        return this.processProfileCollection(state, message);
      case ValidationPhase.VALIDATING_PRODUCTS:
        return this.processProductValidation(state, message);
      case ValidationPhase.COMPLETED:
        return this.processCompleted(state, message);
      default:
        return this.processWelcome(state);
    }
  }

  // üëã Phase d'accueil
  private async processWelcome(state: ValidationState): Promise<ValidationResponse> {
    state.phase = ValidationPhase.COLLECTING_PROFILE;
    
    const systemPrompt = `Tu es un assistant conversationnel expert en optimisation de charges pour entreprises, int√©gr√© dans la plateforme Profitum. Tu aides les professionnels √† identifier les dispositifs auxquels ils peuvent pr√©tendre et √† estimer les √©conomies potentielles. 

Tu guides l'utilisateur √† travers deux grandes √©tapes : 

1. Une **pr√©sentation claire et rassurante** de Profitum, de toi (le chatbot) et de l'objectif de la simulation : identifier des optimisations possibles sans engagement.
2. Une **s√©quence de questions cibl√©es**, produit par produit (TICPE, FONCIER, FISCAL, URSSAF, DFS, Fournisseur √ânergie), pour valider les cas d'usage et collecter les donn√©es n√©cessaires √† une estimation.

Tu poses les questions avec m√©thode, produit par produit, dans l'ordre suivant : TICPE ‚Üí FONCIER  ‚Üí URSSAF ‚Üí DFS ‚Üí √âNERGIE. 

Pour chaque produit :
- Tu poses des questions **adapt√©es √† la situation** (m√™me un petit volume peut suffire).
- Tu ne refuses jamais un produit uniquement sur des seuils bas. Ton but est d'explorer toutes les pistes.
- Si le produit semble applicable, tu collectes les donn√©es utiles pour l'estimation.
- Si le produit ne semble pas concern√©, tu l'expliques simplement, sans jamais dire que ce n'est 'pas √©ligible'.

Tu restes professionnel, p√©dagogique, courtois et m√©thodique. Tu parles simplement et √©vites le jargon fiscal.

Voici les produits et les questions pr√©cises √† poser pour chacun :

---

‚ñ∂ **TICPE ‚Äì R√©cup√©ration de taxe carburant**
- Secteur d'activit√© ?
- Disposez-vous de v√©hicules motoris√©s utilisant du gazole ?
- Combien avez-vous de :
  - Poids lourds (plus de 7,5 tonnes) ?
  - Engins de chantier ?
  - V√©hicules l√©gers professionnels ?
- Avez-vous les factures de carburant ?
- Volume estim√© de carburant consomm√© par an (en litres) ?

---

‚ñ∂ **FONCIER ‚Äì Analyse de la taxe fonci√®re**
- √ätes-vous propri√©taire de vos b√¢timents professionnels ou d'un local d'activit√© ?
- Disposez-vous d'un avis de taxe fonci√®re ?
- Quelle est la surface totale des locaux ?
- O√π sont situ√©s ces biens (adresse ou ville) ?
- Connaissez-vous le montant de la taxe fonci√®re annuelle ?

---

‚ñ∂ **URSSAF ‚Äì Analyse des cotisations et trop-per√ßus**
- Combien de salari√©s comptez-vous actuellement ?
- Avez-vous des situations complexes √† g√©rer (arr√™ts de travail, int√©rim, dirigeants, multi-contrats...) ?
- Avez-vous d√©j√† r√©alis√© un audit URSSAF ou d√©tect√© des r√©gularisations inattendues ?
- Connaissez-vous votre masse salariale annuelle ?
- Avez-vous acc√®s √† vos bordereaux URSSAF r√©cents ?

---

‚ñ∂ **DFS ‚Äì D√©duction Forfaitaire Sp√©cifique**
- Dans quel secteur op√®rent vos salari√©s (ex : BTP, transport, s√©curit√©, spectacle...) ?
- Appliquez-vous actuellement une DFS sur vos bulletins de paie ?
- Souhaitez-vous v√©rifier si vous pouvez b√©n√©ficier ou optimiser cette d√©duction ?
- Combien de salari√©s pourraient √™tre concern√©s ?
- Connaissez-vous leur salaire brut mensuel moyen ?

---

‚ñ∂ **Fournisseur √âNERGIE ‚Äì Optimisation des contrats**
- Avez-vous des contrats d'√©lectricit√© et/ou de gaz pour vos locaux professionnels ?
- Connaissez-vous votre consommation annuelle d'√©nergie (√©lectricit√© et gaz) ?
- Savez-vous √† quel prix vous payez votre kWh (ou avez-vous une facture r√©cente) ?
- Depuis combien de temps n'avez-vous pas ren√©goci√© votre contrat ?
- Souhaitez-vous recevoir une √©tude personnalis√©e et sans engagement ?

---

Tu traites chaque produit ind√©pendamment, puis tu passes au suivant. √Ä la fin, tu r√©sumes les produits concern√©s, donne une estimation indicative, enregistre la simulation et tu affiches un bouton "Revenir au dashboard".

Commence par une pr√©sentation claire et rassurante de Profitum et de ton r√¥le, puis demande le secteur d'activit√© de l'entreprise.`;

    const response = await this.getOpenAIResponse(systemPrompt, state.conversationHistory);
    
    return {
      response,
      phase: state.phase,
      isComplete: false,
      eligibleProducts: [],
      profileData: state.profileData
    };
  }

  // üë§ Phase de collecte du profil
  private async processProfileCollection(state: ValidationState, message: string): Promise<ValidationResponse> {
    const collectedInfo = state.collectedInfo;
    
    // V√©rifier si l'utilisateur demande explicitement les r√©sultats
    const text = message.toLowerCase();
    const demandeResultats = text.includes('simulation') || text.includes('r√©sultat') || text.includes('proposition') || 
        text.includes('voir') || text.includes('analyse') || text.includes('termin√©') || 
        text.includes('fin') || text.includes('conclusion') || text.includes('propose') ||
        text.includes('montre') || text.includes('donne') || text.includes('pr√©sente');
    
    console.log('üîç Analyse de la demande:', text, 'Demande r√©sultats:', demandeResultats);
    
    if (demandeResultats) {
      console.log('üéØ Utilisateur demande les r√©sultats, passage √† l\'analyse');
      state.phase = ValidationPhase.VALIDATING_PRODUCTS;
      return this.processProductValidation(state, message);
    }
    
    // V√©rifier si on a assez d'informations pour passer √† la validation des produits
    const hasSecteur = !!collectedInfo.secteur;
    const hasEmployes = !!collectedInfo.nombreEmployes;
    const hasChiffreAffaires = !!collectedInfo.chiffreAffaires;
    const hasVehicules = !!collectedInfo.vehiculesProfessionnels;
    const hasCamions = !!collectedInfo.nombreCamions;
    const hasCarburant = !!collectedInfo.consommationCarburant;
    
    const infoCount = [hasSecteur, hasEmployes, hasChiffreAffaires, hasVehicules, hasCamions, hasCarburant]
      .filter(Boolean).length;
    
    console.log('üìä Comptage des informations:', { hasSecteur, hasEmployes, hasChiffreAffaires, hasVehicules, hasCamions, hasCarburant, infoCount });
    
    // Si on a le secteur + au moins 3 autres informations importantes, on peut analyser
    if (hasSecteur && infoCount >= 4) {
      console.log('üéØ Assez d\'informations collect√©es, passage √† l\'analyse des produits');
      state.phase = ValidationPhase.VALIDATING_PRODUCTS;
      return this.processProductValidation(state, message);
    }

    const missingInfo = [];
    if (!collectedInfo.secteur) missingInfo.push('- Secteur d\'activit√©');
    if (!collectedInfo.nombreEmployes) missingInfo.push('- Nombre d\'employ√©s');
    if (!collectedInfo.chiffreAffaires) missingInfo.push('- Chiffre d\'affaires');
    if (!collectedInfo.vehiculesProfessionnels && collectedInfo.secteur === 'transport') missingInfo.push('- Informations sur les v√©hicules');

    const systemPrompt = `Tu es un assistant conversationnel expert en optimisation de charges pour entreprises, int√©gr√© dans la plateforme Profitum. Tu continues la collecte d'informations de mani√®re m√©thodique et professionnelle.

Informations d√©j√† collect√©es :
${Object.entries(collectedInfo).filter(([_, value]) => value !== undefined && value !== null && value !== '').map(([key, value]) => `- ${key}: ${value}`).join('\n')}

Tu poses les questions avec m√©thode, produit par produit, dans l'ordre suivant : TICPE ‚Üí FONCIER ‚Üí URSSAF ‚Üí DFS ‚Üí √âNERGIE.

Pour chaque produit :
- Tu poses des questions **adapt√©es √† la situation** (m√™me un petit volume peut suffire).
- Tu ne refuses jamais un produit uniquement sur des seuils bas. Ton but est d'explorer toutes les pistes.
- Si le produit semble applicable, tu collectes les donn√©es utiles pour l'estimation.
- Si le produit ne semble pas concern√©, tu l'expliques simplement, sans jamais dire que ce n'est 'pas √©ligible'.

Tu restes professionnel, p√©dagogique, courtois et m√©thodique. Tu parles simplement et √©vites le jargon fiscal.

Pose la prochaine question pertinente pour collecter les informations manquantes. Sois naturel et conversationnel.`;

    const response = await this.getOpenAIResponse(systemPrompt, state.conversationHistory);
    
    return {
      response,
      phase: state.phase,
      isComplete: false,
      eligibleProducts: [],
      profileData: state.profileData
    };
  }

  // ‚úÖ Phase de validation des produits
  private async processProductValidation(state: ValidationState, message: string): Promise<ValidationResponse> {
    const collectedInfo = state.collectedInfo;
    
    console.log('üîç D√©but analyse √©ligibilit√© avec donn√©es:', collectedInfo);
    
    // Analyser l'√©ligibilit√© aux produits
    const eligibleProducts = this.analyzeEligibility(collectedInfo);
    state.eligibleProducts = eligibleProducts;

    console.log('üéØ Produits √©ligibles trouv√©s:', eligibleProducts.length);

    // Toujours passer √† la phase finale si on a des produits √©ligibles
    if (eligibleProducts.length > 0) {
      console.log('‚úÖ Produits √©ligibles trouv√©s, passage √† la phase finale');
      state.phase = ValidationPhase.COMPLETED;
      return this.generateFinalSummary(state);
    }

    // Si aucun produit √©ligible, g√©n√©rer quand m√™me un r√©sum√© avec des recommandations
    console.log('‚ö†Ô∏è Aucun produit √©ligible, g√©n√©ration d\'un r√©sum√© avec recommandations');
    state.phase = ValidationPhase.COMPLETED;
    
    // Cr√©er des produits recommand√©s bas√©s sur le profil
    const recommendedProducts = this.generateRecommendedProducts(collectedInfo);
    state.eligibleProducts = recommendedProducts;
    
    return this.generateFinalSummary(state);
  }

  // üéØ G√©n√©rer le r√©sum√© final
  private generateFinalSummary(state: ValidationState): ValidationResponse {
    const eligibleProducts = state.eligibleProducts;
    const totalGain = eligibleProducts.reduce((sum, p) => sum + p.estimatedGain, 0);
    
    const productsList = eligibleProducts.map((p, i) => `${i + 1}. **${p.nom}** - ${p.estimatedGain.toLocaleString()}‚Ç¨`).join('\n');
    
    return {
      response: `üéâ **Analyse termin√©e !**\n\nüí∞ **Gain total estim√© : ${totalGain.toLocaleString()}‚Ç¨**\n\n${productsList}\n\nüí° **Prochaines √©tapes :**\n1. Validation d√©taill√©e par nos experts\n2. Optimisation des montants\n3. Mise en place des dossiers\n\nü§ù Nos experts sont l√† pour vous accompagner !`,
      phase: ValidationPhase.COMPLETED,
      isComplete: true,
      eligibleProducts,
      profileData: state.profileData
    };
  }

  // üîÑ Traitement de la phase termin√©e
  private processCompleted(state: ValidationState, message: string): ValidationResponse {
    return {
      response: "L'analyse est termin√©e. Nos experts peuvent vous accompagner pour la mise en place des dispositifs identifi√©s.",
      phase: ValidationPhase.COMPLETED,
      isComplete: true,
      eligibleProducts: state.eligibleProducts,
      profileData: state.profileData
    };
  }

  // üóÉÔ∏è R√©cup√©rer ou cr√©er l'√©tat de validation
  private async getOrCreateValidationState(
    simulationId: string,
    clientId: string,
    history: Array<{role: 'user' | 'assistant', content: string, timestamp: Date}>
  ): Promise<ValidationState> {
    
    if (this.states.has(simulationId)) {
      const state = this.states.get(simulationId)!;
      state.lastInteraction = new Date();
      return state;
    }

    const newState: ValidationState = {
      simulationId,
      clientId,
      phase: ValidationPhase.WELCOME,
      profileData: { besoinsSpecifiques: [] },
      conversationHistory: history,
      lastInteraction: new Date(),
      collectedInfo: {},
      eligibleProducts: []
    };

    this.states.set(simulationId, newState);
    return newState;
  }

  // üîç Analyser le message et mettre √† jour le profil
  private analyzeMessageAndUpdateProfile(state: ValidationState, message: string): void {
    const text = message.toLowerCase();
    console.log('üîç Analyse du message:', text);

    // Secteur d'activit√©
    if (text.includes('transport') || text.includes('livraison') || text.includes('logistique')) {
      state.collectedInfo.secteur = 'transport';
    } else if (text.includes('b√¢timent') || text.includes('construction') || text.includes('btp')) {
      state.collectedInfo.secteur = 'btp';
    } else if (text.includes('commerce') || text.includes('vente') || text.includes('retail')) {
      state.collectedInfo.secteur = 'commerce';
    } else if (text.includes('industrie') || text.includes('manufacture') || text.includes('production')) {
      state.collectedInfo.secteur = 'industrie';
    } else if (text.includes('service') || text.includes('conseil') || text.includes('bureau')) {
      state.collectedInfo.secteur = 'services';
    } else if (text.includes('restaurant') || text.includes('h√¥tel') || text.includes('h√¥tellerie')) {
      state.collectedInfo.secteur = 'hotellerie';
    } else if (text.includes('s√©curit√©') || text.includes('surveillance')) {
      state.collectedInfo.secteur = 'securite';
    } else if (text.includes('spectacle') || text.includes('√©v√©nementiel')) {
      state.collectedInfo.secteur = 'spectacle';
    }

    // Nombre d'employ√©s
    const employesMatch = text.match(/(\d+)\s*(employ√©|salari√©|personne|√©quipe)/);
    if (employesMatch) {
      state.collectedInfo.nombreEmployes = parseInt(employesMatch[1]);
    }

    // Chiffre d'affaires
    const caMatch = text.match(/(\d+(?:[.,]\d+)?)\s*(?:millions?|m|k|euros?|‚Ç¨)/);
    if (caMatch) {
      let ca = parseFloat(caMatch[1].replace(',', '.'));
      if (text.includes('millions') || text.includes('m')) {
        ca *= 1000000;
      } else if (text.includes('k')) {
        ca *= 1000;
      }
      state.collectedInfo.chiffreAffaires = ca.toString();
    }

    // V√©hicules professionnels
    if (text.includes('camion') || text.includes('poids lourd') || text.includes('v√©hicule') || 
        text.includes('voiture') || text.includes('utilitaire') || text.includes('engin')) {
      state.collectedInfo.vehiculesProfessionnels = true;
    }

    // Nombre de camions/poids lourds
    const camionsMatch = text.match(/(\d+)\s*(camion|poids lourd|engin)/);
    if (camionsMatch) {
      state.collectedInfo.nombreCamions = parseInt(camionsMatch[1]);
    }

    // Consommation carburant
    const carburantMatch = text.match(/(\d+(?:[.,]\d+)?)\s*(?:litres?|l|kilos?|kg)/);
    if (carburantMatch && (text.includes('carburant') || text.includes('gazole') || text.includes('diesel') || text.includes('consomme') || text.includes('consomme'))) {
      let consommation = parseFloat(carburantMatch[1].replace(',', '.'));
      if (text.includes('kilos') || text.includes('kg')) {
        consommation *= 1.2; // Conversion kg vers litres (approximatif)
      }
      state.collectedInfo.consommationCarburant = consommation;
    }

    // Propri√©t√© de locaux
    if (text.includes('propri√©taire') || text.includes('locaux') || text.includes('b√¢timent') || 
        text.includes('immeuble') || text.includes('local')) {
      state.collectedInfo.proprietaireLocaux = true;
    }

    // Taxe fonci√®re
    const taxeFonciereMatch = text.match(/(\d+(?:[.,]\d+)?)\s*(?:euros?|‚Ç¨).*taxe fonci√®re/);
    if (taxeFonciereMatch) {
      const taxe = parseFloat(taxeFonciereMatch[1].replace(',', '.'));
      state.collectedInfo.taxeFonciere = taxe;
    }

    // Masse salariale
    const masseSalarialeMatch = text.match(/(\d+(?:[.,]\d+)?)\s*(?:millions?|m|k|euros?|‚Ç¨).*masse salariale/);
    if (masseSalarialeMatch) {
      let masse = parseFloat(masseSalarialeMatch[1].replace(',', '.'));
      if (text.includes('millions') || text.includes('m')) {
        masse *= 1000000;
      } else if (text.includes('k')) {
        masse *= 1000;
      }
      state.collectedInfo.masseSalariale = masse;
    }

    // Salaire brut moyen
    const salaireMatch = text.match(/(\d+(?:[.,]\d+)?)\s*(?:euros?|‚Ç¨).*salaire/);
    if (salaireMatch) {
      const salaire = parseFloat(salaireMatch[1].replace(',', '.'));
      state.collectedInfo.salaireBrutMoyen = salaire;
    }

    // Consommation √©nergie
    const energieMatch = text.match(/(\d+(?:[.,]\d+)?)\s*(?:kwh|kilowattheures?)/);
    if (energieMatch && (text.includes('√©lectricit√©') || text.includes('gaz') || text.includes('√©nergie'))) {
      const consommation = parseFloat(energieMatch[1].replace(',', '.'));
      state.collectedInfo.consommationEnergie = consommation;
    }

    // Activit√©s √©nerg√©tiques
    if (text.includes('√©nergie') || text.includes('√©lectricit√©') || text.includes('gaz') || 
        text.includes('chauffage') || text.includes('climatisation') || text.includes('contrat √©nergie')) {
      state.collectedInfo.activitesEnergetiques = true;
    }

    // DFS - D√©duction Forfaitaire Sp√©cifique
    if (text.includes('dfs') || text.includes('d√©duction forfaitaire') || text.includes('d√©duction sp√©cifique') ||
        text.includes('m√©tier technique') || text.includes('m√©tier physique') || text.includes('m√©tier manuel') ||
        text.includes('btp') || text.includes('maintenance') || text.includes('s√©curit√©') || 
        text.includes('spectacle') || text.includes('h√¥tellerie') || text.includes('restauration')) {
      state.collectedInfo.metiersDFS = true;
    }

    // DFS d√©j√† appliqu√©e
    if (text.includes('dfs appliqu√©e') || text.includes('d√©duction d√©j√†') || text.includes('d√©j√† appliqu√©')) {
      state.collectedInfo.dfsAppliquee = true;
    }

    // Accord de branche
    if (text.includes('accord de branche') || text.includes('convention collective') || text.includes('accord collectif')) {
      state.collectedInfo.accordBranche = true;
    }

    console.log('üìä Informations collect√©es mises √† jour:', state.collectedInfo);
  }

  // üìä Analyser l'√©ligibilit√© aux produits avec les nouvelles r√®gles de calcul
  private analyzeEligibility(collectedInfo: any): Array<{
    id: string;
    nom: string;
    description: string;
    estimatedGain: number;
    reasons: string[];
  }> {
    console.log('üîç Analyse √©ligibilit√© avec les nouvelles r√®gles de calcul:', collectedInfo);
    
    const eligible: Array<{
      id: string;
      nom: string;
      description: string;
      estimatedGain: number;
      reasons: string[];
    }> = [];

    const chiffreAffaires = ProductValidationOrchestrator.extractAmount(collectedInfo.chiffreAffaires || '0');
    console.log('üí∞ Chiffre d\'affaires extrait:', chiffreAffaires);

    // 1. TICPE ‚Äì Taxe sur les carburants professionnels
    if (collectedInfo.vehiculesProfessionnels && collectedInfo.consommationCarburant) {
      console.log('‚úÖ TICPE √©ligible - v√©hicules professionnels et consommation carburant');
      // Formule : litres consomm√©s √ó 0,17‚Ç¨
      const gain = Math.round(collectedInfo.consommationCarburant * 0.17);
      const gainFinal = Math.min(Math.max(gain, 1000), 100000); // Entre 1000‚Ç¨ et 100000‚Ç¨
      
      eligible.push({
        id: 'TICPE',
        nom: 'R√©cup√©ration TICPE',
        description: 'Remboursement de la taxe sur les carburants professionnels',
        estimatedGain: gainFinal,
        reasons: [
          'V√©hicules professionnels',
          `${collectedInfo.consommationCarburant} litres/an`,
          'Taux de r√©cup√©ration : 0,17‚Ç¨/litre'
        ]
      });
    } else if (collectedInfo.secteur === 'transport' && collectedInfo.vehiculesProfessionnels) {
      console.log('‚úÖ TICPE √©ligible - secteur transport, estimation bas√©e sur le CA');
      // Estimation bas√©e sur le CA si pas de consommation pr√©cise
      const gain = Math.round(chiffreAffaires * 0.02);
      const gainFinal = Math.min(Math.max(gain, 2000), 50000);
      
      eligible.push({
        id: 'TICPE',
        nom: 'R√©cup√©ration TICPE',
        description: 'Remboursement de la taxe sur les carburants professionnels',
        estimatedGain: gainFinal,
        reasons: [
          'Secteur transport',
          'V√©hicules professionnels',
          'Estimation bas√©e sur le CA'
        ]
      });
    }

    // 2. FONCIER ‚Äì Taxe fonci√®re sur les propri√©t√©s b√¢ties
    if (collectedInfo.proprietaireLocaux && collectedInfo.taxeFonciere) {
      console.log('‚úÖ FONCIER √©ligible - propri√©taire de locaux avec taxe fonci√®re');
      // Formule : taxe fonci√®re √ó 30% (taux d'erreur estim√©)
      const gain = Math.round(collectedInfo.taxeFonciere * 0.30);
      const gainFinal = Math.min(Math.max(gain, 500), 25000);
      
      eligible.push({
        id: 'FONCIER',
        nom: 'Optimisation Taxe Fonci√®re',
        description: 'Optimisation de la taxe fonci√®re sur les propri√©t√©s b√¢ties',
        estimatedGain: gainFinal,
        reasons: [
          'Propri√©taire de locaux',
          `Taxe fonci√®re : ${collectedInfo.taxeFonciere}‚Ç¨`,
          'Taux d\'erreur estim√© : 30%'
        ]
      });
    } else if (collectedInfo.proprietaireLocaux) {
      console.log('‚úÖ FONCIER √©ligible - propri√©taire de locaux, estimation');
      // Estimation si pas de taxe fonci√®re pr√©cise
      const gain = Math.round(chiffreAffaires * 0.01);
      const gainFinal = Math.min(Math.max(gain, 500), 25000);
      
      eligible.push({
        id: 'FONCIER',
        nom: 'Optimisation Taxe Fonci√®re',
        description: 'Optimisation de la taxe fonci√®re sur les propri√©t√©s b√¢ties',
        estimatedGain: gainFinal,
        reasons: [
          'Propri√©taire de locaux',
          'Estimation bas√©e sur le CA',
          'Optimisation possible'
        ]
      });
    }

    // 3. URSSAF ‚Äì Trop-per√ßus ou r√©gularisations
    if (collectedInfo.nombreEmployes && collectedInfo.nombreEmployes >= 3) {
      console.log('‚úÖ URSSAF √©ligible -', collectedInfo.nombreEmployes, 'employ√©s');
      // Formule : masse salariale √ó 2%
      const masseSalariale = collectedInfo.masseSalariale || (collectedInfo.nombreEmployes * 35000);
      const gain = Math.round(masseSalariale * 0.02);
      const gainFinal = Math.min(Math.max(gain, 2000), 80000);
      
      eligible.push({
        id: 'URSSAF',
        nom: 'Optimisation URSSAF',
        description: 'Trop-per√ßus et r√©gularisations de cotisations sociales',
        estimatedGain: gainFinal,
        reasons: [
          `${collectedInfo.nombreEmployes} employ√©s`,
          'Taux d\'optimisation : 2% de la masse salariale',
          'R√©gularisations possibles'
        ]
      });
    }

    // 4. DFS ‚Äì D√©duction Forfaitaire Sp√©cifique
    if (collectedInfo.nombreEmployes && collectedInfo.nombreEmployes >= 2) {
      console.log('‚úÖ DFS √©ligible -', collectedInfo.nombreEmployes, 'employ√©s');
      // Formule : nombre de salari√©s √ó salaire brut √ó taux DFS √ó charges patronales
      const salaireBrutMoyen = collectedInfo.salaireBrutMoyen || 2500;
      const tauxDFS = 0.10; // 10% en moyenne
      const chargesPatronales = 0.42; // 42% en moyenne
      const salariesConcernes = Math.round(collectedInfo.nombreEmployes * 0.7); // 70% des salari√©s concern√©s
      
      const gain = Math.round(salariesConcernes * salaireBrutMoyen * 12 * tauxDFS * chargesPatronales);
      const gainFinal = Math.min(Math.max(gain, 1000), 60000);
      
      eligible.push({
        id: 'DFS',
        nom: 'D√©duction Forfaitaire Sp√©cifique',
        description: 'R√©duction de l\'assiette des cotisations sociales pour m√©tiers techniques',
        estimatedGain: gainFinal,
        reasons: [
          `${salariesConcernes} salari√©s concern√©s`,
          `Taux DFS : ${(tauxDFS * 100)}%`,
          '√âconomies sur charges patronales'
        ]
      });
    }

    // 5. ENERGIE ‚Äì Optimisation des contrats
    if (collectedInfo.consommationEnergie) {
      console.log('‚úÖ ENERGIE √©ligible - consommation √©nergie pr√©cise');
      // Formule : consommation annuelle √ó diff√©rence de prix (ex: 0,03‚Ç¨/kWh)
      const differencePrix = 0.03; // 3 centimes d'√©conomie par kWh
      const gain = Math.round(collectedInfo.consommationEnergie * differencePrix);
      const gainFinal = Math.min(Math.max(gain, 500), 20000);
      
      eligible.push({
        id: 'ENERGIE',
        nom: 'Optimisation √ânergie',
        description: 'Optimisation des contrats d\'√©lectricit√© et de gaz',
        estimatedGain: gainFinal,
        reasons: [
          'Contrats d\'√©nergie',
          `${collectedInfo.consommationEnergie} kWh/an`,
          `√âconomie : ${differencePrix}‚Ç¨/kWh`
        ]
      });
    } else if (collectedInfo.activitesEnergetiques) {
      console.log('‚úÖ ENERGIE √©ligible - activit√©s √©nerg√©tiques, estimation');
      // Estimation si pas de consommation pr√©cise
      const consommation = Math.round(chiffreAffaires * 0.005);
      const differencePrix = 0.03; // 3 centimes d'√©conomie par kWh
      const gain = Math.round(consommation * differencePrix);
      const gainFinal = Math.min(Math.max(gain, 500), 20000);
      
      eligible.push({
        id: 'ENERGIE',
        nom: 'Optimisation √ânergie',
        description: 'Optimisation des contrats d\'√©lectricit√© et de gaz',
        estimatedGain: gainFinal,
        reasons: [
          'Contrats d\'√©nergie',
          'Estimation bas√©e sur le CA',
          `√âconomie : ${differencePrix}‚Ç¨/kWh`
        ]
      });
    }

    console.log('üéØ Produits √©ligibles trouv√©s:', eligible.length);
    return eligible.sort((a, b) => b.estimatedGain - a.estimatedGain);
  }

  // üéØ G√©n√©rer des produits recommand√©s bas√©s sur le profil
  private generateRecommendedProducts(collectedInfo: any): Array<{
    id: string;
    nom: string;
    description: string;
    estimatedGain: number;
    reasons: string[];
  }> {
    console.log('üîç G√©n√©ration de produits recommand√©s pour:', collectedInfo);
    
    const recommended: Array<{
      id: string;
      nom: string;
      description: string;
      estimatedGain: number;
      reasons: string[];
    }> = [];

    const chiffreAffaires = ProductValidationOrchestrator.extractAmount(collectedInfo.chiffreAffaires || '0');

    // Recommandations bas√©es sur le secteur
    if (collectedInfo.secteur === 'transport') {
      recommended.push({
        id: 'TICPE_RECOMMENDED',
        nom: 'Audit TICPE',
        description: 'Remboursement de la taxe sur les carburants professionnels',
        estimatedGain: 15000,
        reasons: ['Secteur transport', 'Recommandation bas√©e sur votre activit√©']
      });
    }

    // Recommandations bas√©es sur la taille
    if (collectedInfo.nombreEmployes && collectedInfo.nombreEmployes >= 5) {
      recommended.push({
        id: 'URSSAF_RECOMMENDED',
        nom: 'Optimisation URSSAF',
        description: 'Optimisation des charges sociales et cotisations',
        estimatedGain: 25000,
        reasons: [`${collectedInfo.nombreEmployes} employ√©s`, 'Optimisation recommand√©e']
      });
    }

    // Recommandations bas√©es sur le CA
    if (chiffreAffaires > 100000) {
      recommended.push({
        id: 'FISCAL_RECOMMENDED',
        nom: 'Audit Fiscal',
        description: 'Optimisation fiscale globale (IS, TVA, autres taxes)',
        estimatedGain: 30000,
        reasons: [`CA: ${(chiffreAffaires/1000000).toFixed(1)}M‚Ç¨`, 'Optimisation fiscale recommand√©e']
      });
    }

    // Recommandations g√©n√©rales
    recommended.push({
      id: 'DFS_RECOMMENDED',
      nom: 'Audit DFS',
      description: 'Solutions de d√©fiscalisation et d\'investissement',
      estimatedGain: 20000,
      reasons: ['Opportunit√©s de d√©fiscalisation', 'Recommandation g√©n√©rale']
    });

    return recommended.sort((a, b) => b.estimatedGain - a.estimatedGain);
  }

  // üíæ Sauvegarder l'√©tat de validation
  private async saveValidationState(state: ValidationState): Promise<void> {
    try {
      await pool.query(
        'INSERT INTO "ValidationState" (simulation_id, client_id, phase, profile_data, conversation_history, last_interaction) VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (simulation_id) DO UPDATE SET phase = $3, profile_data = $4, conversation_history = $5, last_interaction = $6',
        [
          state.simulationId,
          state.clientId,
          state.phase,
          JSON.stringify(state.profileData),
          JSON.stringify(state.conversationHistory),
          state.lastInteraction
        ]
      );
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde (non bloquante):', error);
    }
  }

  // üìä Extraire un montant d'un texte
  private static extractAmount(text: string): number {
    const normalizedText = text.toLowerCase().replace(/\s+/g, '');
    const patterns = [
      /(\d+(?:\.\d+)?)\s*m[‚Ç¨e]/,
      /(\d+(?:\.\d+)?)\s*k[‚Ç¨e]/,
      /(\d+)\s*[‚Ç¨e]/,
      /(\d+)/
    ];
    
    for (let i = 0; i < patterns.length; i++) {
      const match = normalizedText.match(patterns[i]);
      if (match) {
        const value = parseFloat(match[1]);
        switch (i) {
          case 0: return value * 1000000;
          case 1: return value * 1000;
          case 2: 
          case 3: return value;
        }
      }
    }
    return 0;
  }

  // ü§ñ Fonction pour interagir avec l'API OpenAI
  private async getOpenAIResponse(systemPrompt: string, conversationHistory: Array<{role: 'user' | 'assistant', content: string, timestamp: Date}> = []): Promise<string> {
    try {
      if (!openai) {
        return "D√©sol√©, les fonctionnalit√©s IA ne sont pas disponibles pour le moment.";
      }

      const messages: Array<{role: 'system' | 'user' | 'assistant', content: string}> = [
        { role: 'system', content: systemPrompt },
        ...conversationHistory.slice(-10).map(msg => ({
          role: msg.role as 'user' | 'assistant',
          content: msg.content
        }))
      ];

      const response = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: messages,
        max_tokens: 500,
        temperature: 0.7
      });
      
      const messageContent = response!.choices[0]?.message?.content;
      if (!messageContent) {
        console.warn("R√©ponse vide de l'API OpenAI.");
        return "Je suis d√©sol√©, je n'ai pas pu obtenir une r√©ponse. Pouvez-vous reformuler votre question ?";
      }
      return messageContent.trim();
    } catch (error) {
      console.error('Erreur OpenAI:', error);
      return "Je suis d√©sol√©, une erreur est survenue lors de la communication avec notre service d'intelligence artificielle. Pouvez-vous reformuler votre question ?";
    }
  }
}

export default ProductValidationOrchestrator;
