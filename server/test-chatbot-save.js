const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function testChatbotSave() {
  console.log('üß™ Test du processus de sauvegarde des produits √©ligibles\n');

  try {
    // 1. V√©rifier la structure de la table ProduitEligible
    console.log('1Ô∏è‚É£ V√©rification de la table ProduitEligible...');
    const { data: produits, error: produitsError } = await supabase
      .from('ProduitEligible')
      .select('*')
      .limit(5);

    if (produitsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des produits:', produitsError);
      return;
    }

    console.log(`‚úÖ ${produits.length} produits trouv√©s dans la base:`);
    produits.forEach(p => {
      console.log(`   - ${p.nom} (ID: ${p.id})`);
    });

    // 2. V√©rifier la structure de la table ClientProduitEligible
    console.log('\n2Ô∏è‚É£ V√©rification de la table ClientProduitEligible...');
    const { data: clientProduits, error: clientProduitsError } = await supabase
      .from('ClientProduitEligible')
      .select('*')
      .limit(3);

    if (clientProduitsError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des client-produits:', clientProduitsError);
      return;
    }

    console.log(`‚úÖ ${clientProduits.length} entr√©es trouv√©es dans ClientProduitEligible`);
    if (clientProduits.length > 0) {
      console.log('   Structure d\'une entr√©e:', Object.keys(clientProduits[0]));
    }

    // 3. Test de matching par nom
    console.log('\n3Ô∏è‚É£ Test de matching par nom...');
    const testProductName = 'TICPE';
    const { data: matchedProduct, error: matchError } = await supabase
      .from('ProduitEligible')
      .select('*')
      .eq('nom', testProductName)
      .single();

    if (matchError) {
      console.error(`‚ùå Erreur lors du matching de "${testProductName}":`, matchError);
    } else {
      console.log(`‚úÖ Produit "${testProductName}" trouv√© avec l'ID: ${matchedProduct.id}`);
    }

    // 4. Test d'insertion (simulation)
    console.log('\n4Ô∏è‚É£ Test d\'insertion simul√©e...');
    const testClientId = '550e8400-e29b-41d4-a716-446655440000'; // UUID de test
    const testSimulationId = Date.now();

    // Simuler les donn√©es du chatbot
    const mockChatbotProducts = [
      {
        nom: 'TICPE',
        description: 'Remboursement de la Taxe Int√©rieure de Consommation sur les Produits √ânerg√©tiques',
        estimatedGain: 5000,
        gainPotentiel: 5000
      },
      {
        nom: 'URSSAF',
        description: 'Optimisation de Charges Sociales',
        estimatedGain: 3000,
        gainPotentiel: 3000
      }
    ];

    console.log('   Donn√©es du chatbot simul√©es:', mockChatbotProducts);

    // Simuler le processus de sauvegarde
    for (const product of mockChatbotProducts) {
      try {
        // Trouver le produit dans ProduitEligible
        const { data: produitEligible, error: produitError } = await supabase
          .from('ProduitEligible')
          .select('*')
          .eq('nom', product.nom)
          .single();

        if (produitError || !produitEligible) {
          console.log(`   ‚ö†Ô∏è Produit "${product.nom}" non trouv√© dans la base`);
          continue;
        }

        console.log(`   ‚úÖ Produit "${product.nom}" trouv√© avec l'ID: ${produitEligible.id}`);

        // V√©rifier si l'entr√©e existe d√©j√†
        const { data: existingEntry, error: checkError } = await supabase
          .from('ClientProduitEligible')
          .select('*')
          .eq('clientId', testClientId)
          .eq('produitId', produitEligible.id)
          .eq('simulationId', testSimulationId)
          .single();

        if (existingEntry) {
          console.log(`   ‚ö†Ô∏è Entr√©e d√©j√† existante pour ${product.nom}`);
          continue;
        }

        // Simuler l'insertion (comment√© pour √©viter les insertions de test)
        console.log(`   üìù Simulation d'insertion pour ${product.nom}:`);
        console.log(`      - clientId: ${testClientId}`);
        console.log(`      - produitId: ${produitEligible.id}`);
        console.log(`      - simulationId: ${testSimulationId}`);
        console.log(`      - montantFinal: ${product.estimatedGain}`);

        // D√©commenter pour tester l'insertion r√©elle
        /*
        const { data: savedProduct, error: saveError } = await supabase
          .from('ClientProduitEligible')
          .insert({
            clientId: testClientId,
            produitId: produitEligible.id,
            simulationId: testSimulationId,
            statut: 'eligible',
            tauxFinal: 0.85,
            montantFinal: product.estimatedGain,
            dureeFinale: 12,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .select()
          .single();

        if (saveError) {
          console.log(`   ‚ùå Erreur d'insertion: ${saveError.message}`);
        } else {
          console.log(`   ‚úÖ Insertion r√©ussie pour ${product.nom}`);
        }
        */

      } catch (error) {
        console.log(`   ‚ùå Erreur pour ${product.nom}:`, error.message);
      }
    }

    // 5. V√©rification finale
    console.log('\n5Ô∏è‚É£ V√©rification finale...');
    const { data: finalCheck, error: finalError } = await supabase
      .from('ClientProduitEligible')
      .select(`
        *,
        ProduitEligible (
          nom,
          description
        )
      `)
      .eq('clientId', testClientId)
      .limit(5);

    if (finalError) {
      console.error('‚ùå Erreur lors de la v√©rification finale:', finalError);
    } else {
      console.log(`‚úÖ ${finalCheck.length} entr√©es trouv√©es pour le client de test`);
    }

    console.log('\n‚úÖ Test termin√© avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale du test:', error);
  }
}

// Ex√©cuter le test
testChatbotSave(); 