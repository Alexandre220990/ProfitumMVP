// V√©rification ultime de la migration simplifi√©e
require('dotenv').config({ path: '../.env' });

const { createClient } = require('@supabase/supabase-js');
const fetch = require('node-fetch');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const API_URL = 'https://profitummvp-production.up.railway.app';

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function verifyMigrationComplete() {
  console.log('üîç V√âRIFICATION ULTIME DE LA MIGRATION');
  console.log('='.repeat(50));

  try {
    // 1. V√©rifier la structure de ClientProduitEligible
    console.log('\n1Ô∏è‚É£ V√©rification structure ClientProduitEligible...');
    
    const { data: columns, error: columnsError } = await supabase
      .rpc('get_table_columns', { table_name: 'ClientProduitEligible' });

    if (columnsError) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer la structure, v√©rification manuelle...');
    } else {
      console.log('‚úÖ Structure de la table v√©rifi√©e');
    }

    // 2. V√©rifier les produits √©ligibles disponibles
    console.log('\n2Ô∏è‚É£ V√©rification produits √©ligibles...');
    
    const { data: products, error: productsError } = await supabase
      .from('ProduitEligible')
      .select('id, nom, categorie, active')
      .eq('active', true);

    if (productsError) {
      console.error('‚ùå Erreur produits:', productsError);
      return;
    }

    console.log(`‚úÖ ${products?.length || 0} produits √©ligibles disponibles`);
    
    // Mapping des produits pour v√©rification
    const productMapping = {
      'TICPE': '32dd9cf8-15e2-4375-86ab-a95158d3ada1',
      'URSSAF': 'd1e8f740-7c2a-4b5e-9a91-0e15c0e7d3a2',
      'DFS': 'e2f9a830-8d3b-4c7c-b590-1d7631c0d4b5',
      'FONCIER': 'c5d2e980-4f63-44c0-b8a9-9d6e8e21c0f7',
      'CIR': '37da1c4e-3fcc-49f8-9acb-9b75e231edfd',
      'CEE': 'b7f3c891-28d9-4982-b0eb-821c9e7cbcf0',
      'AUDIT_ENERGETIQUE': 'bc2b94ec-659b-4cf5-a693-d61178b03caf'
    };

    // V√©rifier que tous les produits du mapping existent
    for (const [code, uuid] of Object.entries(productMapping)) {
      const product = products?.find(p => p.id === uuid);
      if (product) {
        console.log(`   ‚úÖ ${code} ‚Üí ${product.nom}`);
      } else {
        console.log(`   ‚ùå ${code} ‚Üí UUID non trouv√©: ${uuid}`);
      }
    }

    // 3. Test complet de migration
    console.log('\n3Ô∏è‚É£ Test complet de migration...');
    
    // Cr√©er un client de test
    const timestamp = Date.now();
    const testClientData = {
      email: `verify-${timestamp}@example.com`,
      password: 'TestPassword123!',
      name: 'Client V√©rification',
      company_name: 'Entreprise V√©rification',
      phone_number: '0123456789',
      address: '123 Rue Test',
      city: 'Paris',
      postal_code: '75001',
      siren: String(Math.floor(100000000 + Math.random() * 900000000)),
      type: 'client',
      statut: 'actif',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    const { data: client, error: clientError } = await supabase
      .from('Client')
      .insert(testClientData)
      .select()
      .single();

    if (clientError) {
      console.error('‚ùå Erreur cr√©ation client:', clientError);
      return;
    }

    console.log('‚úÖ Client de test cr√©√©:', client.email);

    // Simuler les r√©sultats du simulateur
    const simulationResults = {
      timestamp: Date.now(),
      products: [
        {
          code: 'TICPE',
          score: 85,
          savings: 5000,
          confidence: 'high'
        },
        {
          code: 'URSSAF',
          score: 70,
          savings: 3000,
          confidence: 'medium'
        },
        {
          code: 'DFS',
          score: 90,
          savings: 8000,
          confidence: 'high'
        }
      ]
    };

    // Appeler la migration
    const migrationResponse = await fetch(`${API_URL}/api/simple-migration/migrate-simulation`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        clientId: client.id,
        email: client.email,
        simulationResults: simulationResults
      })
    });

    const migrationResult = await migrationResponse.json();
    
    if (migrationResult.success) {
      console.log('‚úÖ Migration r√©ussie');
      console.log(`   - Produits migr√©s: ${migrationResult.data.migrated_products}`);
    } else {
      console.error('‚ùå Migration √©chou√©e:', migrationResult.error);
      return;
    }

    // 4. V√©rifier les produits en base
    console.log('\n4Ô∏è‚É£ V√©rification des produits en base...');
    
    const { data: clientProducts, error: dbError } = await supabase
      .from('ClientProduitEligible')
      .select(`
        *,
        ProduitEligible (
          id,
          nom,
          description,
          category
        )
      `)
      .eq('clientId', client.id);

    if (dbError) {
      console.error('‚ùå Erreur v√©rification:', dbError);
    } else {
      console.log(`‚úÖ ${clientProducts.length} produits trouv√©s en base:`);
      
      let totalSavings = 0;
      for (const product of clientProducts) {
        console.log(`   - ${product.ProduitEligible?.nom || product.produitId}: ${product.statut} (${product.montantFinal}‚Ç¨)`);
        totalSavings += product.montantFinal || 0;
      }
      
      console.log(`   üí∞ √âconomies totales: ${totalSavings}‚Ç¨`);
    }

    // 5. V√©rifier tous les champs requis
    console.log('\n5Ô∏è‚É£ V√©rification des champs requis...');
    
    if (clientProducts && clientProducts.length > 0) {
      const product = clientProducts[0];
      const requiredFields = [
        'clientId', 'produitId', 'statut', 'tauxFinal', 'montantFinal', 
        'dureeFinale', 'simulationId', 'metadata', 'notes', 'priorite',
        'dateEligibilite', 'current_step', 'progress', 'expert_id',
        'charte_signed', 'charte_signed_at'
      ];

      console.log('   Champs v√©rifi√©s:');
      for (const field of requiredFields) {
        if (product[field] !== undefined) {
          console.log(`   ‚úÖ ${field}: ${product[field]}`);
        } else {
          console.log(`   ‚ùå ${field}: manquant`);
        }
      }
    }

    // 6. Test de l'API de r√©cup√©ration
    console.log('\n6Ô∏è‚É£ Test API r√©cup√©ration produits...');
    
    const productsResponse = await fetch(`${API_URL}/api/simple-migration/client-products/${client.id}`);
    const productsResult = await productsResponse.json();
    
    if (productsResult.success) {
      console.log('‚úÖ API fonctionne');
      console.log(`   - Produits r√©cup√©r√©s: ${productsResult.data.products.length}`);
    } else {
      console.error('‚ùå Erreur API:', productsResult.error);
    }

    // 7. Nettoyage
    console.log('\n7Ô∏è‚É£ Nettoyage des donn√©es de test...');
    
    // Supprimer les produits √©ligibles du client de test
    await supabase
      .from('ClientProduitEligible')
      .delete()
      .eq('clientId', client.id);

    // Supprimer le client de test
    await supabase
      .from('Client')
      .delete()
      .eq('id', client.id);

    console.log('‚úÖ Donn√©es de test nettoy√©es');

    console.log('\nüéâ V√âRIFICATION TERMIN√âE AVEC SUCC√àS !');
    console.log('‚úÖ Tous les champs sont pr√©serv√©s');
    console.log('‚úÖ La migration fonctionne parfaitement');
    console.log('‚úÖ L\'API de r√©cup√©ration fonctionne');
    console.log('‚úÖ Aucune perte de donn√©es');

  } catch (error) {
    console.error('‚ùå Erreur v√©rification:', error);
  }
}

verifyMigrationComplete(); 