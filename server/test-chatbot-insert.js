const { createClient } = require('@supabase/supabase-js');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

async function testChatbotInsert() {
  console.log('üß™ Test d\'insertion r√©elle des produits √©ligibles\n');

  try {
    // G√©n√©rer un clientId de test unique (UUID valide)
    const testClientId = uuidv4();
    const testSimulationId = Date.now();

    console.log(`üìã Test avec clientId: ${testClientId}`);
    console.log(`üìã SimulationId: ${testSimulationId}\n`);

    // Donn√©es du chatbot simul√©es
    const mockChatbotProducts = [
      {
        nom: 'TICPE',
        description: 'Remboursement de la Taxe Int√©rieure de Consommation sur les Produits √ânerg√©tiques',
        estimatedGain: 5000,
        gainPotentiel: 5000
      },
      {
        nom: 'URSSAF',
        description: 'Optimisation de Charges Sociales',
        estimatedGain: 3000,
        gainPotentiel: 3000
      }
    ];

    const savedProducts = [];

    for (const product of mockChatbotProducts) {
      try {
        console.log(`üîÑ Traitement du produit: ${product.nom}`);

        // 1. Trouver le produit dans ProduitEligible
        const { data: produitEligible, error: produitError } = await supabase
          .from('ProduitEligible')
          .select('*')
          .eq('nom', product.nom)
          .single();

        if (produitError || !produitEligible) {
          console.log(`   ‚ùå Produit "${product.nom}" non trouv√© dans la base`);
          console.log(`   Erreur:`, produitError);
          continue;
        }

        console.log(`   ‚úÖ Produit trouv√©: ${produitEligible.nom} (ID: ${produitEligible.id})`);

        // 2. Ins√©rer dans ClientProduitEligible
        const insertData = {
          clientId: testClientId,
          produitId: produitEligible.id,
          simulationId: testSimulationId,
          statut: 'eligible',
          tauxFinal: 0.85,
          montantFinal: product.estimatedGain,
          dureeFinale: 12
        };

        console.log(`   üìù Donn√©es d'insertion:`, insertData);

        const { data: savedProduct, error: saveError } = await supabase
          .from('ClientProduitEligible')
          .insert(insertData)
          .select()
          .single();

        if (saveError) {
          console.log(`   ‚ùå Erreur d'insertion: ${saveError.message}`);
          console.log(`   D√©tails:`, saveError);
        } else {
          console.log(`   ‚úÖ Insertion r√©ussie !`);
          console.log(`   ID g√©n√©r√©: ${savedProduct.id}`);
          savedProducts.push(savedProduct);
        }

      } catch (error) {
        console.log(`   ‚ùå Erreur g√©n√©rale pour ${product.nom}:`, error.message);
      }

      console.log(''); // Ligne vide pour la lisibilit√©
    }

    // V√©rification finale
    console.log('üîç V√©rification finale...');
    const { data: finalCheck, error: finalError } = await supabase
      .from('ClientProduitEligible')
      .select('*')
      .eq('clientId', testClientId);

    if (finalError) {
      console.error('‚ùå Erreur lors de la v√©rification finale:', finalError);
    } else {
      console.log(`‚úÖ ${finalCheck.length} entr√©es trouv√©es pour le client de test`);
      
      if (finalCheck.length > 0) {
        console.log('\nüìä D√©tails des entr√©es cr√©√©es:');
        finalCheck.forEach((entry, index) => {
          console.log(`   ${index + 1}. ID: ${entry.id}`);
          console.log(`      ProduitId: ${entry.produitId}`);
          console.log(`      Statut: ${entry.statut}`);
          console.log(`      Montant: ${entry.montantFinal}‚Ç¨`);
          console.log(`      Taux: ${entry.tauxFinal}`);
          console.log(`      Dur√©e: ${entry.dureeFinale} mois`);
          console.log('');
        });
      }
    }

    // Nettoyage (optionnel - d√©commenter pour supprimer les donn√©es de test)
    /*
    console.log('üßπ Nettoyage des donn√©es de test...');
    const { error: deleteError } = await supabase
      .from('ClientProduitEligible')
      .delete()
      .eq('clientId', testClientId);

    if (deleteError) {
      console.log('‚ö†Ô∏è Erreur lors du nettoyage:', deleteError);
    } else {
      console.log('‚úÖ Donn√©es de test supprim√©es');
    }
    */

    console.log('\n‚úÖ Test d\'insertion termin√© !');
    console.log(`üìà R√©sultat: ${savedProducts.length}/${mockChatbotProducts.length} produits ins√©r√©s avec succ√®s`);

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale du test:', error);
  }
}

// Ex√©cuter le test
testChatbotInsert(); 