const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üß™ Test direct de la correction des doublons dans le chatbot');
console.log('URL:', supabaseUrl);
console.log('Key:', supabaseKey ? '‚úÖ Pr√©sente' : '‚ùå Manquante');

if (!supabaseKey) {
  console.error('‚ùå Cl√© Supabase manquante');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testChatbotDuplicateDirect() {
  try {
    // 1. Cr√©er un utilisateur de test
    console.log('\n1Ô∏è‚É£ Cr√©ation d\'un utilisateur de test...');
    const testEmail = `test-chatbot-direct-${Date.now()}@example.com`;
    const testPassword = 'testpassword123';

    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      email_confirm: true,
      user_metadata: {
        type: 'client',
        username: 'TestChatbotDirectUser'
      }
    });

    if (authError) {
      console.error('‚ùå Erreur cr√©ation utilisateur Auth:', authError);
      return;
    }

    const authUserId = authData.user.id;
    console.log('‚úÖ Utilisateur Auth cr√©√©:', authUserId);

    // 2. Cr√©er un client avec le m√™me ID
    console.log('\n2Ô∏è‚É£ Cr√©ation du client...');
    const clientInsertData = {
      id: authUserId,
      email: testEmail,
      password: 'hashedpassword',
      username: 'TestChatbotDirectUser',
      company_name: 'Test Company',
      phone_number: '0123456789',
      address: '123 Test Street',
      city: 'Test City',
      postal_code: '12345',
      siren: `123456${Date.now().toString().slice(-3)}`,
      type: 'client',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    const { data: insertedClient, error: clientError } = await supabase
      .from('Client')
      .insert([clientInsertData])
      .select('*')
      .single();

    if (clientError) {
      console.error('‚ùå Erreur cr√©ation client:', clientError);
      await supabase.auth.admin.deleteUser(authUserId);
      return;
    }

    console.log('‚úÖ Client cr√©√© avec succ√®s');

    // 3. R√©cup√©rer un produit √©ligible existant
    console.log('\n3Ô∏è‚É£ R√©cup√©ration d\'un produit √©ligible existant...');
    const { data: produitEligible, error: produitError } = await supabase
      .from('ProduitEligible')
      .select('*')
      .limit(1)
      .single();

    if (produitError || !produitEligible) {
      console.error('‚ùå Aucun produit √©ligible trouv√©:', produitError);
      await supabase.auth.admin.deleteUser(authUserId);
      return;
    }

    console.log('‚úÖ Produit √©ligible trouv√©:', produitEligible.nom);

    // 4. Cr√©er une simulation
    console.log('\n4Ô∏è‚É£ Cr√©ation d\'une simulation...');
    const { data: simulation, error: simulationError } = await supabase
      .from('Simulation')
      .insert({
        clientId: authUserId,
        dateCreation: new Date().toISOString(),
        statut: 'termine',
        type: 'chatbot',
        source: 'profitum',
        score: 100,
        tempsCompletion: 0,
        Answers: {
          source: 'chatbot',
          profileData: { secteur: 'Transport' },
          eligibleProducts: [{ nom: produitEligible.nom, estimatedGain: 12000 }]
        },
        metadata: {}
      })
      .select()
      .single();

    if (simulationError) {
      console.error('‚ùå Erreur cr√©ation simulation:', simulationError);
      await supabase.auth.admin.deleteUser(authUserId);
      return;
    }

    console.log('‚úÖ Simulation cr√©√©e avec ID:', simulation.id);

    // 5. Premi√®re insertion de ClientProduitEligible
    console.log('\n5Ô∏è‚É£ Premi√®re insertion de ClientProduitEligible...');
    const { data: firstProduct, error: firstError } = await supabase
      .from('ClientProduitEligible')
      .insert({
        clientId: authUserId,
        produitId: produitEligible.id,
        simulationId: simulation.id,
        statut: 'eligible',
        tauxFinal: 0.85,
        montantFinal: 12000,
        dureeFinale: 12,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (firstError) {
      console.error('‚ùå Erreur premi√®re insertion:', firstError);
    } else {
      console.log('‚úÖ Premi√®re insertion r√©ussie, ID:', firstProduct.id);
    }

    // 6. Deuxi√®me insertion (devrait √™tre ignor√©e)
    console.log('\n6Ô∏è‚É£ Deuxi√®me insertion de ClientProduitEligible (test doublon)...');
    const { data: secondProduct, error: secondError } = await supabase
      .from('ClientProduitEligible')
      .insert({
        clientId: authUserId,
        produitId: produitEligible.id,
        simulationId: simulation.id,
        statut: 'eligible',
        tauxFinal: 0.85,
        montantFinal: 12000,
        dureeFinale: 12,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();

    if (secondError) {
      console.log('‚úÖ Deuxi√®me insertion bloqu√©e (comportement attendu):', secondError.message);
    } else {
      console.log('‚ö†Ô∏è Deuxi√®me insertion r√©ussie (probl√®me potentiel):', secondProduct.id);
    }

    // 7. V√©rifier les produits √©ligibles en base
    console.log('\n7Ô∏è‚É£ V√©rification des produits √©ligibles en base...');
    const { data: clientProducts, error: productsError } = await supabase
      .from('ClientProduitEligible')
      .select('*')
      .eq('clientId', authUserId);

    if (productsError) {
      console.error('‚ùå Erreur r√©cup√©ration produits:', productsError);
    } else {
      console.log(`üìä Produits trouv√©s: ${clientProducts.length}`);
      
      if (clientProducts.length === 1) {
        console.log('‚úÖ Aucun doublon d√©tect√© !');
      } else {
        console.log('‚ùå Doublons d√©tect√©s !');
        console.log('   Produits:', clientProducts.map(p => ({ id: p.id, produitId: p.produitId })));
      }
    }

    // 8. Nettoyage
    console.log('\n8Ô∏è‚É£ Nettoyage des donn√©es de test...');
    
    // Supprimer les produits √©ligibles
    if (clientProducts && clientProducts.length > 0) {
      await supabase
        .from('ClientProduitEligible')
        .delete()
        .eq('clientId', authUserId);
      console.log('‚úÖ Produits √©ligibles supprim√©s');
    }

    // Supprimer la simulation
    await supabase
      .from('Simulation')
      .delete()
      .eq('id', simulation.id);
    console.log('‚úÖ Simulation supprim√©e');

    // Supprimer le client
    await supabase
      .from('Client')
      .delete()
      .eq('id', authUserId);
    console.log('‚úÖ Client supprim√©');

    // Supprimer l'utilisateur Auth
    await supabase.auth.admin.deleteUser(authUserId);
    console.log('‚úÖ Utilisateur Auth supprim√©');

    console.log('\nüéâ Test termin√© avec succ√®s !');
    console.log('‚úÖ La logique de pr√©vention des doublons fonctionne correctement');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testChatbotDuplicateDirect(); 