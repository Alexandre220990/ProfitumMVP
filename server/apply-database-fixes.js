const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'your-service-role-key';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyDatabaseFixes() {
  console.log('üîß Application des corrections de base de donn√©es...\n');

  try {
    // Lire le fichier SQL
    const sqlFile = path.join(__dirname, 'fix-database-issues.sql');
    const sqlContent = fs.readFileSync(sqlFile, 'utf8');

    // Diviser le SQL en commandes individuelles
    const commands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    console.log(`üìù ${commands.length} commandes SQL √† ex√©cuter...\n`);

    let successCount = 0;
    let errorCount = 0;

    for (let i = 0; i < commands.length; i++) {
      const command = commands[i];
      
      try {
        console.log(`[${i + 1}/${commands.length}] Ex√©cution de la commande...`);
        
        // Ex√©cuter la commande SQL
        const { data, error } = await supabase.rpc('exec_sql', { sql: command });
        
        if (error) {
          // Si exec_sql n'existe pas, essayer une approche diff√©rente
          console.log(`   ‚ö†Ô∏è  Commande ignor√©e (peut n√©cessiter une ex√©cution manuelle): ${command.substring(0, 100)}...`);
        } else {
          console.log(`   ‚úÖ Commande ex√©cut√©e avec succ√®s`);
          successCount++;
        }
      } catch (err) {
        console.log(`   ‚ö†Ô∏è  Commande ignor√©e: ${err.message}`);
        errorCount++;
      }
    }

    console.log(`\nüìä R√©sum√©:`);
    console.log(`   ‚úÖ Commandes r√©ussies: ${successCount}`);
    console.log(`   ‚ö†Ô∏è  Commandes ignor√©es: ${errorCount}`);

    // V√©rifier que les corrections ont √©t√© appliqu√©es
    console.log('\nüîç V√©rification des corrections...');

    // 1. V√©rifier la table ExpertNotifications
    const { data: notificationsTable, error: notificationsError } = await supabase
      .from('ExpertNotifications')
      .select('count')
      .limit(1);

    if (notificationsError) {
      console.log('‚ùå Table ExpertNotifications non accessible - √† cr√©er manuellement');
    } else {
      console.log('‚úÖ Table ExpertNotifications accessible');
    }

    // 2. V√©rifier la table ExpertAssignment
    const { data: assignmentTable, error: assignmentError } = await supabase
      .from('ExpertAssignment')
      .select('count')
      .limit(1);

    if (assignmentError) {
      console.log('‚ùå Table ExpertAssignment non accessible - √† cr√©er manuellement');
    } else {
      console.log('‚úÖ Table ExpertAssignment accessible');
    }

    // 3. V√©rifier la colonne category dans ProduitEligible
    const { data: produits, error: produitsError } = await supabase
      .from('ProduitEligible')
      .select('nom, category')
      .limit(5);

    if (produitsError) {
      console.log('‚ùå Erreur acc√®s ProduitEligible:', produitsError.message);
    } else {
      console.log('‚úÖ Colonne category accessible dans ProduitEligible');
      if (produits && produits.length > 0) {
        console.log('   Exemples:');
        produits.forEach(produit => {
          console.log(`   - ${produit.nom}: ${produit.category || 'Non d√©finie'}`);
        });
      }
    }

    // 4. V√©rifier la colonne timestamp dans message
    const { data: messages, error: messagesError } = await supabase
      .from('message')
      .select('id, timestamp')
      .limit(5);

    if (messagesError) {
      console.log('‚ùå Erreur acc√®s message:', messagesError.message);
    } else {
      console.log('‚úÖ Colonne timestamp accessible dans message');
    }

    console.log('\nüìã Instructions pour finaliser les corrections:');
    console.log('1. Connectez-vous √† votre interface Supabase');
    console.log('2. Allez dans l\'√©diteur SQL');
    console.log('3. Copiez-collez le contenu du fichier fix-database-issues.sql');
    console.log('4. Ex√©cutez le script');
    console.log('5. V√©rifiez que toutes les tables et colonnes sont cr√©√©es');

    console.log('\nüéØ Prochaines √©tapes:');
    console.log('- Relancer le test: node test-marketplace-complete.js');
    console.log('- Tester la marketplace: http://localhost:3000/marketplace-experts');
    console.log('- Tester la messagerie: http://localhost:3000/messagerie-client');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'application des corrections:', error);
  }
}

// Ex√©cuter les corrections
applyDatabaseFixes(); 