// Charger les variables d'environnement
require('dotenv').config({ path: '../.env' });

const fetch = require('node-fetch');

// Configuration
const API_URL = 'https://profitummvp-production.up.railway.app';

async function checkDeployedCode() {
  console.log('üîç V√âRIFICATION CODE D√âPLOY√â');
  console.log('=' .repeat(40));

  try {
    // 1. Test de sant√© de l'API
    console.log('\n1Ô∏è‚É£ Test de sant√© de l\'API...');
    
    const healthResponse = await fetch(`${API_URL}/api/health`);
    const healthData = await healthResponse.json();
    
    console.log('‚úÖ API en ligne:', healthData);

    // 2. Test de la route de diagnostic de session
    console.log('\n2Ô∏è‚É£ Test de la route de diagnostic de session...');
    
    const sessionToken = 'test-session-token';
    const sessionResponse = await fetch(`${API_URL}/api/session-migration/session-data/${sessionToken}`);
    
    console.log('üì° Status session-data:', sessionResponse.status);
    
    if (sessionResponse.status === 404) {
      console.log('‚úÖ Route session-data accessible (404 attendu pour token inexistant)');
    } else {
      const sessionData = await sessionResponse.json();
      console.log('üì• R√©ponse session-data:', JSON.stringify(sessionData, null, 2));
    }

    // 3. Test de la route de migration avec donn√©es minimales
    console.log('\n3Ô∏è‚É£ Test de la route de migration avec donn√©es minimales...');
    
    const migrationData = {
      sessionToken: 'test-session-token',
      clientData: {
        email: 'test@example.com'
      }
    };

    const migrationResponse = await fetch(`${API_URL}/api/session-migration/migrate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(migrationData)
    });

    console.log('üì° Status migration:', migrationResponse.status);
    
    const migrationResult = await migrationResponse.json();
    console.log('üì• R√©ponse migration:', JSON.stringify(migrationResult, null, 2));

    // 4. Analyse de la r√©ponse
    console.log('\n4Ô∏è‚É£ Analyse de la r√©ponse...');
    
    if (migrationResult.error && migrationResult.error.includes('Session non trouv√©e')) {
      console.log('‚úÖ Code d√©ploy√© : Route de migration accessible');
      console.log('   - La route r√©pond correctement pour session inexistante');
    } else if (migrationResult.error && migrationResult.error.includes('√©ligibilit√©s')) {
      console.log('‚úÖ Code d√©ploy√© : Correction des √©ligibilit√©s active');
      console.log('   - La route trouve la session mais pas d\'√©ligibilit√©s');
    } else if (migrationResult.error && migrationResult.error.includes('Token manquant')) {
      console.log('‚úÖ Code d√©ploy√© : Validation des param√®tres active');
      console.log('   - La route valide correctement les param√®tres');
    } else {
      console.log('‚ö†Ô∏è R√©ponse inattendue de la migration');
    }

    // 5. Test de cr√©ation d'un client avec tous les champs requis
    console.log('\n5Ô∏è‚É£ Test de cr√©ation d\'un client complet...');
    
    const timestamp = Date.now();
    const testUserData = {
      username: `deploy-test-${timestamp}`,
      email: `deploy-test-${timestamp}@example.com`,
      password: 'TestPassword123!',
      company_name: 'Entreprise Test Deploy',
      phone_number: '0123456789',
      address: '123 Rue Test',
      city: 'Paris',
      postal_code: '75001',
      siren: `${timestamp % 1000000000}`.padStart(9, '0'),
      type: 'client'
    };

    const registerResponse = await fetch(`${API_URL}/api/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testUserData)
    });

    if (!registerResponse.ok) {
      const errorData = await registerResponse.json();
      console.log('üì• Erreur inscription:', JSON.stringify(errorData, null, 2));
      
      if (errorData.error && errorData.error.includes('updated_at')) {
        console.log('‚ùå Code d√©ploy√© : Champ updated_at manquant encore');
      } else {
        console.log('‚ö†Ô∏è Autre erreur d\'inscription');
      }
    } else {
      console.log('‚úÖ Code d√©ploy√© : Inscription avec updated_at fonctionne');
    }

    console.log('\nüìä R√©sum√© de la v√©rification:');
    console.log('   - API en ligne: ‚úÖ');
    console.log('   - Routes accessibles: ‚úÖ');
    console.log('   - Code d√©ploy√©: En cours de v√©rification...');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

checkDeployedCode();