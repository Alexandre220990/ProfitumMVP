-- =====================================================
-- CORRECTIONS DES STRUCTURES POUR COMPATIBILIT√â API
-- Date : 2025-01-05
-- Objectif : Corriger les structures des tables pour les APIs
-- =====================================================

-- ===== 1. CORRECTIONS TABLE Client =====
DO $$
DECLARE
    column_exists BOOLEAN;
BEGIN
    RAISE NOTICE '=== CORRECTIONS TABLE Client ===';
    
    -- V√©rifier si auth_id existe
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'Client' 
        AND column_name = 'auth_id'
    ) INTO column_exists;
    
    IF NOT column_exists THEN
        RAISE NOTICE '‚ùå Colonne auth_id manquante dans Client';
        -- ALTER TABLE "Client" ADD COLUMN auth_id UUID;
        RAISE NOTICE '‚ö†Ô∏è Ajout de auth_id recommand√©';
    ELSE
        RAISE NOTICE '‚úÖ auth_id existe dans Client';
    END IF;
    
    -- V√©rifier si type existe
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'Client' 
        AND column_name = 'type'
    ) INTO column_exists;
    
    IF NOT column_exists THEN
        RAISE NOTICE '‚ùå Colonne type manquante dans Client';
        -- ALTER TABLE "Client" ADD COLUMN type TEXT DEFAULT 'client';
        RAISE NOTICE '‚ö†Ô∏è Ajout de type recommand√©';
    ELSE
        RAISE NOTICE '‚úÖ type existe dans Client';
    END IF;
END $$;

-- ===== 2. CORRECTIONS TABLE simulations =====
DO $$
DECLARE
    column_exists BOOLEAN;
BEGIN
    RAISE NOTICE '=== CORRECTIONS TABLE simulations ===';
    
    -- V√©rifier si session_token existe
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'simulations' 
        AND column_name = 'session_token'
    ) INTO column_exists;
    
    IF NOT column_exists THEN
        RAISE NOTICE '‚ùå Colonne session_token manquante dans simulations';
        -- ALTER TABLE simulations ADD COLUMN session_token TEXT;
        RAISE NOTICE '‚ö†Ô∏è Ajout de session_token recommand√©';
    ELSE
        RAISE NOTICE '‚úÖ session_token existe dans simulations';
    END IF;
    
    -- V√©rifier si results existe
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'simulations' 
        AND column_name = 'results'
    ) INTO column_exists;
    
    IF NOT column_exists THEN
        RAISE NOTICE '‚ùå Colonne results manquante dans simulations';
        -- ALTER TABLE simulations ADD COLUMN results JSONB;
        RAISE NOTICE '‚ö†Ô∏è Ajout de results recommand√©';
    ELSE
        RAISE NOTICE '‚úÖ results existe dans simulations';
    END IF;
END $$;

-- ===== 3. CORRECTIONS TABLE notification =====
DO $$
DECLARE
    column_exists BOOLEAN;
BEGIN
    RAISE NOTICE '=== CORRECTIONS TABLE notification ===';
    
    -- V√©rifier si user_type existe
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'notification' 
        AND column_name = 'user_type'
    ) INTO column_exists;
    
    IF NOT column_exists THEN
        RAISE NOTICE '‚ùå Colonne user_type manquante dans notification';
        -- ALTER TABLE notification ADD COLUMN user_type TEXT DEFAULT 'client';
        RAISE NOTICE '‚ö†Ô∏è Ajout de user_type recommand√©';
    ELSE
        RAISE NOTICE '‚úÖ user_type existe dans notification';
    END IF;
    
    -- V√©rifier si notification_type existe
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'notification' 
        AND column_name = 'notification_type'
    ) INTO column_exists;
    
    IF NOT column_exists THEN
        RAISE NOTICE '‚ùå Colonne notification_type manquante dans notification';
        -- ALTER TABLE notification ADD COLUMN notification_type TEXT DEFAULT 'info';
        RAISE NOTICE '‚ö†Ô∏è Ajout de notification_type recommand√©';
    ELSE
        RAISE NOTICE '‚úÖ notification_type existe dans notification';
    END IF;
END $$;

-- ===== 4. CR√âATION D'INDEX POUR PERFORMANCE =====
DO $$
BEGIN
    RAISE NOTICE '=== CR√âATION D''INDEX POUR PERFORMANCE ===';
    
    -- Index sur Client.auth_id
    BEGIN
        CREATE INDEX IF NOT EXISTS idx_client_auth_id ON "Client"(auth_id);
        RAISE NOTICE '‚úÖ Index sur Client.auth_id cr√©√©';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ö†Ô∏è Index sur Client.auth_id d√©j√† existant';
    END;
    
    -- Index sur simulations.client_id
    BEGIN
        CREATE INDEX IF NOT EXISTS idx_simulations_client_id ON simulations(client_id);
        RAISE NOTICE '‚úÖ Index sur simulations.client_id cr√©√©';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ö†Ô∏è Index sur simulations.client_id d√©j√† existant';
    END;
    
    -- Index sur simulations.session_token
    BEGIN
        CREATE INDEX IF NOT EXISTS idx_simulations_session_token ON simulations(session_token);
        RAISE NOTICE '‚úÖ Index sur simulations.session_token cr√©√©';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ö†Ô∏è Index sur simulations.session_token d√©j√† existant';
    END;
    
    -- Index sur notification.user_id
    BEGIN
        CREATE INDEX IF NOT EXISTS idx_notification_user_id ON notification(user_id);
        RAISE NOTICE '‚úÖ Index sur notification.user_id cr√©√©';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ö†Ô∏è Index sur notification.user_id d√©j√† existant';
    END;
    
    -- Index sur conversations.client_id
    BEGIN
        CREATE INDEX IF NOT EXISTS idx_conversations_client_id ON conversations(client_id);
        RAISE NOTICE '‚úÖ Index sur conversations.client_id cr√©√©';
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ö†Ô∏è Index sur conversations.client_id d√©j√† existant';
    END;
END $$;

-- ===== 5. V√âRIFICATION DES CONTRAINTES DE R√âF√âRENCE =====
DO $$
DECLARE
    constraint_exists BOOLEAN;
BEGIN
    RAISE NOTICE '=== V√âRIFICATION CONTRAINTES DE R√âF√âRENCE ===';
    
    -- V√©rifier la contrainte simulations.client_id -> Client.id
    SELECT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE table_schema = 'public' 
        AND table_name = 'simulations' 
        AND constraint_name LIKE '%client_id%'
    ) INTO constraint_exists;
    
    IF NOT constraint_exists THEN
        RAISE NOTICE '‚ö†Ô∏è Contrainte de r√©f√©rence simulations.client_id -> Client.id recommand√©e';
        -- ALTER TABLE simulations ADD CONSTRAINT fk_simulations_client_id 
        --     FOREIGN KEY (client_id) REFERENCES "Client"(id);
    ELSE
        RAISE NOTICE '‚úÖ Contrainte de r√©f√©rence simulations.client_id existe';
    END IF;
    
    -- V√©rifier la contrainte conversations.client_id -> Client.id
    SELECT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE table_schema = 'public' 
        AND table_name = 'conversations' 
        AND constraint_name LIKE '%client_id%'
    ) INTO constraint_exists;
    
    IF NOT constraint_exists THEN
        RAISE NOTICE '‚ö†Ô∏è Contrainte de r√©f√©rence conversations.client_id -> Client.id recommand√©e';
        -- ALTER TABLE conversations ADD CONSTRAINT fk_conversations_client_id 
        --     FOREIGN KEY (client_id) REFERENCES "Client"(id);
    ELSE
        RAISE NOTICE '‚úÖ Contrainte de r√©f√©rence conversations.client_id existe';
    END IF;
END $$;

-- ===== 6. V√âRIFICATION FINALE =====
DO $$
DECLARE
    tables_ready INTEGER := 0;
    total_tables INTEGER := 4;
BEGIN
    RAISE NOTICE '=== V√âRIFICATION FINALE ===';
    
    -- V√©rifier Client
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'Client' 
        AND column_name IN ('auth_id', 'type')
    ) THEN
        tables_ready := tables_ready + 1;
        RAISE NOTICE '‚úÖ Client pr√™t pour les APIs';
    ELSE
        RAISE NOTICE '‚ùå Client n√©cessite des corrections';
    END IF;
    
    -- V√©rifier simulations
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'simulations' 
        AND column_name IN ('session_token', 'results')
    ) THEN
        tables_ready := tables_ready + 1;
        RAISE NOTICE '‚úÖ simulations pr√™t pour les APIs';
    ELSE
        RAISE NOTICE '‚ùå simulations n√©cessite des corrections';
    END IF;
    
    -- V√©rifier notification
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'notification' 
        AND column_name IN ('user_type', 'notification_type')
    ) THEN
        tables_ready := tables_ready + 1;
        RAISE NOTICE '‚úÖ notification pr√™t pour les APIs';
    ELSE
        RAISE NOTICE '‚ùå notification n√©cessite des corrections';
    END IF;
    
    -- V√©rifier conversations
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'conversations' 
        AND column_name IN ('client_id', 'status')
    ) THEN
        tables_ready := tables_ready + 1;
        RAISE NOTICE '‚úÖ conversations pr√™t pour les APIs';
    ELSE
        RAISE NOTICE '‚ùå conversations n√©cessite des corrections';
    END IF;
    
    RAISE NOTICE '=== R√âSULTAT FINAL ===';
    RAISE NOTICE 'Tables pr√™tes: %/%', tables_ready, total_tables;
    
    IF tables_ready = total_tables THEN
        RAISE NOTICE 'üéâ Toutes les tables sont pr√™tes pour les APIs !';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Certaines tables n√©cessitent des corrections';
    END IF;
END $$; 