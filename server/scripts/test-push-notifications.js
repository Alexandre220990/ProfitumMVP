#!/usr/bin/env node

/**
 * Script de test pour le syst√®me de notifications push
 * Teste toutes les fonctionnalit√©s : abonnement, envoi, pr√©f√©rences
 */

const axios = require('axios');
const { createClient } = require('@supabase/supabase-js');

// Configuration
const BASE_URL = process.env.API_URL || 'http://localhost:5001';
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

// Client Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

// ========================================
// TESTS DES TABLES
// ========================================

async function testTables() {
  log('\nüìã Test des tables de notifications...', 'bold');
  
  try {
    // Test table notification
    const { data: notifications, error: notifError } = await supabase
      .from('notification')
      .select('*')
      .limit(1);
    
    if (notifError) {
      logError(`Table notification: ${notifError.message}`);
    } else {
      logSuccess('Table notification: OK');
    }

    // Test table UserNotificationPreferences
    const { data: preferences, error: prefError } = await supabase
      .from('UserNotificationPreferences')
      .select('*')
      .limit(1);
    
    if (prefError) {
      logError(`Table UserNotificationPreferences: ${prefError.message}`);
    } else {
      logSuccess('Table UserNotificationPreferences: OK');
    }

    // Test table UserDevices
    const { data: devices, error: deviceError } = await supabase
      .from('UserDevices')
      .select('*')
      .limit(1);
    
    if (deviceError) {
      logError(`Table UserDevices: ${deviceError.message}`);
    } else {
      logSuccess('Table UserDevices: OK');
    }

  } catch (error) {
    logError(`Erreur test tables: ${error.message}`);
  }
}

// ========================================
// TESTS DES ROUTES API
// ========================================

async function testAPIRoutes() {
  log('\nüîó Test des routes API...', 'bold');
  
  try {
    // Test route VAPID public key
    try {
      const response = await axios.get(`${BASE_URL}/api/notifications/vapid-public-key`);
      if (response.status === 200) {
        logSuccess('Route VAPID public key: OK');
      } else {
        logError('Route VAPID public key: Erreur de statut');
      }
    } catch (error) {
      logError(`Route VAPID public key: ${error.message}`);
    }

    // Test route pr√©f√©rences (sans auth)
    try {
      await axios.get(`${BASE_URL}/api/notifications/preferences`);
      logError('Route pr√©f√©rences: Devrait n√©cessiter une authentification');
    } catch (error) {
      if (error.response?.status === 401) {
        logSuccess('Route pr√©f√©rences: Authentification requise (OK)');
      } else {
        logError(`Route pr√©f√©rences: ${error.message}`);
      }
    }

  } catch (error) {
    logError(`Erreur test routes API: ${error.message}`);
  }
}

// ========================================
// TESTS DES FONCTIONNALIT√âS
// ========================================

async function testFunctionalities() {
  log('\n‚öôÔ∏è Test des fonctionnalit√©s...', 'bold');
  
  try {
    // Cr√©er un utilisateur de test
    const testUser = {
      id: 'test-user-' + Date.now(),
      email: 'test@financialtracker.com',
      user_type: 'client'
    };

    // Test cr√©ation pr√©f√©rences
    try {
      const { data: pref, error: prefError } = await supabase
        .from('UserNotificationPreferences')
        .insert({
          user_id: testUser.id,
          email_enabled: true,
          push_enabled: true,
          sms_enabled: false,
          in_app_enabled: true,
          quiet_hours_start: '22:00',
          quiet_hours_end: '08:00',
          timezone: 'Europe/Paris',
          language: 'fr'
        })
        .select()
        .single();

      if (prefError) {
        logError(`Cr√©ation pr√©f√©rences: ${prefError.message}`);
      } else {
        logSuccess('Cr√©ation pr√©f√©rences: OK');
      }
    } catch (error) {
      logError(`Erreur cr√©ation pr√©f√©rences: ${error.message}`);
    }

    // Test cr√©ation notification
    try {
      const { data: notif, error: notifError } = await supabase
        .from('notification')
        .insert({
          user_id: testUser.id,
          user_type: 'client',
          title: 'Test Notification',
          message: 'Ceci est une notification de test',
          notification_type: 'system',
          priority: 'medium',
          is_read: false
        })
        .select()
        .single();

      if (notifError) {
        logError(`Cr√©ation notification: ${notifError.message}`);
      } else {
        logSuccess('Cr√©ation notification: OK');
      }
    } catch (error) {
      logError(`Erreur cr√©ation notification: ${error.message}`);
    }

    // Test cr√©ation device
    try {
      const testSubscription = {
        endpoint: 'https://test.endpoint.com',
        keys: {
          p256dh: 'test-p256dh-key',
          auth: 'test-auth-key'
        }
      };

      const { data: device, error: deviceError } = await supabase
        .from('UserDevices')
        .insert({
          user_id: testUser.id,
          device_token: JSON.stringify(testSubscription),
          push_token: testSubscription.endpoint,
          device_type: 'web',
          device_name: 'Test Browser',
          active: true
        })
        .select()
        .single();

      if (deviceError) {
        logError(`Cr√©ation device: ${deviceError.message}`);
      } else {
        logSuccess('Cr√©ation device: OK');
      }
    } catch (error) {
      logError(`Erreur cr√©ation device: ${error.message}`);
    }

    // Nettoyer les donn√©es de test
    try {
      await supabase.from('notification').delete().eq('user_id', testUser.id);
      await supabase.from('UserNotificationPreferences').delete().eq('user_id', testUser.id);
      await supabase.from('UserDevices').delete().eq('user_id', testUser.id);
      logSuccess('Nettoyage donn√©es de test: OK');
    } catch (error) {
      logWarning(`Erreur nettoyage: ${error.message}`);
    }

  } catch (error) {
    logError(`Erreur test fonctionnalit√©s: ${error.message}`);
  }
}

// ========================================
// TESTS DE PERFORMANCE
// ========================================

async function testPerformance() {
  log('\n‚ö° Test de performance...', 'bold');
  
  try {
    const startTime = Date.now();
    
    // Test r√©cup√©ration notifications
    const { data: notifications, error } = await supabase
      .from('notification')
      .select('*')
      .limit(100);
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    if (error) {
      logError(`Performance notifications: ${error.message}`);
    } else {
      logSuccess(`Performance notifications: ${duration}ms pour ${notifications?.length || 0} notifications`);
    }

    // Test r√©cup√©ration pr√©f√©rences
    const startTimePref = Date.now();
    
    const { data: preferences, error: prefError } = await supabase
      .from('UserNotificationPreferences')
      .select('*')
      .limit(100);
    
    const endTimePref = Date.now();
    const durationPref = endTimePref - startTimePref;
    
    if (prefError) {
      logError(`Performance pr√©f√©rences: ${prefError.message}`);
    } else {
      logSuccess(`Performance pr√©f√©rences: ${durationPref}ms pour ${preferences?.length || 0} pr√©f√©rences`);
    }

  } catch (error) {
    logError(`Erreur test performance: ${error.message}`);
  }
}

// ========================================
// TESTS DE S√âCURIT√â
// ========================================

async function testSecurity() {
  log('\nüîí Test de s√©curit√©...', 'bold');
  
  try {
    // Test acc√®s non autoris√© aux notifications
    try {
      const { data, error } = await supabase
        .from('notification')
        .select('*')
        .eq('user_id', 'user-inexistant')
        .limit(1);
      
      if (error) {
        logError(`S√©curit√© notifications: ${error.message}`);
      } else if (data && data.length > 0) {
        logError('S√©curit√© notifications: Acc√®s non autoris√© possible');
      } else {
        logSuccess('S√©curit√© notifications: Acc√®s contr√¥l√© (OK)');
      }
    } catch (error) {
      logError(`Erreur test s√©curit√© notifications: ${error.message}`);
    }

    // Test acc√®s non autoris√© aux pr√©f√©rences
    try {
      const { data, error } = await supabase
        .from('UserNotificationPreferences')
        .select('*')
        .eq('user_id', 'user-inexistant')
        .limit(1);
      
      if (error) {
        logError(`S√©curit√© pr√©f√©rences: ${error.message}`);
      } else if (data && data.length > 0) {
        logError('S√©curit√© pr√©f√©rences: Acc√®s non autoris√© possible');
      } else {
        logSuccess('S√©curit√© pr√©f√©rences: Acc√®s contr√¥l√© (OK)');
      }
    } catch (error) {
      logError(`Erreur test s√©curit√© pr√©f√©rences: ${error.message}`);
    }

  } catch (error) {
    logError(`Erreur test s√©curit√©: ${error.message}`);
  }
}

// ========================================
// FONCTION PRINCIPALE
// ========================================

async function runTests() {
  log('üöÄ D√©marrage des tests du syst√®me de notifications push...', 'bold');
  
  try {
    // V√©rifier la connexion Supabase
    const { data, error } = await supabase.from('notification').select('count').limit(1);
    if (error) {
      logError(`Connexion Supabase √©chou√©e: ${error.message}`);
      return;
    }
    logSuccess('Connexion Supabase: OK');

    // Ex√©cuter les tests
    await testTables();
    await testAPIRoutes();
    await testFunctionalities();
    await testPerformance();
    await testSecurity();

    log('\nüéâ Tests termin√©s avec succ√®s !', 'bold');
    logInfo('Le syst√®me de notifications push est pr√™t pour la production.');

  } catch (error) {
    logError(`Erreur g√©n√©rale: ${error.message}`);
    process.exit(1);
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runTests();
}

module.exports = {
  runTests,
  testTables,
  testAPIRoutes,
  testFunctionalities,
  testPerformance,
  testSecurity
}; 