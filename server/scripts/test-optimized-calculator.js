#!/usr/bin/env node

/**
 * üß™ TEST DU CALCULATEUR OPTIMIS√â DIRECT
 * Tester le calculateur optimis√© via l'API
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testOptimizedCalculator() {
  console.log('üß™ TEST DU CALCULATEUR OPTIMIS√â DIRECT');
  console.log('=' .repeat(60));

  try {
    // 1. R√©cup√©rer une session avec des r√©ponses
    const { data: sessions, error: sessionsError } = await supabase
      .from('TemporarySession')
      .select('*')
      .eq('completed', true)
      .order('created_at', { ascending: false })
      .limit(1);

    if (sessionsError || !sessions || sessions.length === 0) {
      console.error('‚ùå Aucune session trouv√©e');
      return;
    }

    const session = sessions[0];
    console.log(`üìä Session test√©e: ${session.session_token}`);

    // 2. Tester la r√©cup√©ration des r√©sultats optimis√©s
    console.log('\nüîç Test r√©cup√©ration r√©sultats optimis√©s...');
    
    const response = await fetch(`http://localhost:3001/api/simulator/results/session/${session.session_token}`);
    const results = await response.json();

    if (results.success) {
      console.log('‚úÖ R√©cup√©ration r√©ussie');
      console.log(`   - R√©sultats: ${results.results.length}`);
      
      let totalSavings = 0;
      results.results.forEach(result => {
        console.log(`   - ${result.produit_id}: ${result.estimated_savings}‚Ç¨ (${result.eligibility_score}%) - ${result.confidence_level}`);
        totalSavings += result.estimated_savings || 0;
      });
      
      console.log(`\nüí∞ Total √©conomies: ${totalSavings}‚Ç¨`);
      
      // V√©rifier si TICPE a des r√©sultats non-nuls
      const ticpeResult = results.results.find(r => r.produit_id === 'TICPE');
      if (ticpeResult && ticpeResult.estimated_savings > 0) {
        console.log('‚úÖ SUCC√àS: TICPE a des r√©sultats optimis√©s !');
      } else {
        console.log('‚ö†Ô∏è TICPE n\'a pas de r√©sultats optimis√©s');
      }
    } else {
      console.log('‚ùå Erreur r√©cup√©ration:', results.error);
    }

    // 3. Tester le recalcul direct via l'API
    console.log('\nüîÑ Test recalcul direct...');
    
    // R√©cup√©rer les r√©ponses de la session
    const { data: responses, error: responsesError } = await supabase
      .from('TemporaryResponse')
      .select('*')
      .eq('session_id', session.id)
      .order('created_at', { ascending: true });

    if (responsesError || !responses) {
      console.log('‚ùå Erreur r√©cup√©ration r√©ponses');
      return;
    }

    // Cr√©er une nouvelle session de test
    const { data: testSession, error: testSessionError } = await supabase
      .from('TemporarySession')
      .insert({
        session_token: `test_optimized_${Date.now()}`,
        ip_address: '127.0.0.1',
        user_agent: 'Test Script',
        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
      })
      .select('*')
      .single();

    if (testSessionError) {
      console.log('‚ùå Erreur cr√©ation session test:', testSessionError);
      return;
    }

    console.log(`‚úÖ Session de test cr√©√©e: ${testSession.session_token}`);

    // Ins√©rer les r√©ponses dans la session de test
    for (const response of responses) {
      const { error: insertError } = await supabase
        .from('TemporaryResponse')
        .insert({
          session_id: testSession.id,
          question_id: response.question_id,
          response_value: response.response_value,
          response_metadata: response.response_metadata
        });

      if (insertError) {
        console.log(`‚ö†Ô∏è Erreur insertion r√©ponse: ${insertError.message}`);
      }
    }

    console.log(`‚úÖ ${responses.length} r√©ponses ins√©r√©es`);

    // 4. Tester le calcul direct
    console.log('\nüéØ Test calcul direct...');
    
    const calculateResponse = await fetch(`http://localhost:3001/api/simulator/calculate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        session_token: testSession.session_token
      })
    });

    const calculateResults = await calculateResponse.json();

    if (Array.isArray(calculateResults)) {
      console.log('‚úÖ Calcul direct r√©ussi');
      console.log(`   - R√©sultats: ${calculateResults.length}`);
      
      let totalSavingsDirect = 0;
      calculateResults.forEach(result => {
        console.log(`   - ${result.produit_id}: ${result.estimated_savings}‚Ç¨ (${result.eligibility_score}%) - ${result.confidence_level}`);
        totalSavingsDirect += result.estimated_savings || 0;
      });
      
      console.log(`\nüí∞ Total √©conomies (calcul direct): ${totalSavingsDirect}‚Ç¨`);
      
      // Comparer avec les r√©sultats de r√©cup√©ration
      if (Math.abs(totalSavings - totalSavingsDirect) < 1) {
        console.log('‚úÖ COH√âRENCE: Les r√©sultats sont identiques !');
      } else {
        console.log('‚ö†Ô∏è DIFF√âRENCE: Les r√©sultats ne sont pas identiques');
      }
    } else {
      console.log('‚ùå Erreur calcul direct:', calculateResults);
    }

    // 5. Nettoyer la session de test
    console.log('\nüßπ Nettoyage...');
    
    const { error: deleteError } = await supabase
      .from('TemporarySession')
      .delete()
      .eq('id', testSession.id);

    if (deleteError) {
      console.log('‚ö†Ô∏è Erreur suppression session test:', deleteError);
    } else {
      console.log('‚úÖ Session de test supprim√©e');
    }

    console.log('\nüéØ TEST TERMIN√â AVEC SUCC√àS !');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cution
if (require.main === module) {
  testOptimizedCalculator().catch(console.error);
}

module.exports = { testOptimizedCalculator }; 