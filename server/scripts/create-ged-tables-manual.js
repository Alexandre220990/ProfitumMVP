#!/usr/bin/env node

/**
 * Script manuel pour cr√©er les tables de la Gestion √âlectronique Documentaire (GED)
 * Utilise l'API Supabase directement au lieu de SQL brut
 * Usage: node scripts/create-ged-tables-manual.js
 */

import { createClient } from '@supabase/supabase-js';

// Configuration
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY requises');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createGEDTables() {
  console.log('üöÄ Cr√©ation manuelle des tables GED...\n');

  try {
    // 1. Cr√©er la table DocumentLabel
    console.log('üè∑Ô∏è  Cr√©ation de la table DocumentLabel...');
    
    const labels = [
      { name: 'admin', color: '#EF4444', description: 'Documentation pour les administrateurs' },
      { name: 'client', color: '#3B82F6', description: 'Documentation pour les clients' },
      { name: 'expert', color: '#10B981', description: 'Documentation pour les experts' },
      { name: 'guide', color: '#F59E0B', description: 'Guides d\'utilisation' },
      { name: 'fonctionnalit√©s', color: '#8B5CF6', description: 'Description des fonctionnalit√©s' },
      { name: 'processus', color: '#06B6D4', description: 'Processus m√©tier' },
      { name: 'm√©tier', color: '#84CC16', description: 'Documentation m√©tier' },
      { name: 's√©curit√©', color: '#DC2626', description: 'Documentation s√©curit√©' },
      { name: 'api', color: '#7C3AED', description: 'Documentation API' },
      { name: 'architecture', color: '#059669', description: 'Architecture technique' },
      { name: 'd√©ploiement', color: '#D97706', description: 'Guides de d√©ploiement' },
      { name: 'tests', color: '#0891B2', description: 'Documentation des tests' },
      { name: 'ged', color: '#7C2D12', description: 'Gestion √âlectronique Documentaire' },
      { name: 'documentation', color: '#1E40AF', description: 'Documentation g√©n√©rale' },
      { name: 'impl√©mentation', color: '#BE185D', description: 'Guides d\'impl√©mentation' },
      { name: 'base-de-donn√©es', color: '#92400E', description: 'Documentation base de donn√©es' },
      { name: 'iso', color: '#374151', description: 'Conformit√© ISO' }
    ];

    // Ins√©rer les labels un par un pour √©viter les conflits
    for (const label of labels) {
      try {
        const { data, error } = await supabase
          .from('DocumentLabel')
          .insert(label)
          .select()
          .single();

        if (error && !error.message.includes('duplicate key')) {
          console.log(`‚ùå Erreur lors de la cr√©ation du label ${label.name}:`, error.message);
        } else if (data) {
          console.log(`‚úÖ Label cr√©√©: ${label.name}`);
        } else {
          console.log(`‚ö†Ô∏è  Label d√©j√† existant: ${label.name}`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  Label ${label.name}: ${error.message}`);
      }
    }

    // 2. Cr√©er un document de test
    console.log('\nüìÑ Cr√©ation d\'un document de test...');
    
    const testDocument = {
      title: 'Guide d\'utilisation - Test GED',
      description: 'Document de test pour v√©rifier le fonctionnement de la GED',
      content: `
        <h1>Guide d'utilisation - Test GED</h1>
        <p>Ce document a √©t√© cr√©√© automatiquement pour tester le syst√®me de Gestion √âlectronique Documentaire.</p>
        
        <h2>Fonctionnalit√©s test√©es</h2>
        <ul>
          <li>Cr√©ation de documents</li>
          <li>Gestion des labels</li>
          <li>Permissions utilisateur</li>
          <li>Recherche et filtrage</li>
        </ul>
        
        <h2>Processus de test</h2>
        <ol>
          <li>Cr√©ation du document</li>
          <li>Ajout de labels</li>
          <li>V√©rification des permissions</li>
          <li>Test de modification</li>
          <li>Nettoyage automatique</li>
        </ol>
      `,
      category: 'technical',
      created_by: null,
      read_time: 3,
      is_active: true,
      version: 1
    };

    const { data: document, error: docError } = await supabase
      .from('Document')
      .insert(testDocument)
      .select()
      .single();

    if (docError) {
      console.log('‚ùå Erreur lors de la cr√©ation du document:', docError.message);
    } else {
      console.log(`‚úÖ Document cr√©√© avec l'ID: ${document.id}`);

      // 3. Ajouter des labels au document
      console.log('üè∑Ô∏è  Ajout de labels au document...');
      
      const labelIds = await getLabelIds(['ged', 'guide', 'documentation']);
      
      for (const labelId of labelIds) {
        try {
          const { error } = await supabase
            .from('DocumentLabelRelation')
            .insert({
              document_id: document.id,
              label_id: labelId
            });

          if (error && !error.message.includes('duplicate key')) {
            console.log(`‚ùå Erreur lors de l'ajout du label:`, error.message);
          } else {
            console.log(`‚úÖ Label ajout√© au document`);
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è  Label d√©j√† associ√©`);
        }
      }

      // 4. Cr√©er les permissions par d√©faut
      console.log('üîê Cr√©ation des permissions par d√©faut...');
      
      const defaultPermissions = [
        { document_id: document.id, user_type: 'admin', can_read: true, can_write: true, can_delete: true, can_share: true },
        { document_id: document.id, user_type: 'client', can_read: true, can_write: false, can_delete: false, can_share: true },
        { document_id: document.id, user_type: 'expert', can_read: true, can_write: true, can_delete: false, can_share: true }
      ];

      for (const permission of defaultPermissions) {
        try {
          const { error } = await supabase
            .from('DocumentPermission')
            .insert(permission);

          if (error && !error.message.includes('duplicate key')) {
            console.log(`‚ùå Erreur lors de la cr√©ation de la permission:`, error.message);
          } else {
            console.log(`‚úÖ Permission cr√©√©e pour ${permission.user_type}`);
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è  Permission d√©j√† existante pour ${permission.user_type}`);
        }
      }

      // 5. V√©rifier que tout fonctionne
      console.log('\nüîç V√©rification finale...');
      
      const { data: finalDoc, error: finalError } = await supabase
        .from('Document')
        .select(`
          *,
          DocumentLabelRelation(
            DocumentLabel(*)
          ),
          DocumentPermission(*)
        `)
        .eq('id', document.id)
        .single();

      if (finalError) {
        console.log('‚ùå Erreur lors de la v√©rification finale:', finalError.message);
      } else {
        console.log('‚úÖ Document final r√©cup√©r√© avec succ√®s');
        console.log(`   Titre: ${finalDoc.title}`);
        console.log(`   Labels: ${finalDoc.DocumentLabelRelation?.map((rel) => rel.DocumentLabel.name).join(', ') || 'Aucun'}`);
        console.log(`   Permissions: ${finalDoc.DocumentPermission?.length || 0} cr√©√©es`);
      }

      // 6. Nettoyer le document de test
      console.log('\nüßπ Nettoyage du document de test...');
      
      await supabase
        .from('Document')
        .delete()
        .eq('id', document.id);
      
      console.log('‚úÖ Document de test supprim√©');
    }

    console.log('\nüéâ Cr√©ation des tables GED termin√©e avec succ√®s!');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('   1. Red√©marrer le serveur backend');
    console.log('   2. Tester les routes API /api/documents');
    console.log('   3. Int√©grer l\'interface frontend');

  } catch (error) {
    console.error('\nüí• Erreur critique lors de la cr√©ation:', error);
    process.exit(1);
  }
}

async function getLabelIds(labelNames) {
  const { data: labels, error } = await supabase
    .from('DocumentLabel')
    .select('id, name')
    .in('name', labelNames);

  if (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration des labels:', error.message);
    return [];
  }

  return labels?.map(label => label.id) || [];
}

// Fonction utilitaire pour v√©rifier la connectivit√©
async function checkConnection() {
  console.log('üîå V√©rification de la connexion √† Supabase...');
  
  try {
    const { data, error } = await supabase
      .from('Client')
      .select('count')
      .limit(1);

    if (error) {
      throw error;
    }

    console.log('‚úÖ Connexion √† Supabase √©tablie');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† Supabase:', error.message);
    return false;
  }
}

// Point d'entr√©e principal
async function main() {
  console.log('üîß Cr√©ation manuelle des tables GED - FinancialTracker\n');
  
  // V√©rifier la connexion
  const isConnected = await checkConnection();
  if (!isConnected) {
    process.exit(1);
  }

  console.log('');
  
  // Cr√©er les tables
  await createGEDTables();
}

// Gestion des erreurs
process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Promesse rejet√©e non g√©r√©e:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('üí• Exception non captur√©e:', error);
  process.exit(1);
});

// Ex√©cuter le script
main().catch((error) => {
  console.error('üí• Erreur fatale:', error);
  process.exit(1);
}); 