const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configuration
const DATABASE_URL = process.env.DATABASE_URL;
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!DATABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
    console.error('‚ùå Variables d\'environnement DATABASE_URL et SUPABASE_SERVICE_ROLE_KEY requises');
    process.exit(1);
}

console.log('üîÑ Test avec rafra√Æchissement du cache de sch√©ma...\n');

async function testWithCacheRefresh() {
    try {
        // Cr√©er un nouveau client pour forcer le rafra√Æchissement
        const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
            auth: {
                autoRefreshToken: false,
                persistSession: false
            }
        });

        console.log('üîå Test de connexion...');
        
        // Test de connexion basique
        const { data: clientData, error: clientError } = await supabase
            .from('Client')
            .select('id, email, name')
            .limit(1);

        if (clientError) {
            console.error('‚ùå Erreur de connexion:', clientError.message);
            return;
        }

        console.log('‚úÖ Connexion r√©ussie');
        console.log('üìä Donn√©es client:', clientData);

        // Test des tables principales
        const tables = ['Client', 'Expert', 'DocumentFile', 'WorkflowTemplate', 'ComplianceControl'];
        
        for (const table of tables) {
            console.log(`\nüîç Test table ${table}...`);
            
            try {
                const { data, error } = await supabase
                    .from(table)
                    .select('*')
                    .limit(1);

                if (error) {
                    console.error(`‚ùå Erreur table ${table}:`, error.message);
                } else {
                    console.log(`‚úÖ Table ${table} accessible (${data.length} enregistrements)`);
                }
            } catch (err) {
                console.error(`‚ùå Exception table ${table}:`, err.message);
            }
        }

        // Test des donn√©es de test sp√©cifiques
        console.log('\nüîç Test des donn√©es de test...');
        
        const testClient = await supabase
            .from('Client')
            .select('id, email, name, company_name')
            .eq('id', '550e8400-e29b-41d4-a716-446655440001')
            .single();

        if (testClient.error) {
            console.error('‚ùå Client de test non trouv√©:', testClient.error.message);
        } else {
            console.log('‚úÖ Client de test trouv√©:', testClient.data.email);
        }

        const testExpert = await supabase
            .from('Expert')
            .select('id, email, name, company_name')
            .eq('id', '550e8400-e29b-41d4-a716-446655440003')
            .single();

        if (testExpert.error) {
            console.error('‚ùå Expert de test non trouv√©:', testExpert.error.message);
        } else {
            console.log('‚úÖ Expert de test trouv√©:', testExpert.data.email);
        }

        // Test d'insertion simple
        console.log('\n‚ûï Test d\'insertion...');
        
        const testInsert = await supabase
            .from('Client')
            .insert({
                email: 'test-cache@example.com',
                name: 'Test Cache',
                company_name: 'Test Company',
                password: 'test-password',
                siren: '873420964',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            })
            .select();

        if (testInsert.error) {
            console.error('‚ùå Erreur insertion:', testInsert.error.message);
        } else {
            console.log('‚úÖ Insertion r√©ussie:', testInsert.data[0].id);
            
            // Nettoyer
            await supabase
                .from('Client')
                .delete()
                .eq('email', 'test-cache@example.com');
        }

        console.log('\nüéâ Tests termin√©s avec succ√®s !');

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error.message);
    }
}

testWithCacheRefresh(); 