#!/usr/bin/env node

/**
 * üöÄ SIMULATEUR TICPE AVEC R√âCUP√âRATION COMPL√àTE
 * R√©cup√©ration sur 3 ann√©es + ann√©e suivante avec suivi
 */

// Profils de test clients r√©els
const PROFILS_CLIENTS = {
  // üöõ Transport routier de marchandises - Flotte importante
  transport_marchandises: {
    nom: "Transport Martin - Flotte 15 camions",
    secteur: "Transport routier de marchandises",
    chiffreAffaires: "1 000 000‚Ç¨ - 5 000 000‚Ç¨",
    vehiculesProfessionnels: "Oui",
    nombreVehicules: "11 √† 25 v√©hicules",
    typesVehicules: ["Camions de plus de 7,5 tonnes", "Camions de 3,5 √† 7,5 tonnes"],
    chronotachygraphe: "Oui, tous",
    consommationCarburant: "Plus de 50 000 litres",
    typesCarburant: ["Gazole professionnel"],
    facturesCarburant: "Oui, 3 derni√®res ann√©es compl√®tes",
    usageProfessionnel: "100% professionnel",
    kilometrageAnnuel: "Plus de 60 000 km",
    cartesCarburant: "Oui, toutes les stations",
    facturesNominatives: "Oui, syst√©matiquement",
    immatriculationSociete: "Oui, 100%",
    declarationsTicpe: "Oui, r√©guli√®rement",
    projetsOptimisation: ["CIR (Cr√©dit d'Imp√¥t Recherche)", "Optimisation URSSAF"],
    objectifsPrioritaires: ["R√©duire les co√ªts", "Gain de temps administratif"]
  },

  // üöï Taxi/VTC - Petit exploitant
  taxi_vtc: {
    nom: "Taxi Dupont - 2 v√©hicules",
    secteur: "Taxi / VTC",
    chiffreAffaires: "100 000‚Ç¨ - 500 000‚Ç¨",
    vehiculesProfessionnels: "Oui",
    nombreVehicules: "1 √† 3 v√©hicules",
    typesVehicules: ["V√©hicules de service"],
    chronotachygraphe: "Non",
    consommationCarburant: "5 000 √† 15 000 litres",
    typesCarburant: ["Gazole professionnel", "Essence"],
    facturesCarburant: "Oui, 2 derni√®res ann√©es",
    usageProfessionnel: "100% professionnel",
    kilometrageAnnuel: "30 000 √† 60 000 km",
    cartesCarburant: "Oui, partiellement",
    facturesNominatives: "Oui, partiellement",
    immatriculationSociete: "Oui, 100%",
    declarationsTicpe: "Non",
    projetsOptimisation: ["Optimisation URSSAF"],
    objectifsPrioritaires: ["R√©duire les co√ªts", "Optimiser la fiscalit√©"]
  },

  // üèóÔ∏è BTP - Entreprise moyenne
  btp_travaux_publics: {
    nom: "BTP Construction - 8 engins",
    secteur: "BTP / Travaux publics",
    chiffreAffaires: "500 000‚Ç¨ - 1 000 000‚Ç¨",
    vehiculesProfessionnels: "Oui",
    nombreVehicules: "4 √† 10 v√©hicules",
    typesVehicules: ["Engins de chantier", "V√©hicules utilitaires l√©gers"],
    chronotachygraphe: "Oui, certains",
    consommationCarburant: "15 000 √† 50 000 litres",
    typesCarburant: ["Gazole Non Routier (GNR)"],
    facturesCarburant: "Oui, 1 derni√®re ann√©e",
    usageProfessionnel: "80-99% professionnel",
    kilometrageAnnuel: "10 000 √† 30 000 km",
    cartesCarburant: "Oui, partiellement",
    facturesNominatives: "Oui, partiellement",
    immatriculationSociete: "Oui, majoritairement",
    declarationsTicpe: "Oui, occasionnellement",
    projetsOptimisation: ["Audit √©nerg√©tique"],
    objectifsPrioritaires: ["Am√©liorer mon fonctionnement global", "Conformit√© r√©glementaire"]
  },

  // üöú Agriculture - Exploitation familiale
  agriculture: {
    nom: "Ferme Dubois - 5 tracteurs",
    secteur: "Secteur Agricole",
    chiffreAffaires: "100 000‚Ç¨ - 500 000‚Ç¨",
    vehiculesProfessionnels: "Oui",
    nombreVehicules: "1 √† 3 v√©hicules",
    typesVehicules: ["Tracteurs agricoles"],
    chronotachygraphe: "Non",
    consommationCarburant: "5 000 √† 15 000 litres",
    typesCarburant: ["Gazole Non Routier (GNR)"],
    facturesCarburant: "Partiellement",
    usageProfessionnel: "100% professionnel",
    kilometrageAnnuel: "Moins de 10 000 km",
    cartesCarburant: "Non",
    facturesNominatives: "Oui, partiellement",
    immatriculationSociete: "Oui, 100%",
    declarationsTicpe: "Non",
    projetsOptimisation: ["Aucun"],
    objectifsPrioritaires: ["R√©duire les co√ªts"]
  }
};

/**
 * Moteur de calcul TICPE avec r√©cup√©ration compl√®te
 */
class TICPESimulatorComplet {
  constructor() {
    this.tauxCarburant = {
      'Gazole professionnel': 0.177,
      'Gazole Non Routier (GNR)': 0.150,
      'Essence': 0.177,
      'GPL': 0.177,
      '√âlectricit√©': 0.177
    };

    this.coefficientsVehicules = {
      'Camions de plus de 7,5 tonnes': 1.0,
      'Camions de 3,5 √† 7,5 tonnes': 0.8,
      'V√©hicules utilitaires l√©gers': 0.6,
      'Engins de chantier': 0.9,
      'V√©hicules de service': 0.7,
      'V√©hicules de fonction': 0.5,
      'Tracteurs agricoles': 0.9
    };

    this.coefficientsUsage = {
      '100% professionnel': 1.0,
      '80-99% professionnel': 0.9,
      '60-79% professionnel': 0.7,
      'Moins de 60% professionnel': 0.5
    };

    this.estimationsConsommation = {
      'Moins de 5 000 litres': 3000,
      '5 000 √† 15 000 litres': 10000,
      '15 000 √† 50 000 litres': 32500,
      'Plus de 50 000 litres': 75000
    };

    // Facteurs de r√©cup√©ration par ann√©e
    this.facteursRecuperation = {
      'ann√©e_courante': 1.0,      // 100% de r√©cup√©ration possible
      'ann√©e_pr√©c√©dente': 0.95,   // 95% (l√©g√®re d√©gradation)
      'ann√©e_ant√©pr√©c√©dente': 0.90, // 90% (d√©gradation plus importante)
      'ann√©e_suivante': 1.0       // 100% avec suivi
    };

    // Ann√©e actuelle
    this.anneeActuelle = new Date().getFullYear();
  }

  /**
   * Calcul principal TICPE avec r√©cup√©ration compl√®te
   */
  calculateTICPERecoveryComplete(profil) {
    console.log(`\nüßÆ CALCUL TICPE COMPLET - ${profil.nom}`);
    console.log('=' .repeat(60));

    // 1. V√©rification √©ligibilit√©
    const eligibility = this.checkEligibility(profil);
    if (!eligibility.isEligible) {
      return {
        eligible: false,
        raison: eligibility.raison,
        score_eligibilite: 0,
        montant_estime: 0,
        niveau_confiance: 'faible',
        recommandations: ['‚ùå Non √©ligible √† la r√©cup√©ration TICPE']
      };
    }

    // 2. Calcul du score d'√©ligibilit√©
    const scoreEligibilite = this.calculateEligibilityScore(profil);

    // 3. Calcul du montant annuel de base
    const calculMontantAnnuel = this.calculateRecoveryAmount(profil);

    // 4. Calcul de la r√©cup√©ration sur 3 ann√©es + ann√©e suivante
    const recuperationComplete = this.calculateCompleteRecovery(profil, calculMontantAnnuel);

    // 5. Calcul du score de maturit√© administrative
    const scoreMaturite = this.calculateMaturityScore(profil);

    // 6. D√©termination du niveau de confiance
    const niveauConfiance = this.determineConfidenceLevel(profil, scoreMaturite);

    // 7. G√©n√©ration des recommandations
    const recommandations = this.generateRecommendations(profil, recuperationComplete, scoreMaturite);

    return {
      eligible: true,
      score_eligibilite: scoreEligibilite,
      montant_annuel: Math.round(calculMontantAnnuel.final_amount),
      recuperation_complete: recuperationComplete,
      niveau_confiance: niveauConfiance,
      score_maturite: scoreMaturite,
      details_calcul: {
        montant_base: Math.round(calculMontantAnnuel.base_amount),
        coefficient_vehicule: calculMontantAnnuel.vehicle_coefficient,
        coefficient_usage: calculMontantAnnuel.usage_coefficient,
        taux_carburant: calculMontantAnnuel.fuel_rate,
        consommation_totale: calculMontantAnnuel.total_consumption
      },
      recommandations: recommandations,
      secteur_performance: eligibility.secteurPerformance
    };
  }

  /**
   * Calcul de la r√©cup√©ration compl√®te sur 3 ann√©es + ann√©e suivante
   */
  calculateCompleteRecovery(profil, calculMontantAnnuel) {
    const montantAnnuel = calculMontantAnnuel.final_amount;
    const anneeActuelle = this.anneeActuelle;

    // D√©terminer les facteurs selon la disponibilit√© des factures
    let facteurAnneePrecedente = this.facteursRecuperation.ann√©e_pr√©c√©dente;
    let facteurAnneeAntePrecedente = this.facteursRecuperation.ann√©e_ant√©pr√©c√©dente;

    // Ajuster selon la disponibilit√© des factures
    if (profil.facturesCarburant === 'Oui, 3 derni√®res ann√©es compl√®tes') {
      facteurAnneePrecedente = 1.0;
      facteurAnneeAntePrecedente = 1.0;
    } else if (profil.facturesCarburant === 'Oui, 2 derni√®res ann√©es') {
      facteurAnneePrecedente = 1.0;
      facteurAnneeAntePrecedente = 0.7; // Factures partielles
    } else if (profil.facturesCarburant === 'Oui, 1 derni√®re ann√©e') {
      facteurAnneePrecedente = 0.8;
      facteurAnneeAntePrecedente = 0.5; // Estimation
    } else if (profil.facturesCarburant === 'Partiellement') {
      facteurAnneePrecedente = 0.6;
      facteurAnneeAntePrecedente = 0.3; // Estimation approximative
    }

    // Calculs par ann√©e
    const recuperationParAnnee = {
      'ann√©e_courante': {
        annee: anneeActuelle,
        montant: montantAnnuel * this.facteursRecuperation.ann√©e_courante,
        facteur: this.facteursRecuperation.ann√©e_courante,
        statut: 'R√©cup√©ration possible',
        commentaire: 'Ann√©e en cours'
      },
      'ann√©e_pr√©c√©dente': {
        annee: anneeActuelle - 1,
        montant: montantAnnuel * facteurAnneePrecedente,
        facteur: facteurAnneePrecedente,
        statut: facteurAnneePrecedente >= 0.9 ? 'R√©cup√©ration possible' : 'R√©cup√©ration partielle',
        commentaire: profil.facturesCarburant.includes('2') || profil.facturesCarburant.includes('3') ? 
          'Factures disponibles' : 'Estimation bas√©e sur les donn√©es'
      },
      'ann√©e_ant√©pr√©c√©dente': {
        annee: anneeActuelle - 2,
        montant: montantAnnuel * facteurAnneeAntePrecedente,
        facteur: facteurAnneeAntePrecedente,
        statut: facteurAnneeAntePrecedente >= 0.9 ? 'R√©cup√©ration possible' : 'R√©cup√©ration partielle',
        commentaire: profil.facturesCarburant.includes('3') ? 
          'Factures disponibles' : 'Estimation bas√©e sur les donn√©es'
      },
      'ann√©e_suivante': {
        annee: anneeActuelle + 1,
        montant: montantAnnuel * this.facteursRecuperation.ann√©e_suivante,
        facteur: this.facteursRecuperation.ann√©e_suivante,
        statut: 'Suivi et r√©cup√©ration assur√©s',
        commentaire: 'Accompagnement complet Profitum'
      }
    };

    // Calcul du total
    const totalRecuperation = Object.values(recuperationParAnnee)
      .reduce((total, annee) => total + annee.montant, 0);

    return {
      par_annee: recuperationParAnnee,
      total: Math.round(totalRecuperation),
      montant_annuel_reference: Math.round(montantAnnuel),
      annees_couvertes: 4,
      suivi_inclus: true
    };
  }

  /**
   * V√©rification de l'√©ligibilit√© de base
   */
  checkEligibility(profil) {
    const secteursEligibles = [
      'Transport routier de marchandises',
      'Transport routier de voyageurs',
      'Taxi / VTC',
      'BTP / Travaux publics',
      'Secteur Agricole'
    ];

    if (!secteursEligibles.includes(profil.secteur)) {
      return { isEligible: false, raison: 'Secteur non √©ligible', secteurPerformance: 0 };
    }

    if (profil.vehiculesProfessionnels !== 'Oui') {
      return { isEligible: false, raison: 'Aucun v√©hicule professionnel', secteurPerformance: 0 };
    }

    // Performance du secteur
    const performancesSecteur = {
      'Transport routier de marchandises': 95,
      'Transport routier de voyageurs': 90,
      'Taxi / VTC': 75,
      'BTP / Travaux publics': 70,
      'Secteur Agricole': 60
    };

    return { 
      isEligible: true, 
      raison: '√âligible', 
      secteurPerformance: performancesSecteur[profil.secteur] || 0 
    };
  }

  /**
   * Calcul du score d'√©ligibilit√© (0-100)
   */
  calculateEligibilityScore(profil) {
    let score = 0;

    // Secteur d'activit√© (30 points)
    const scoresSecteur = {
      'Transport routier de marchandises': 30,
      'Transport routier de voyageurs': 30,
      'Taxi / VTC': 25,
      'BTP / Travaux publics': 20,
      'Secteur Agricole': 15
    };
    score += scoresSecteur[profil.secteur] || 0;

    // V√©hicules professionnels (25 points)
    score += 25;

    // Types de v√©hicules (20 points)
    if (profil.typesVehicules) {
      const scoreVehicules = this.calculateVehicleScore(profil.typesVehicules);
      score += scoreVehicules;
    }

    // Consommation carburant (15 points)
    if (profil.consommationCarburant) {
      if (profil.consommationCarburant === 'Plus de 50 000 litres') score += 15;
      else if (profil.consommationCarburant === '15 000 √† 50 000 litres') score += 10;
      else if (profil.consommationCarburant === '5 000 √† 15 000 litres') score += 5;
    }

    // Documents disponibles (10 points)
    if (profil.facturesCarburant && profil.facturesCarburant.includes('compl√®tes')) {
      score += 10;
    }

    return Math.min(score, 100);
  }

  /**
   * Calcul du score des v√©hicules
   */
  calculateVehicleScore(typesVehicules) {
    let score = 0;
    
    typesVehicules.forEach(type => {
      switch (type) {
        case 'Camions de plus de 7,5 tonnes':
          score += 20;
          break;
        case 'Camions de 3,5 √† 7,5 tonnes':
          score += 15;
          break;
        case 'Engins de chantier':
          score += 15;
          break;
        case 'Tracteurs agricoles':
          score += 15;
          break;
        case 'V√©hicules utilitaires l√©gers':
          score += 10;
          break;
        case 'V√©hicules de service':
          score += 10;
          break;
      }
    });

    return Math.min(score, 20);
  }

  /**
   * Calcul du montant r√©cup√©rable annuel
   */
  calculateRecoveryAmount(profil) {
    // 1. D√©termination du taux de carburant
    const fuelRate = this.getFuelRate(profil.typesCarburant, profil.secteur);
    
    // 2. Calcul de la consommation totale
    const totalConsumption = this.estimationsConsommation[profil.consommationCarburant] || 10000;
    
    // 3. Calcul du montant de base
    const baseAmount = totalConsumption * fuelRate;
    
    // 4. Application du coefficient v√©hicule
    const vehicleCoefficient = this.getVehicleCoefficient(profil.typesVehicules);
    
    // 5. Application du coefficient d'usage professionnel
    const usageCoefficient = this.coefficientsUsage[profil.usageProfessionnel] || 0.7;
    
    // 6. Calcul du montant final
    let finalAmount = baseAmount * vehicleCoefficient * usageCoefficient;
    
    // 7. Facteur de correction selon la taille
    const sizeCorrection = this.getSizeCorrection(profil.nombreVehicules, profil.chiffreAffaires);
    finalAmount *= sizeCorrection;
    
    // 8. Plafonnement r√©aliste
    finalAmount = Math.min(finalAmount, 100000); // Plafond 100k‚Ç¨
    finalAmount = Math.max(finalAmount, 500);    // Minimum 500‚Ç¨

    return {
      base_amount: baseAmount,
      vehicle_coefficient: vehicleCoefficient,
      usage_coefficient: usageCoefficient,
      fuel_rate: fuelRate,
      total_consumption: totalConsumption,
      final_amount: finalAmount
    };
  }

  /**
   * R√©cup√©ration du taux de carburant
   */
  getFuelRate(typesCarburant, secteur) {
    if (!typesCarburant || typesCarburant.length === 0) {
      // Taux par d√©faut selon le secteur
      const tauxDefaut = {
        'Transport routier de marchandises': 0.177,
        'Transport routier de voyageurs': 0.177,
        'Taxi / VTC': 0.213,
        'BTP / Travaux publics': 0.150,
        'Secteur Agricole': 0.150
      };
      return tauxDefaut[secteur] || 0.177;
    }

    // Prendre le taux le plus √©lev√© parmi les carburants utilis√©s
    let maxRate = 0;
    typesCarburant.forEach(type => {
      const rate = this.tauxCarburant[type] || 0.177;
      if (rate > maxRate) maxRate = rate;
    });

    return maxRate;
  }

  /**
   * Calcul du coefficient v√©hicule
   */
  getVehicleCoefficient(typesVehicules) {
    if (!typesVehicules || typesVehicules.length === 0) return 0.7;

    let totalCoefficient = 0;
    typesVehicules.forEach(type => {
      totalCoefficient += this.coefficientsVehicules[type] || 0.5;
    });

    return totalCoefficient / typesVehicules.length;
  }

  /**
   * Facteur de correction selon la taille
   */
  getSizeCorrection(nombreVehicules, chiffreAffaires) {
    let correction = 1.0;

    // Correction selon le nombre de v√©hicules
    if (nombreVehicules === 'Plus de 25 v√©hicules') correction *= 1.1;
    else if (nombreVehicules === '11 √† 25 v√©hicules') correction *= 1.05;
    else if (nombreVehicules === '1 √† 3 v√©hicules') correction *= 0.9;

    // Correction selon le chiffre d'affaires
    if (chiffreAffaires === 'Plus de 5 000 000‚Ç¨') correction *= 1.1;
    else if (chiffreAffaires === 'Moins de 100 000‚Ç¨') correction *= 0.9;

    return correction;
  }

  /**
   * Calcul du score de maturit√© administrative (0-100)
   */
  calculateMaturityScore(profil) {
    let score = 0;

    // Cartes carburant professionnelles (20 points)
    if (profil.cartesCarburant === 'Oui, toutes les stations') score += 20;
    else if (profil.cartesCarburant === 'Oui, partiellement') score += 10;

    // Factures nominatives (20 points)
    if (profil.facturesNominatives === 'Oui, syst√©matiquement') score += 20;
    else if (profil.facturesNominatives === 'Oui, partiellement') score += 10;

    // Immatriculation soci√©t√© (15 points)
    if (profil.immatriculationSociete === 'Oui, 100%') score += 15;
    else if (profil.immatriculationSociete === 'Oui, majoritairement') score += 10;

    // D√©clarations TICPE (25 points)
    if (profil.declarationsTicpe === 'Oui, r√©guli√®rement') score += 25;
    else if (profil.declarationsTicpe === 'Oui, occasionnellement') score += 15;

    // Factures carburant (20 points)
    if (profil.facturesCarburant === 'Oui, 3 derni√®res ann√©es compl√®tes') score += 20;
    else if (profil.facturesCarburant === 'Oui, 2 derni√®res ann√©es') score += 15;
    else if (profil.facturesCarburant === 'Oui, 1 derni√®re ann√©e') score += 10;
    else if (profil.facturesCarburant === 'Partiellement') score += 5;

    return Math.min(score, 100);
  }

  /**
   * D√©termination du niveau de confiance
   */
  determineConfidenceLevel(profil, scoreMaturite) {
    let confiance = 0;

    // Score de maturit√© (40 points max)
    confiance += (scoreMaturite / 100) * 40;

    // Qualit√© des donn√©es (30 points max)
    if (profil.consommationCarburant) confiance += 15;
    if (profil.typesCarburant && profil.typesCarburant.length > 0) confiance += 15;

    // Secteur performant (30 points max)
    const secteursPerformants = ['Transport routier de marchandises', 'Transport routier de voyageurs'];
    if (secteursPerformants.includes(profil.secteur)) confiance += 30;

    if (confiance >= 70) return '√©lev√©';
    if (confiance >= 40) return 'moyen';
    return 'faible';
  }

  /**
   * G√©n√©ration des recommandations
   */
  generateRecommendations(profil, recuperationComplete, scoreMaturite) {
    const recommandations = [];

    // Recommandations selon le score de maturit√©
    if (scoreMaturite >= 80) {
      recommandations.push('‚úÖ Maturit√© administrative √©lev√©e - R√©cup√©ration optimale possible');
    } else if (scoreMaturite >= 60) {
      recommandations.push('‚ö†Ô∏è Maturit√© administrative moyenne - Am√©lioration possible');
    } else if (scoreMaturite >= 40) {
      recommandations.push('üîß Maturit√© administrative faible - Accompagnement n√©cessaire');
    } else {
      recommandations.push('‚ùå Maturit√© administrative insuffisante - Formation requise');
    }

    // Recommandations sp√©cifiques
    if (profil.cartesCarburant !== 'Oui, toutes les stations') {
      recommandations.push('üí≥ Misez sur les cartes carburant professionnelles');
    }

    if (profil.facturesNominatives !== 'Oui, syst√©matiquement') {
      recommandations.push('üìÑ Am√©liorez la conservation des factures nominatives');
    }

    if (profil.declarationsTicpe !== 'Oui, r√©guli√®rement') {
      recommandations.push('üìã Mettez en place des d√©clarations TICPE r√©guli√®res');
    }

    // Recommandations selon le montant total
    if (recuperationComplete.total > 50000) {
      recommandations.push('üí∞ R√©cup√©ration importante - Audit approfondi recommand√©');
    } else if (recuperationComplete.total < 10000) {
      recommandations.push('üîç R√©cup√©ration modeste - V√©rifiez l\'optimisation');
    }

    // Recommandation sur le suivi
    recommandations.push('üîÑ Suivi et r√©cup√©ration ann√©e suivante inclus dans notre accompagnement');

    return recommandations;
  }
}

/**
 * Fonction principale de test
 */
async function testSimulateurTICPEComplet() {
  console.log('üöÄ SIMULATEUR TICPE AVEC R√âCUP√âRATION COMPL√àTE');
  console.log('=' .repeat(70));
  console.log('Date:', new Date().toLocaleString('fr-FR'));
  console.log('');

  const simulateur = new TICPESimulatorComplet();

  // Test de chaque profil client
  for (const [key, profil] of Object.entries(PROFILS_CLIENTS)) {
    console.log(`\n${'='.repeat(70)}`);
    console.log(`üë§ PROFIL: ${profil.nom}`);
    console.log(`üè¢ Secteur: ${profil.secteur}`);
    console.log(`üí∞ CA: ${profil.chiffreAffaires}`);
    
    if (profil.vehiculesProfessionnels === 'Oui') {
      console.log(`üöõ V√©hicules: ${profil.nombreVehicules} (${profil.typesVehicules?.join(', ')})`);
      console.log(`‚õΩ Consommation: ${profil.consommationCarburant}`);
      console.log(`üìÑ Factures: ${profil.facturesCarburant}`);
    } else {
      console.log(`‚ùå Aucun v√©hicule professionnel`);
    }

    const resultat = simulateur.calculateTICPERecoveryComplete(profil);

    // Affichage des r√©sultats
    console.log('\nüìä R√âSULTATS:');
    console.log('‚îÄ'.repeat(40));
    
    if (resultat.eligible) {
      console.log(`‚úÖ √âligible: OUI`);
      console.log(`üéØ Score d'√©ligibilit√©: ${resultat.score_eligibilite}/100`);
      console.log(`üí∞ Montant annuel estim√©: ${resultat.montant_annuel.toLocaleString('fr-FR')}‚Ç¨`);
      console.log(`üìà Niveau de confiance: ${resultat.niveau_confiance.toUpperCase()}`);
      console.log(`üèÜ Score de maturit√©: ${resultat.score_maturite}/100`);
      console.log(`üìä Performance secteur: ${resultat.secteur_performance}%`);
      
      console.log('\nüîÑ R√âCUP√âRATION COMPL√àTE (3 ann√©es + ann√©e suivante):');
      console.log('‚îÄ'.repeat(50));
      
      Object.entries(resultat.recuperation_complete.par_annee).forEach(([periode, annee]) => {
        const statutIcon = annee.statut.includes('possible') ? '‚úÖ' : 
                          annee.statut.includes('partielle') ? '‚ö†Ô∏è' : 'üîÑ';
        console.log(`${statutIcon} ${annee.annee}: ${annee.montant.toLocaleString('fr-FR')}‚Ç¨ (${(annee.facteur * 100).toFixed(0)}%) - ${annee.statut}`);
        console.log(`   üìù ${annee.commentaire}`);
      });
      
      console.log(`\nüí∞ TOTAL R√âCUP√âRATION: ${resultat.recuperation_complete.total.toLocaleString('fr-FR')}‚Ç¨`);
      console.log(`üìÖ P√©riode couverte: ${resultat.recuperation_complete.annees_couvertes} ann√©es`);
      console.log(`üîÑ Suivi ann√©e suivante: ${resultat.recuperation_complete.suivi_inclus ? 'INCLUS' : 'NON INCLUS'}`);
      
      console.log('\nüîß D√âTAILS DU CALCUL ANNUEL:');
      console.log(`   ‚Ä¢ Montant de base: ${resultat.details_calcul.montant_base.toLocaleString('fr-FR')}‚Ç¨`);
      console.log(`   ‚Ä¢ Coefficient v√©hicule: ${resultat.details_calcul.coefficient_vehicule.toFixed(2)}`);
      console.log(`   ‚Ä¢ Coefficient usage: ${resultat.details_calcul.coefficient_usage.toFixed(2)}`);
      console.log(`   ‚Ä¢ Taux carburant: ${resultat.details_calcul.taux_carburant}‚Ç¨/L`);
      console.log(`   ‚Ä¢ Consommation totale: ${resultat.details_calcul.consommation_totale.toLocaleString('fr-FR')}L`);
      
      console.log('\nüí° RECOMMANDATIONS:');
      resultat.recommandations.forEach(rec => console.log(`   ‚Ä¢ ${rec}`));
    } else {
      console.log(`‚ùå √âligible: NON`);
      console.log(`üìù Raison: ${resultat.raison}`);
      console.log(`üí° Recommandations: ${resultat.recommandations.join(', ')}`);
    }
  }

  console.log(`\n${'='.repeat(70)}`);
  console.log('‚úÖ TESTS TERMIN√âS');
  console.log('üìä R√©cup√©ration compl√®te sur 3 ann√©es + ann√©e suivante avec suivi');
}

// Ex√©cution du test
if (require.main === module) {
  testSimulateurTICPEComplet().catch(console.error);
}

module.exports = { TICPESimulatorComplet, PROFILS_CLIENTS }; 