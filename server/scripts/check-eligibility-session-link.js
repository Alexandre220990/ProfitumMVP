// Charger les variables d'environnement
require('dotenv').config({ path: '../.env' });

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkEligibilitySessionLink() {
  console.log('üîç V√âRIFICATION LIEN SESSION-√âLIGIBILIT√â');
  console.log('=' .repeat(50));

  try {
    // 1. R√©cup√©rer la derni√®re session
    console.log('\n1Ô∏è‚É£ R√©cup√©ration de la derni√®re session...');
    
    const { data: sessions, error: sessionsError } = await supabase
      .from('TemporarySession')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(1);

    if (sessionsError) {
      console.error('‚ùå Erreur r√©cup√©ration sessions:', sessionsError);
      return;
    }

    if (!sessions || sessions.length === 0) {
      console.error('‚ùå Aucune session trouv√©e');
      return;
    }

    const session = sessions[0];
    console.log('‚úÖ Session trouv√©e:', {
      id: session.id,
      session_token: session.session_token,
      completed: session.completed,
      created_at: session.created_at
    });

    // 2. V√©rifier les √©ligibilit√©s pour cette session
    console.log('\n2Ô∏è‚É£ V√©rification des √©ligibilit√©s pour cette session...');
    
    const { data: eligibilities, error: eligibilitiesError } = await supabase
      .from('TemporaryEligibility')
      .select('*')
      .eq('session_id', session.id);

    if (eligibilitiesError) {
      console.error('‚ùå Erreur r√©cup√©ration √©ligibilit√©s:', eligibilitiesError);
      return;
    }

    console.log(`‚úÖ ${eligibilities?.length || 0} √©ligibilit√©s trouv√©es pour session_id: ${session.id}`);
    
    if (eligibilities && eligibilities.length > 0) {
      for (const eligibility of eligibilities) {
        console.log(`   - ${eligibility.produit_id}: ${eligibility.eligibility_score}% (${eligibility.estimated_savings}‚Ç¨)`);
      }
    }

    // 3. V√©rifier toutes les √©ligibilit√©s r√©centes
    console.log('\n3Ô∏è‚É£ V√©rification de toutes les √©ligibilit√©s r√©centes...');
    
    const { data: allEligibilities, error: allEligibilitiesError } = await supabase
      .from('TemporaryEligibility')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);

    if (allEligibilitiesError) {
      console.error('‚ùå Erreur r√©cup√©ration toutes √©ligibilit√©s:', allEligibilitiesError);
      return;
    }

    console.log(`‚úÖ ${allEligibilities?.length || 0} √©ligibilit√©s r√©centes trouv√©es:`);
    
    if (allEligibilities && allEligibilities.length > 0) {
      for (const eligibility of allEligibilities) {
        console.log(`   - session_id: ${eligibility.session_id} | ${eligibility.produit_id}: ${eligibility.eligibility_score}%`);
      }
    }

    // 4. V√©rifier si le session_id correspond √† l'ID de la session
    console.log('\n4Ô∏è‚É£ V√©rification de la correspondance session_id...');
    
    const sessionId = session.id;
    const sessionToken = session.session_token;
    
    console.log(`   - ID de session: ${sessionId}`);
    console.log(`   - Token de session: ${sessionToken}`);
    
    // V√©rifier les √©ligibilit√©s avec session_id = ID de session
    const { data: eligibilitiesById, error: eligibilitiesByIdError } = await supabase
      .from('TemporaryEligibility')
      .select('*')
      .eq('session_id', sessionId);

    console.log(`   - √âligibilit√©s avec session_id = ${sessionId}: ${eligibilitiesById?.length || 0}`);

    // V√©rifier les √©ligibilit√©s avec session_id = session_token
    const { data: eligibilitiesByToken, error: eligibilitiesByTokenError } = await supabase
      .from('TemporaryEligibility')
      .select('*')
      .eq('session_id', sessionToken);

    console.log(`   - √âligibilit√©s avec session_id = ${sessionToken}: ${eligibilitiesByToken?.length || 0}`);

    // 5. Conclusion
    console.log('\n5Ô∏è‚É£ Conclusion...');
    
    if (eligibilitiesById && eligibilitiesById.length > 0) {
      console.log('‚úÖ Les √©ligibilit√©s sont bien li√©es √† l\'ID de session');
      console.log('   - La migration devrait fonctionner');
    } else if (eligibilitiesByToken && eligibilitiesByToken.length > 0) {
      console.log('‚ö†Ô∏è Les √©ligibilit√©s sont li√©es au session_token, pas √† l\'ID');
      console.log('   - Il faut corriger la logique de migration');
    } else {
      console.log('‚ùå Aucune √©ligibilit√© trouv√©e pour cette session');
      console.log('   - Probl√®me dans la cr√©ation des √©ligibilit√©s');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

checkEligibilitySessionLink();