require('dotenv/config');
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement manquantes');
    console.log('SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
    console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function debugClient() {
    const clientId = '546a07b3-564e-4838-aaa4-96128ebca448';
    
    console.log('üîç DEBUG CLIENT SIMPLIFI√â');
    console.log('Client ID:', clientId);
    console.log('=====================================\n');

    try {
        // Test 1: V√©rifier le client sp√©cifique
        console.log('üìã Test 1: Client sp√©cifique');
        const { data: client, error: clientError } = await supabase
            .from('Client')
            .select('*')
            .eq('id', clientId)
            .single();

        if (clientError) {
            console.error('‚ùå Erreur client:', clientError);
        } else {
            console.log('‚úÖ Client trouv√©:', client);
        }
        console.log('');

        // Test 2: V√©rifier les produits √©ligibles
        console.log('üìã Test 2: Produits √©ligibles du client');
        const { data: produits, error: produitsError } = await supabase
            .from('ClientProduitEligible')
            .select(`
                *,
                ProduitEligible (
                    nom
                )
            `)
            .eq('clientId', clientId)
            .order('created_at', { ascending: false });

        if (produitsError) {
            console.error('‚ùå Erreur produits:', produitsError);
        } else {
            console.log('‚úÖ Produits √©ligibles:', produits);
        }
        console.log('');

        // Test 3: V√©rifier les sessions de simulateur (corrig√©)
        console.log('üìã Test 3: Sessions simulateur');
        const { data: sessions, error: sessionsError } = await supabase
            .from('SimulatorSession')
            .select('*')
            .order('created_at', { ascending: false })
            .limit(10);

        if (sessionsError) {
            console.error('‚ùå Erreur sessions:', sessionsError);
        } else {
            console.log('‚úÖ Sessions simulateur (10 derni√®res):', sessions);
            
            // Filtrer manuellement pour test2@test.fr
            const sessionsTest2 = sessions.filter(session => 
                session.metadata && 
                JSON.stringify(session.metadata).includes('test2@test.fr')
            );
            
            if (sessionsTest2.length > 0) {
                console.log('‚úÖ Sessions pour test2@test.fr:', sessionsTest2);
            } else {
                console.log('‚ÑπÔ∏è  Aucune session trouv√©e pour test2@test.fr');
            }
        }
        console.log('');

        // Test 4: V√©rifier les r√©sultats d'√©ligibilit√©
        console.log('üìã Test 4: R√©sultats √©ligibilit√© simulateur');
        if (sessions && sessions.length > 0) {
            const sessionIds = sessions.map(s => s.id);
            const { data: eligibilities, error: eligibilitiesError } = await supabase
                .from('SimulatorEligibility')
                .select('*')
                .in('session_id', sessionIds)
                .order('created_at', { ascending: false });

            if (eligibilitiesError) {
                console.error('‚ùå Erreur √©ligibilit√©:', eligibilitiesError);
            } else {
                console.log('‚úÖ R√©sultats √©ligibilit√©:', eligibilities);
            }
        } else {
            console.log('‚ÑπÔ∏è  Aucune session trouv√©e pour v√©rifier l\'√©ligibilit√©');
        }
        console.log('');

        // Test 5: V√©rifier l'existence des tables du simulateur
        console.log('üìã Test 5: V√©rification des tables du simulateur');
        const tables = ['SimulatorSession', 'SimulatorEligibility', 'SimulatorResponse'];
        
        for (const table of tables) {
            const { data, error } = await supabase
                .from(table)
                .select('count')
                .limit(1);
            
            if (error) {
                console.log(`‚ùå Table ${table}: ${error.message}`);
            } else {
                console.log(`‚úÖ Table ${table}: Existe`);
            }
        }

        // Test 6: V√©rifier les produits √©ligibles disponibles
        console.log('\nüìã Test 6: Produits √©ligibles disponibles');
        const { data: allProduits, error: allProduitsError } = await supabase
            .from('ProduitEligible')
            .select('*')
            .order('nom');

        if (allProduitsError) {
            console.error('‚ùå Erreur produits disponibles:', allProduitsError);
        } else {
            console.log('‚úÖ Produits disponibles:', allProduits.map(p => ({ id: p.id, nom: p.nom })));
        }

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error);
    }
}

debugClient(); 