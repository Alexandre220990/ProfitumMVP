#!/usr/bin/env node

/**
 * Test des Nouvelles Fonctionnalit√©s ISO 27001
 * Valide l'impl√©mentation des mesures de s√©curit√©
 */

const fs = require('fs');
const path = require('path');

class NewFeaturesTester {
    constructor() {
        this.results = {
            total: 0,
            passed: 0,
            failed: 0,
            details: []
        };
    }

    async runAllTests() {
        console.log('üß™ Test des Nouvelles Fonctionnalit√©s ISO 27001\n');
        
        await this.testSecurityTraining();
        await this.testBusinessContinuity();
        await this.testOrganizationSecurity();
        await this.testEncryption();
        await this.testBackupSystem();
        await this.testIncidentManagement();
        
        this.generateReport();
    }

    async testSecurityTraining() {
        console.log('üìö Test du Syst√®me de Formation S√©curit√©...');
        
        // Test du module de formation
        const trainingModule = fs.existsSync('./lib/security-training.ts');
        this.addTest('Module de formation', trainingModule, 'Syst√®me de formation s√©curit√©');
        
        // Test du r√©pertoire de formation
        const trainingDir = fs.existsSync('./training/');
        this.addTest('R√©pertoire formation', trainingDir, 'R√©pertoire de formation cr√©√©');
        
        // Test de l'initialisation
        try {
            const trainingContent = fs.readFileSync('./lib/security-training.ts', 'utf8');
            const hasModules = trainingContent.includes('basic-security-001');
            this.addTest('Modules de formation', hasModules, 'Modules de formation initialis√©s');
        } catch (error) {
            this.addTest('Modules de formation', false, 'Erreur lors de la lecture du module');
        }
    }

    async testBusinessContinuity() {
        console.log('üîÑ Test du Syst√®me de Continuit√© d\'Activit√©...');
        
        // Test du module de continuit√©
        const continuityModule = fs.existsSync('./lib/business-continuity.ts');
        this.addTest('Module continuit√©', continuityModule, 'Syst√®me de continuit√© d\'activit√©');
        
        // Test du r√©pertoire de continuit√©
        const continuityDir = fs.existsSync('./business-continuity/');
        this.addTest('R√©pertoire continuit√©', continuityDir, 'R√©pertoire de continuit√© cr√©√©');
        
        // Test du contenu du module
        try {
            const continuityContent = fs.readFileSync('./lib/business-continuity.ts', 'utf8');
            const hasProcesses = continuityContent.includes('auth-system');
            this.addTest('Processus m√©tier', hasProcesses, 'Processus m√©tier d√©finis');
            
            const hasPlans = continuityContent.includes('drp-cyber-attack');
            this.addTest('Plans de reprise', hasPlans, 'Plans de reprise d\'activit√©');
        } catch (error) {
            this.addTest('Contenu continuit√©', false, 'Erreur lors de la lecture du module');
        }
    }

    async testOrganizationSecurity() {
        console.log('üè¢ Test de l\'Organisation de la S√©curit√©...');
        
        // Test de la documentation d'organisation
        const orgDoc = fs.existsSync('./docs/ORGANIZATION_SECURITY.md');
        this.addTest('Documentation organisation', orgDoc, 'Documentation d\'organisation de la s√©curit√©');
        
        // Test du contenu de la documentation
        if (orgDoc) {
            try {
                const orgContent = fs.readFileSync('./docs/ORGANIZATION_SECURITY.md', 'utf8');
                const hasStructure = orgContent.includes('Structure Organisationnelle');
                this.addTest('Structure organisationnelle', hasStructure, 'Structure organisationnelle document√©e');
                
                const hasEscalation = orgContent.includes('Proc√©dures d\'Escalade');
                this.addTest('Proc√©dures d\'escalade', hasEscalation, 'Proc√©dures d\'escalade d√©finies');
                
                const hasContacts = orgContent.includes('Contacts d\'Urgence');
                this.addTest('Contacts d\'urgence', hasContacts, 'Contacts d\'urgence document√©s');
            } catch (error) {
                this.addTest('Contenu organisation', false, 'Erreur lors de la lecture de la documentation');
            }
        }
    }

    async testEncryption() {
        console.log('üîê Test du Syst√®me de Chiffrement...');
        
        // Test du module de chiffrement
        const encryptionModule = fs.existsSync('./lib/encryption.ts');
        this.addTest('Module de chiffrement', encryptionModule, 'Syst√®me de chiffrement AES-256-GCM');
        
        // Test du contenu du module
        if (encryptionModule) {
            try {
                const encryptionContent = fs.readFileSync('./lib/encryption.ts', 'utf8');
                const hasAES = encryptionContent.includes('aes-256-gcm');
                this.addTest('Chiffrement AES-256-GCM', hasAES, 'Algorithme AES-256-GCM impl√©ment√©');
                
                const hasKeyManagement = encryptionContent.includes('generateKey');
                this.addTest('Gestion des cl√©s', hasKeyManagement, 'Gestion s√©curis√©e des cl√©s');
            } catch (error) {
                this.addTest('Contenu chiffrement', false, 'Erreur lors de la lecture du module');
            }
        }
    }

    async testBackupSystem() {
        console.log('üíæ Test du Syst√®me de Sauvegarde...');
        
        // Test du module de sauvegarde
        const backupModule = fs.existsSync('./lib/backup.ts');
        this.addTest('Module de sauvegarde', backupModule, 'Syst√®me de sauvegarde automatique');
        
        // Test du r√©pertoire de sauvegarde
        const backupDir = fs.existsSync('./backups/');
        this.addTest('R√©pertoire de sauvegarde', backupDir, 'R√©pertoire de sauvegarde cr√©√©');
        
        // Test du contenu du module
        if (backupModule) {
            try {
                const backupContent = fs.readFileSync('./lib/backup.ts', 'utf8');
                const hasAutomated = backupContent.includes('automated');
                this.addTest('Sauvegarde automatis√©e', hasAutomated, 'Sauvegarde automatis√©e configur√©e');
                
                const hasEncryption = backupContent.includes('encrypt');
                this.addTest('Chiffrement des sauvegardes', hasEncryption, 'Sauvegardes chiffr√©es');
            } catch (error) {
                this.addTest('Contenu sauvegarde', false, 'Erreur lors de la lecture du module');
            }
        }
    }

    async testIncidentManagement() {
        console.log('üö® Test du Syst√®me de Gestion d\'Incidents...');
        
        // Test du module de gestion d'incidents
        const incidentModule = fs.existsSync('./lib/incident-management.ts');
        this.addTest('Module d\'incidents', incidentModule, 'Syst√®me de gestion d\'incidents');
        
        // Test du r√©pertoire d'incidents
        const incidentDir = fs.existsSync('./incidents/');
        this.addTest('R√©pertoire d\'incidents', incidentDir, 'R√©pertoire d\'incidents cr√©√©');
        
        // Test du contenu du module
        if (incidentModule) {
            try {
                const incidentContent = fs.readFileSync('./lib/incident-management.ts', 'utf8');
                const hasSeverity = incidentContent.includes('CRITICAL');
                this.addTest('Niveaux de s√©v√©rit√©', hasSeverity, 'Niveaux de s√©v√©rit√© d√©finis');
                
                const hasWorkflow = incidentContent.includes('workflow');
                this.addTest('Workflow d\'incidents', hasWorkflow, 'Workflow de gestion d\'incidents');
            } catch (error) {
                this.addTest('Contenu incidents', false, 'Erreur lors de la lecture du module');
            }
        }
    }

    addTest(name, passed, description) {
        this.results.total++;
        
        if (passed) {
            this.results.passed++;
            console.log(`  ‚úÖ ${name}: ${description}`);
        } else {
            this.results.failed++;
            console.log(`  ‚ùå ${name}: ${description}`);
        }
        
        this.results.details.push({
            name,
            passed,
            description
        });
    }

    generateReport() {
        console.log('\nüìä RAPPORT DE TEST DES NOUVELLES FONCTIONNALIT√âS');
        console.log('=' .repeat(55));
        
        const successRate = Math.round((this.results.passed / this.results.total) * 100);
        
        console.log(`\nüéØ Taux de succ√®s: ${successRate}%`);
        console.log(`üìà Tests r√©ussis: ${this.results.passed}/${this.results.total}`);
        
        if (this.results.failed > 0) {
            console.log('\n‚ùå Tests √©chou√©s:');
            this.results.details
                .filter(test => !test.passed)
                .forEach(test => {
                    console.log(`  - ${test.name}: ${test.description}`);
                });
        }
        
        console.log('\nüìã Fonctionnalit√©s test√©es:');
        console.log('  ‚úÖ Syst√®me de formation s√©curit√©');
        console.log('  ‚úÖ Syst√®me de continuit√© d\'activit√©');
        console.log('  ‚úÖ Organisation de la s√©curit√©');
        console.log('  ‚úÖ Syst√®me de chiffrement');
        console.log('  ‚úÖ Syst√®me de sauvegarde');
        console.log('  ‚úÖ Gestion d\'incidents');
        
        if (successRate === 100) {
            console.log('\nüéâ TOUTES LES FONCTIONNALIT√âS OP√âRATIONNELLES !');
        } else {
            console.log('\n‚ö†Ô∏è  Certaines fonctionnalit√©s n√©cessitent des ajustements');
        }
        
        this.saveReport();
    }

    saveReport() {
        const report = {
            timestamp: new Date().toISOString(),
            successRate: Math.round((this.results.passed / this.results.total) * 100),
            total: this.results.total,
            passed: this.results.passed,
            failed: this.results.failed,
            details: this.results.details
        };
        
        const reportPath = path.join(__dirname, '../new-features-test-report.json');
        fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
        
        console.log(`\nüíæ Rapport sauvegard√©: ${reportPath}`);
    }
}

async function main() {
    const tester = new NewFeaturesTester();
    await tester.runAllTests();
}

if (require.main === module) {
    main().catch(console.error);
}

module.exports = NewFeaturesTester; 