-- =====================================================
-- NETTOYAGE COMPLET DES R√âF√âRENCES √Ä TemporarySimulationSession
-- Date: 2025-01-31
-- Description: Supprimer toutes les r√©f√©rences √† la table obsol√®te TemporarySimulationSession
-- =====================================================

-- √âTAPE 1: SUPPRIMER TOUS LES TRIGGERS QUI R√âF√âRENCENT TemporarySimulationSession
DO $$
DECLARE
    trigger_record RECORD;
BEGIN
    RAISE NOTICE '=== SUPPRESSION DES TRIGGERS OBSOL√àTES ===';
    
    -- Supprimer tous les triggers qui pourraient r√©f√©rencer TemporarySimulationSession
    FOR trigger_record IN 
        SELECT tgname, tgrelid::regclass as table_name
        FROM pg_trigger 
        WHERE tgname LIKE '%temporary%' OR tgname LIKE '%session%' OR tgname LIKE '%cleanup%'
    LOOP
        RAISE NOTICE 'Suppression du trigger % sur la table %', trigger_record.tgname, trigger_record.table_name;
        EXECUTE format('DROP TRIGGER IF EXISTS %I ON %s', trigger_record.tgname, trigger_record.table_name);
    END LOOP;
END $$;

-- √âTAPE 2: SUPPRIMER TOUTES LES FONCTIONS QUI R√âF√âRENCENT TemporarySimulationSession
DO $$
DECLARE
    function_record RECORD;
BEGIN
    RAISE NOTICE '=== SUPPRESSION DES FONCTIONS OBSOL√àTES ===';
    
    -- Supprimer toutes les fonctions qui pourraient r√©f√©rencer TemporarySimulationSession
    FOR function_record IN 
        SELECT proname, prosrc
        FROM pg_proc 
        WHERE prosrc LIKE '%TemporarySimulationSession%' 
           OR prosrc LIKE '%simulations_unified%'
           OR proname LIKE '%cleanup%'
           OR proname LIKE '%temporary%'
    LOOP
        RAISE NOTICE 'Suppression de la fonction %', function_record.proname;
        EXECUTE format('DROP FUNCTION IF EXISTS %I()', function_record.proname);
    END LOOP;
END $$;

-- √âTAPE 3: SUPPRIMER LES TRIGGERS SP√âCIFIQUES (AVANT LES FONCTIONS)
DROP TRIGGER IF EXISTS cleanup_expired_sessions_trigger ON "TemporarySimulationSession";
DROP TRIGGER IF EXISTS trigger_cleanup_expired_data ON simulations;
DROP TRIGGER IF EXISTS trigger_cleanup_expired_data ON "Client";
DROP TRIGGER IF EXISTS cleanup_expired_data_trigger ON simulations;

-- √âTAPE 4: SUPPRIMER LES FONCTIONS SP√âCIFIQUES (APR√àS LES TRIGGERS)
DROP FUNCTION IF EXISTS cleanup_expired_sessions() CASCADE;
DROP FUNCTION IF EXISTS trigger_cleanup_expired_data() CASCADE;
DROP FUNCTION IF EXISTS trigger_cleanup_expired_sessions() CASCADE;

-- √âTAPE 5: V√âRIFICATION
DO $$
BEGIN
    RAISE NOTICE '=== V√âRIFICATION DU NETTOYAGE ===';
    
    -- V√©rifier qu'il n'y a plus de triggers probl√©matiques
    IF NOT EXISTS (
        SELECT 1 FROM pg_trigger 
        WHERE tgname LIKE '%cleanup%' OR tgname LIKE '%temporary%'
    ) THEN
        RAISE NOTICE '‚úÖ Aucun trigger probl√©matique trouv√©';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Il reste des triggers potentiellement probl√©matiques';
    END IF;
    
    -- V√©rifier qu'il n'y a plus de fonctions probl√©matiques
    IF NOT EXISTS (
        SELECT 1 FROM pg_proc 
        WHERE prosrc LIKE '%TemporarySimulationSession%' OR prosrc LIKE '%simulations_unified%'
    ) THEN
        RAISE NOTICE '‚úÖ Aucune fonction probl√©matique trouv√©e';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è Il reste des fonctions potentiellement probl√©matiques';
    END IF;
    
END $$;

-- √âTAPE 6: R√âSUM√â
DO $$
BEGIN
    RAISE NOTICE '=== R√âSUM√â DU NETTOYAGE ===';
    RAISE NOTICE '';
    RAISE NOTICE '‚úÖ Tous les triggers obsol√®tes supprim√©s';
    RAISE NOTICE '‚úÖ Toutes les fonctions obsol√®tes supprim√©es';
    RAISE NOTICE '‚úÖ R√©f√©rences √† TemporarySimulationSession nettoy√©es';
    RAISE NOTICE '';
    RAISE NOTICE 'üîß Le simulateur devrait maintenant fonctionner sans erreur';
END $$; 