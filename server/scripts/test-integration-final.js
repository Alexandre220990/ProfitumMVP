const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://gvvlsgtubqfxdztldunj.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseKey) {
  console.error('‚ùå Erreur: SUPABASE_SERVICE_ROLE_KEY manquante');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üß™ Test d\'int√©gration finale...');
console.log(`üì° Connexion √†: ${supabaseUrl}`);

// Fonction pour tester les assignations
async function testAssignments() {
  console.log('\nüìã Test des assignations expert/client:');
  
  try {
    const { data, error } = await supabase
      .from('v_expert_assignments')
      .select('*')
      .limit(5);
    
    if (error) {
      console.log(`  ‚ùå Erreur: ${error.message}`);
      return false;
    }
    
    console.log(`  ‚úÖ ${data.length} assignations trouv√©es`);
    if (data.length > 0) {
      console.log('    Exemple:', {
        expert_name: data[0].expert_name,
        client_name: data[0].client_name,
        produit_nom: data[0].produit_nom,
        statut: data[0].statut
      });
    }
    return true;
  } catch (err) {
    console.log(`  ‚ùå Exception: ${err.message}`);
    return false;
  }
}

// Fonction pour tester les messages
async function testMessages() {
  console.log('\nüí¨ Test de la messagerie:');
  
  try {
    const { data, error } = await supabase
      .from('v_messages_with_users')
      .select('*')
      .limit(5);
    
    if (error) {
      console.log(`  ‚ùå Erreur: ${error.message}`);
      return false;
    }
    
    console.log(`  ‚úÖ ${data.length} messages trouv√©s`);
    if (data.length > 0) {
      console.log('    Exemple:', {
        sender_name: data[0].sender_name,
        sender_type: data[0].sender_type,
        content: data[0].content?.substring(0, 50) + '...'
      });
    }
    return true;
  } catch (err) {
    console.log(`  ‚ùå Exception: ${err.message}`);
    return false;
  }
}

// Fonction pour tester les statistiques
async function testStatistics() {
  console.log('\nüìä Test des statistiques:');
  
  try {
    const { data, error } = await supabase
      .rpc('get_assignment_statistics');
    
    if (error) {
      console.log(`  ‚ùå Erreur: ${error.message}`);
      return false;
    }
    
    console.log(`  ‚úÖ ${data.length} statistiques calcul√©es`);
    data.forEach(stat => {
      console.log(`    ${stat.statut}: ${stat.count} (${stat.percentage}%)`);
    });
    return true;
  } catch (err) {
    console.log(`  ‚ùå Exception: ${err.message}`);
    return false;
  }
}

// Fonction pour tester les rapports
async function testReports() {
  console.log('\nüìà Test des rapports:');
  
  try {
    const { data, error } = await supabase
      .from('v_assignment_reports')
      .select('*')
      .limit(5);
    
    if (error) {
      console.log(`  ‚ùå Erreur: ${error.message}`);
      return false;
    }
    
    console.log(`  ‚úÖ ${data.length} rapports g√©n√©r√©s`);
    if (data.length > 0) {
      console.log('    Exemple:', {
        month: data[0].month,
        category: data[0].category,
        statut: data[0].statut,
        count: data[0].count
      });
    }
    return true;
  } catch (err) {
    console.log(`  ‚ùå Exception: ${err.message}`);
    return false;
  }
}

// Fonction pour tester les produits √©ligibles
async function testProducts() {
  console.log('\nüè∑Ô∏è Test des produits √©ligibles:');
  
  try {
    const { data, error } = await supabase
      .from('ProduitEligible')
      .select('nom, category, active')
      .limit(5);
    
    if (error) {
      console.log(`  ‚ùå Erreur: ${error.message}`);
      return false;
    }
    
    console.log(`  ‚úÖ ${data.length} produits trouv√©s`);
    data.forEach(product => {
      console.log(`    ${product.nom} (${product.category}) - ${product.active ? 'Actif' : 'Inactif'}`);
    });
    return true;
  } catch (err) {
    console.log(`  ‚ùå Exception: ${err.message}`);
    return false;
  }
}

// Fonction pour afficher le r√©sum√© final
function displayFinalSummary(results) {
  console.log('\nüéØ R√âSUM√â FINAL:');
  console.log('=================');
  
  const totalTests = Object.keys(results).length;
  const passedTests = Object.values(results).filter(r => r).length;
  const failedTests = totalTests - passedTests;
  
  console.log(`üìä Tests totaux: ${totalTests}`);
  console.log(`‚úÖ R√©ussis: ${passedTests}`);
  console.log(`‚ùå √âchou√©s: ${failedTests}`);
  console.log(`üìà Taux de r√©ussite: ${Math.round((passedTests / totalTests) * 100)}%`);
  
  console.log('\nüéâ √âTAT DU SYST√àME:');
  console.log('==================');
  
  if (failedTests === 0) {
    console.log('üöÄ SYST√àME 100% OP√âRATIONNEL !');
    console.log('‚úÖ Migration compl√®te');
    console.log('‚úÖ Base de donn√©es optimis√©e');
    console.log('‚úÖ Vues et fonctions cr√©√©es');
    console.log('‚úÖ RLS activ√©');
    console.log('‚úÖ Donn√©es coh√©rentes');
    console.log('');
    console.log('üéØ Pr√™t pour le dashboard admin !');
  } else {
    console.log('‚ö†Ô∏è SYST√àME PARTIELLEMENT OP√âRATIONNEL');
    console.log('‚ùå Certains tests ont √©chou√©');
    console.log('üîß V√©rification requise');
  }
}

// Fonction principale
async function main() {
  const results = {};
  
  try {
    console.log('üß™ D√©marrage du test d\'int√©gration finale...\n');
    
    // 1. Tester les assignations
    results.assignments = await testAssignments();
    
    // 2. Tester les messages
    results.messages = await testMessages();
    
    // 3. Tester les statistiques
    results.statistics = await testStatistics();
    
    // 4. Tester les rapports
    results.reports = await testReports();
    
    // 5. Tester les produits
    results.products = await testProducts();
    
    // 6. Afficher le r√©sum√© final
    displayFinalSummary(results);
    
    console.log('\nüéâ Test d\'int√©gration termin√© !');
    console.log('');
    console.log('üìã Prochaines √©tapes:');
    if (Object.values(results).every(r => r)) {
      console.log('1. D√©marrer le dashboard admin: node scripts/start-dashboard-admin.js');
      console.log('2. Acc√©der √†: http://localhost:5173/admin');
      console.log('3. Tester les fonctionnalit√©s');
    } else {
      console.log('1. V√©rifier les erreurs ci-dessus');
      console.log('2. Corriger les probl√®mes');
      console.log('3. Relancer le test');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test d\'int√©gration:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script
main(); 