require('dotenv/config');
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement manquantes');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkAllSimulationTables() {
    console.log('üîç V√âRIFICATION COMPL√àTE DES TABLES DE SIMULATION');
    console.log('================================================\n');

    // Liste de toutes les tables impliqu√©es dans le processus de simulation
    const simulationTables = [
        'Client',
        'Simulation', 
        'SimulatorSession',
        'SimulatorEligibility',
        'SimulatorResponse',
        'ClientProduitEligible',
        'ProduitEligible',
        'TICPESimulationResults',
        'TemporarySimulationSession'
    ];

    try {
        for (const tableName of simulationTables) {
            console.log(`üìã V√©rification de la table: ${tableName}`);
            
            try {
                // V√©rifier si la table existe et compter les enregistrements
                const { data, error, count } = await supabase
                    .from(tableName)
                    .select('*', { count: 'exact', head: true });

                if (error) {
                    console.log(`‚ùå Table ${tableName}: ${error.message}`);
                } else {
                    console.log(`‚úÖ Table ${tableName}: ${count} enregistrements`);
                }
            } catch (err) {
                console.log(`‚ùå Table ${tableName}: Erreur d'acc√®s`);
            }
        }

        console.log('\nüîç ANALYSE D√âTAILL√âE DU PROCESSUS DE SIMULATION\n');

        // 1. V√©rifier les sessions de simulateur
        console.log('üìã 1. Sessions de simulateur:');
        const { data: sessions, error: sessionsError } = await supabase
            .from('SimulatorSession')
            .select('status, count')
            .select('status')
            .limit(100);

        if (sessionsError) {
            console.error('‚ùå Erreur sessions:', sessionsError);
        } else {
            const statusCount = {};
            sessions.forEach(s => {
                statusCount[s.status] = (statusCount[s.status] || 0) + 1;
            });
            console.log('‚úÖ Statuts des sessions:', statusCount);
        }

        // 2. V√©rifier les r√©sultats d'√©ligibilit√©
        console.log('\nüìã 2. R√©sultats d\'√©ligibilit√©:');
        const { data: eligibilities, error: eligibilitiesError } = await supabase
            .from('SimulatorEligibility')
            .select('produit_id, eligibility_score')
            .limit(100);

        if (eligibilitiesError) {
            console.error('‚ùå Erreur √©ligibilit√©:', eligibilitiesError);
        } else {
            const productCount = {};
            eligibilities.forEach(e => {
                productCount[e.produit_id] = (productCount[e.produit_id] || 0) + 1;
            });
            console.log('‚úÖ Produits √©valu√©s:', productCount);
        }

        // 3. V√©rifier les clients avec produits √©ligibles
        console.log('\nüìã 3. Clients avec produits √©ligibles:');
        const { data: clientProducts, error: clientProductsError } = await supabase
            .from('ClientProduitEligible')
            .select(`
                clientId,
                statut,
                Client (
                    email
                )
            `)
            .limit(100);

        if (clientProductsError) {
            console.error('‚ùå Erreur client produits:', clientProductsError);
        } else {
            const clientCount = {};
            clientProducts.forEach(cp => {
                const email = cp.Client?.email || 'unknown';
                clientCount[email] = (clientCount[email] || 0) + 1;
            });
            console.log('‚úÖ Clients avec produits:', Object.keys(clientCount).length);
            console.log('   D√©tail:', clientCount);
        }

        // 4. V√©rifier la table Simulation (si elle existe)
        console.log('\nüìã 4. Table Simulation:');
        try {
            const { data: simulations, error: simulationsError } = await supabase
                .from('Simulation')
                .select('*')
                .limit(10);

            if (simulationsError) {
                console.log('‚ùå Erreur table Simulation:', simulationsError.message);
            } else {
                console.log(`‚úÖ Table Simulation: ${simulations.length} enregistrements`);
                if (simulations.length > 0) {
                    console.log('   Structure:', Object.keys(simulations[0]));
                }
            }
        } catch (err) {
            console.log('‚ùå Table Simulation: N\'existe pas ou erreur d\'acc√®s');
        }

        // 5. V√©rifier les r√©sultats TICPE
        console.log('\nüìã 5. R√©sultats TICPE:');
        try {
            const { data: ticpeResults, error: ticpeError } = await supabase
                .from('TICPESimulationResults')
                .select('*')
                .limit(10);

            if (ticpeError) {
                console.log('‚ùå Erreur r√©sultats TICPE:', ticpeError.message);
            } else {
                console.log(`‚úÖ R√©sultats TICPE: ${ticpeResults.length} enregistrements`);
            }
        } catch (err) {
            console.log('‚ùå Table TICPESimulationResults: N\'existe pas ou erreur d\'acc√®s');
        }

        // 6. Analyse du flux de donn√©es
        console.log('\nüîç ANALYSE DU FLUX DE DONN√âES\n');

        // V√©rifier les sessions migr√©es
        const { data: migratedSessions, error: migratedError } = await supabase
            .from('SimulatorSession')
            .select('metadata')
            .eq('status', 'migrated')
            .limit(10);

        if (migratedError) {
            console.error('‚ùå Erreur sessions migr√©es:', migratedError);
        } else {
            console.log(`üìã Sessions migr√©es: ${migratedSessions.length}`);
            migratedSessions.forEach(session => {
                const migratedTo = session.metadata?.migrated_to_client;
                if (migratedTo) {
                    console.log(`   ‚Üí Migr√©e vers client: ${migratedTo}`);
                }
            });
        }

        console.log('\n‚úÖ V√©rification termin√©e');

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error);
    }
}

checkAllSimulationTables(); 