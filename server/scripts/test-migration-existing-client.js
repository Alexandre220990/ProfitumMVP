require('dotenv/config');
const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement manquantes');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testMigrationExistingClient() {
    const clientEmail = 'test2@test.fr';
    
    console.log('üîß TEST MIGRATION VERS CLIENT EXISTANT');
    console.log('Client Email:', clientEmail);
    console.log('=====================================\n');

    try {
        // 1. V√©rifier que le client existe
        console.log('üìã V√©rification du client...');
        const { data: client, error: clientError } = await supabase
            .from('Client')
            .select('*')
            .eq('email', clientEmail)
            .single();

        if (clientError) {
            console.error('‚ùå Client non trouv√©:', clientError);
            return;
        }
        console.log('‚úÖ Client trouv√©:', client.id);

        // 2. Trouver une session compl√©t√©e avec des r√©sultats d'√©ligibilit√©
        console.log('\nüìã Recherche d\'une session compl√©t√©e...');
        const { data: sessions, error: sessionsError } = await supabase
            .from('SimulatorSession')
            .select('*')
            .eq('status', 'completed')
            .order('created_at', { ascending: false })
            .limit(5);

        if (sessionsError) {
            console.error('‚ùå Erreur sessions:', sessionsError);
            return;
        }

        if (!sessions || sessions.length === 0) {
            console.log('‚ÑπÔ∏è  Aucune session compl√©t√©e trouv√©e');
            return;
        }

        console.log('‚úÖ Sessions compl√©t√©es trouv√©es:', sessions.length);

        // 3. V√©rifier les r√©sultats d'√©ligibilit√© pour chaque session
        for (const session of sessions) {
            console.log(`\nüìã V√©rification session: ${session.session_token.substring(0, 8)}...`);
            
            const { data: eligibilities, error: eligibilitiesError } = await supabase
                .from('SimulatorEligibility')
                .select('*')
                .eq('session_id', session.id);

            if (eligibilitiesError) {
                console.error('‚ùå Erreur √©ligibilit√©:', eligibilitiesError);
                continue;
            }

            if (eligibilities && eligibilities.length > 0) {
                console.log(`‚úÖ ${eligibilities.length} r√©sultats d'√©ligibilit√© trouv√©s`);
                
                // 4. Tester la migration avec cette session
                console.log('üîÑ Test de migration...');
                const { data: migrationResult, error: migrationError } = await supabase
                    .rpc('migrate_simulator_to_existing_client', {
                        p_session_token: session.session_token,
                        p_client_email: clientEmail
                    });

                if (migrationError) {
                    console.error('‚ùå Erreur migration:', migrationError);
                } else {
                    console.log('‚úÖ Migration r√©ussie:', migrationResult);
                    
                    // 5. V√©rifier les produits √©ligibles apr√®s migration
                    console.log('\nüìã V√©rification des produits √©ligibles apr√®s migration...');
                    const { data: finalProducts, error: finalError } = await supabase
                        .from('ClientProduitEligible')
                        .select(`
                            *,
                            ProduitEligible (
                                nom
                            )
                        `)
                        .eq('clientId', client.id);

                    if (finalError) {
                        console.error('‚ùå Erreur v√©rification finale:', finalError);
                    } else {
                        console.log('‚úÖ Produits √©ligibles du client:');
                        finalProducts.forEach(p => {
                            console.log(`  - ${p.ProduitEligible.nom} (${p.statut}) - Score: ${p.tauxFinal}%`);
                        });
                    }
                    
                    // Sortir apr√®s la premi√®re migration r√©ussie
                    break;
                }
            } else {
                console.log('‚ÑπÔ∏è  Aucun r√©sultat d\'√©ligibilit√© pour cette session');
            }
        }

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error);
    }
}

testMigrationExistingClient(); 