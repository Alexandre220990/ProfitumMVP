const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

async function insertTICPEData() {
  console.log('üöÄ Insertion des donn√©es TICPE optimis√©es...\n');

  try {
    // 1. Insertion des secteurs d'activit√©
    console.log('1Ô∏è‚É£ Insertion des secteurs d\'activit√©...');
    const sectors = [
      {
        sector_name: 'Transport routier de marchandises',
        sector_code: 'TRM',
        eligibility_clarity: 5,
        documentation_quality: 5,
        recovery_rate: 5,
        performance_score: 5,
        description: 'Transport de marchandises avec v√©hicules > 7,5 tonnes',
        advantages: [
          'Entreprises bien structur√©es administrativement',
          'Utilisation fr√©quente de cartes carburant professionnelles',
          'D√©clarations semestrielles ou automatis√©es'
        ],
        challenges: []
      },
      {
        sector_name: 'Transport routier de voyageurs',
        sector_code: 'TRV',
        eligibility_clarity: 5,
        documentation_quality: 5,
        recovery_rate: 5,
        performance_score: 5,
        description: 'Transport de voyageurs avec autocars et lignes',
        advantages: [
          'Majoritairement des soci√©t√©s structur√©es',
          'Forte tra√ßabilit√© des pleins et des usages',
          'Parfois publiques (DSP)'
        ],
        challenges: []
      },
      {
        sector_name: 'Taxi / VTC',
        sector_code: 'TAXI_VTC',
        eligibility_clarity: 5,
        documentation_quality: 4,
        recovery_rate: 4,
        performance_score: 4,
        description: 'Transport de personnes avec v√©hicules affect√©s exclusivement',
        advantages: [
          'Simplicit√© des volumes',
          'Cartes carburant = preuve d\'achat + preuve d\'usage pro'
        ],
        challenges: [
          'Si paiements en esp√®ces ou CB non pro : pertes fr√©quentes'
        ]
      },
      {
        sector_name: 'Secteur Agricole',
        sector_code: 'AGRICULTURE',
        eligibility_clarity: 3,
        documentation_quality: 3,
        recovery_rate: 3,
        performance_score: 3,
        description: 'Agriculture avec tracteurs et engins utilisant du GNR',
        advantages: [
          'Tr√®s bon potentiel de r√©cup√©ration (gros volumes)'
        ],
        challenges: [
          'Documents parfois mal conserv√©s',
          'Absence de comptabilit√© carburant rigoureuse',
          'Difficult√© √† distinguer les usages priv√©s/pro',
          'Agriculteurs peu inform√©s sur la proc√©dure'
        ]
      },
      {
        sector_name: 'BTP / Travaux publics',
        sector_code: 'BTP',
        eligibility_clarity: 3,
        documentation_quality: 2,
        recovery_rate: 2,
        performance_score: 2,
        description: 'BTP avec engins de chantier utilisant du GNR',
        advantages: [
          'Tr√®s bons montants potentiels (>10 000‚Ç¨/an)'
        ],
        challenges: [
          'Manque de centralisation des factures',
          'Plusieurs fournisseurs (d√©p√¥t, cuves, stations) = complexit√©',
          'Confusion fr√©quente entre GNR et gazole routier',
          'Faible automatisation'
        ]
      }
    ];

    for (const sector of sectors) {
      const { error } = await supabase
        .from('TICPESectors')
        .upsert(sector, { onConflict: 'sector_code' });
      
      if (error) {
        console.log(`‚ö†Ô∏è Erreur secteur ${sector.sector_code}: ${error.message}`);
      } else {
        console.log(`‚úÖ Secteur ${sector.sector_code} ins√©r√©`);
      }
    }

    // 2. Insertion des taux de carburant
    console.log('\n2Ô∏è‚É£ Insertion des taux de carburant...');
    const rates = [
      {
        fuel_type: 'Gazole professionnel',
        fuel_code: 'GAZOLE_PRO',
        rate_2024: 0.177,
        rate_2023: 0.175,
        rate_2022: 0.173,
        description: 'Gazole routier pour v√©hicules professionnels',
        eligibility_conditions: 'V√©hicules > 7,5 tonnes, usage professionnel'
      },
      {
        fuel_type: 'Gazole Non Routier (GNR)',
        fuel_code: 'GNR',
        rate_2024: 0.150,
        rate_2023: 0.148,
        rate_2022: 0.146,
        description: 'Gazole pour engins non routiers',
        eligibility_conditions: 'Engins agricoles, BTP, usage professionnel'
      },
      {
        fuel_type: 'Essence',
        fuel_code: 'ESSENCE',
        rate_2024: 0.150,
        rate_2023: 0.148,
        rate_2022: 0.146,
        description: 'Essence pour v√©hicules professionnels',
        eligibility_conditions: 'V√©hicules affect√©s exclusivement √† l\'activit√©'
      },
      {
        fuel_type: 'GPL',
        fuel_code: 'GPL',
        rate_2024: 0.080,
        rate_2023: 0.079,
        rate_2022: 0.078,
        description: 'Gaz de p√©trole liqu√©fi√©',
        eligibility_conditions: 'V√©hicules √©quip√©s GPL, usage professionnel'
      }
    ];

    for (const rate of rates) {
      const { error } = await supabase
        .from('TICPERates')
        .upsert(rate, { onConflict: 'fuel_code' });
      
      if (error) {
        console.log(`‚ö†Ô∏è Erreur taux ${rate.fuel_code}: ${error.message}`);
      } else {
        console.log(`‚úÖ Taux ${rate.fuel_code} ins√©r√©`);
      }
    }

    // 3. Insertion des types de v√©hicules
    console.log('\n3Ô∏è‚É£ Insertion des types de v√©hicules...');
    const vehicleTypes = [
      {
        vehicle_type: 'Camions de plus de 7,5 tonnes',
        vehicle_code: 'CAMION_7_5T_PLUS',
        weight_min: 7.5,
        weight_max: null,
        eligibility_coefficient: 1.0,
        description: 'V√©hicules lourds pour transport de marchandises',
        usage_conditions: 'Usage professionnel routier',
        documentation_requirements: [
          'Carte grise avec PTAC > 7,5 tonnes',
          'Chronotachygraphe obligatoire',
          'Factures carburant nominatives'
        ]
      },
      {
        vehicle_type: 'Camions de 3,5 √† 7,5 tonnes',
        vehicle_code: 'CAMION_3_5_7_5T',
        weight_min: 3.5,
        weight_max: 7.5,
        eligibility_coefficient: 0.8,
        description: 'V√©hicules moyens pour transport',
        usage_conditions: 'Usage professionnel routier',
        documentation_requirements: [
          'Carte grise avec PTAC entre 3,5 et 7,5 tonnes',
          'Factures carburant nominatives'
        ]
      },
      {
        vehicle_type: 'V√©hicules utilitaires l√©gers',
        vehicle_code: 'VUL',
        weight_min: 0,
        weight_max: 3.5,
        eligibility_coefficient: 0.6,
        description: 'V√©hicules utilitaires l√©gers',
        usage_conditions: 'Usage professionnel exclusif',
        documentation_requirements: [
          'Carte grise VUL',
          'Factures carburant nominatives',
          'Preuve d\'usage professionnel'
        ]
      },
      {
        vehicle_type: 'Engins de chantier',
        vehicle_code: 'ENGINS_CHANTIER',
        weight_min: 0,
        weight_max: null,
        eligibility_coefficient: 0.9,
        description: 'Engins non routiers pour BTP',
        usage_conditions: 'Usage professionnel sur chantier',
        documentation_requirements: [
          'Certificat d\'immatriculation',
          'Factures GNR',
          'Attestation d\'usage professionnel'
        ]
      },
      {
        vehicle_type: 'Tracteurs agricoles',
        vehicle_code: 'TRACTEURS_AGRICOLE',
        weight_min: 0,
        weight_max: null,
        eligibility_coefficient: 1.0,
        description: 'Tracteurs et engins agricoles',
        usage_conditions: 'Usage agricole professionnel',
        documentation_requirements: [
          'Certificat d\'immatriculation',
          'Factures GNR',
          'Attestation d\'usage agricole'
        ]
      }
    ];

    for (const vehicle of vehicleTypes) {
      const { error } = await supabase
        .from('TICPEVehicleTypes')
        .upsert(vehicle, { onConflict: 'vehicle_code' });
      
      if (error) {
        console.log(`‚ö†Ô∏è Erreur v√©hicule ${vehicle.vehicle_code}: ${error.message}`);
      } else {
        console.log(`‚úÖ V√©hicule ${vehicle.vehicle_code} ins√©r√©`);
      }
    }

    // 4. Insertion des sc√©narios d'usage
    console.log('\n4Ô∏è‚É£ Insertion des sc√©narios d\'usage...');
    const usageScenarios = [
      {
        scenario_name: 'Usage 100% professionnel',
        professional_percentage_min: 100,
        professional_percentage_max: 100,
        coefficient: 1.0,
        description: 'V√©hicule utilis√© exclusivement √† des fins professionnelles',
        conditions: [
          'Aucun usage priv√©',
          'Documentation compl√®te',
          'Tra√ßabilit√© parfaite'
        ]
      },
      {
        scenario_name: 'Usage 80-99% professionnel',
        professional_percentage_min: 80,
        professional_percentage_max: 99,
        coefficient: 0.9,
        description: 'Usage majoritairement professionnel',
        conditions: [
          'Usage priv√© limit√©',
          'Documentation majoritairement compl√®te',
          'Tra√ßabilit√© bonne'
        ]
      },
      {
        scenario_name: 'Usage 60-79% professionnel',
        professional_percentage_min: 60,
        professional_percentage_max: 79,
        coefficient: 0.7,
        description: 'Usage professionnel significatif',
        conditions: [
          'Usage priv√© notable',
          'Documentation partielle',
          'Tra√ßabilit√© moyenne'
        ]
      },
      {
        scenario_name: 'Usage moins de 60% professionnel',
        professional_percentage_min: 0,
        professional_percentage_max: 59,
        coefficient: 0.0,
        description: 'Usage majoritairement priv√©',
        conditions: [
          'Usage priv√© majoritaire',
          'Non √©ligible √† la r√©cup√©ration TICPE'
        ]
      }
    ];

    for (const scenario of usageScenarios) {
      const { error } = await supabase
        .from('TICPEUsageScenarios')
        .upsert(scenario, { onConflict: 'scenario_name' });
      
      if (error) {
        console.log(`‚ö†Ô∏è Erreur sc√©nario ${scenario.scenario_name}: ${error.message}`);
      } else {
        console.log(`‚úÖ Sc√©nario ${scenario.scenario_name} ins√©r√©`);
      }
    }

    // 5. Insertion des benchmarks
    console.log('\n5Ô∏è‚É£ Insertion des benchmarks...');
    
    // R√©cup√©rer les IDs des secteurs
    const { data: sectorData } = await supabase
      .from('TICPESectors')
      .select('id, sector_code');

    const sectorMap = {};
    sectorData?.forEach(sector => {
      sectorMap[sector.sector_code] = sector.id;
    });

    const benchmarks = [
      {
        sector_id: sectorMap['TRM'],
        vehicle_count_min: 5,
        vehicle_count_max: 5,
        fuel_type: 'Gazole professionnel',
        average_recovery: 9000,
        min_recovery: 7000,
        max_recovery: 12000,
        description: 'Transport routier de marchandises - 5 camions > 7,5t',
        sample_size: 150,
        confidence_level: 0.95
      },
      {
        sector_id: sectorMap['TAXI_VTC'],
        vehicle_count_min: 1,
        vehicle_count_max: 1,
        fuel_type: 'Gazole professionnel',
        average_recovery: 1300,
        min_recovery: 1000,
        max_recovery: 1800,
        description: 'Entreprise VTC ou Taxi - 1 v√©hicule',
        sample_size: 200,
        confidence_level: 0.90
      },
      {
        sector_id: sectorMap['AGRICULTURE'],
        vehicle_count_min: 10,
        vehicle_count_max: 10,
        fuel_type: 'GNR',
        average_recovery: 7500,
        min_recovery: 5000,
        max_recovery: 10000,
        description: 'Coop√©rative agricole - 10 tracteurs ou engins GNR',
        sample_size: 80,
        confidence_level: 0.85
      },
      {
        sector_id: sectorMap['BTP'],
        vehicle_count_min: 15,
        vehicle_count_max: 15,
        fuel_type: 'GNR',
        average_recovery: 12000,
        min_recovery: 8000,
        max_recovery: 18000,
        description: 'PME du BTP - 15 engins lourds de chantier',
        sample_size: 60,
        confidence_level: 0.80
      },
      {
        sector_id: sectorMap['TRV'],
        vehicle_count_min: 3,
        vehicle_count_max: 3,
        fuel_type: 'Gazole professionnel',
        average_recovery: 8500,
        min_recovery: 6000,
        max_recovery: 11000,
        description: 'Autocariste r√©gional - 3 autocars interurbains',
        sample_size: 100,
        confidence_level: 0.90
      }
    ];

    for (const benchmark of benchmarks) {
      if (benchmark.sector_id) {
        const { error } = await supabase
          .from('TICPEBenchmarks')
          .insert(benchmark);
        
        if (error) {
          console.log(`‚ö†Ô∏è Erreur benchmark: ${error.message}`);
        } else {
          console.log(`‚úÖ Benchmark ins√©r√©: ${benchmark.description}`);
        }
      }
    }

    // 6. Insertion des indicateurs de maturit√© administrative
    console.log('\n6Ô∏è‚É£ Insertion des indicateurs de maturit√© administrative...');
    const maturityIndicators = [
      {
        indicator_name: 'Cartes carburant professionnelles',
        question_text: 'Disposez-vous de cartes carburant professionnelles ?',
        max_points: 20,
        scoring_rules: {
          'Oui, toutes les stations': 20,
          'Oui, partiellement': 10,
          'Non': 0
        },
        category: 'technology',
        description: 'Utilisation de cartes carburant professionnelles',
        best_practices: [
          'Cartes Total, AS24, ou √©quivalent',
          'Centralisation des achats',
          'Tra√ßabilit√© automatique'
        ]
      },
      {
        indicator_name: 'Factures nominatives',
        question_text: 'Conservez-vous les factures nominatives avec num√©ro d\'immatriculation ?',
        max_points: 20,
        scoring_rules: {
          'Oui, syst√©matiquement': 20,
          'Oui, partiellement': 10,
          'Non': 0
        },
        category: 'documentation',
        description: 'Conservation des factures avec identification v√©hicule',
        best_practices: [
          'Factures avec num√©ro d\'immatriculation',
          'Archivage syst√©matique',
          'Classement par v√©hicule'
        ]
      },
      {
        indicator_name: 'Immatriculation soci√©t√©',
        question_text: 'Vos v√©hicules sont-ils tous immatricul√©s au nom de la soci√©t√© ?',
        max_points: 15,
        scoring_rules: {
          'Oui, 100%': 15,
          'Oui, majoritairement': 10,
          'Non': 0
        },
        category: 'compliance',
        description: 'Propri√©t√© des v√©hicules par la soci√©t√©',
        best_practices: [
          'Carte grise au nom de la soci√©t√©',
          'Aucun v√©hicule personnel',
          'Gestion centralis√©e'
        ]
      },
      {
        indicator_name: 'D√©clarations TICPE',
        question_text: 'Faites-vous d√©j√† une d√©claration semestrielle ou annuelle de TICPE ?',
        max_points: 25,
        scoring_rules: {
          'Oui, r√©guli√®rement': 25,
          'Oui, occasionnellement': 15,
          'Non': 0
        },
        category: 'process',
        description: 'D√©clarations TICPE existantes',
        best_practices: [
          'D√©clarations semestrielles',
          'D√©clarations annuelles',
          'Suivi r√©gulier'
        ]
      }
    ];

    for (const indicator of maturityIndicators) {
      const { error } = await supabase
        .from('TICPEAdminMaturity')
        .upsert(indicator, { onConflict: 'indicator_name' });
      
      if (error) {
        console.log(`‚ö†Ô∏è Erreur indicateur ${indicator.indicator_name}: ${error.message}`);
      } else {
        console.log(`‚úÖ Indicateur ${indicator.indicator_name} ins√©r√©`);
      }
    }

    // 7. Insertion des r√®gles de calcul avanc√©es
    console.log('\n7Ô∏è‚É£ Insertion des r√®gles de calcul avanc√©es...');
    const advancedRules = [
      {
        rule_name: '√âligibilit√© secteur transport',
        rule_type: 'eligibility',
        conditions: {
          'secteur': ['Transport routier de marchandises', 'Transport routier de voyageurs', 'Taxi / VTC']
        },
        calculation_formula: 'score += 30',
        weight: 30,
        description: 'Bonus pour les secteurs transport',
        examples: ['TRM', 'Autocars', 'Taxis']
      },
      {
        rule_name: 'V√©hicules lourds',
        rule_type: 'calculation',
        conditions: {
          'vehicle_type': ['Camions de plus de 7,5 tonnes'],
          'count': { 'min': 1 }
        },
        calculation_formula: 'coefficient = 1.0',
        weight: 25,
        description: 'Coefficient maximum pour v√©hicules lourds',
        examples: ['Camions > 7,5t', 'Semi-remorques']
      },
      {
        rule_name: 'Usage professionnel exclusif',
        rule_type: 'bonus',
        conditions: {
          'professional_percentage': { 'min': 100 }
        },
        calculation_formula: 'bonus = 20%',
        weight: 20,
        description: 'Bonus pour usage 100% professionnel',
        examples: ['V√©hicules de service', 'Flottes d√©di√©es']
      },
      {
        rule_name: 'Documentation compl√®te',
        rule_type: 'bonus',
        conditions: {
          'factures': 'compl√®tes',
          'cartes_carburant': true
        },
        calculation_formula: 'bonus = 15%',
        weight: 15,
        description: 'Bonus pour documentation parfaite',
        examples: ['Cartes carburant', 'Factures nominatives']
      }
    ];

    for (const rule of advancedRules) {
      const { error } = await supabase
        .from('TICPEAdvancedRules')
        .upsert(rule, { onConflict: 'rule_name' });
      
      if (error) {
        console.log(`‚ö†Ô∏è Erreur r√®gle ${rule.rule_name}: ${error.message}`);
      } else {
        console.log(`‚úÖ R√®gle ${rule.rule_name} ins√©r√©e`);
      }
    }

    console.log('\n‚úÖ Toutes les donn√©es TICPE ont √©t√© ins√©r√©es avec succ√®s !');
    console.log('\nüìä R√©sum√© :');
    console.log(`- ${sectors.length} secteurs d'activit√©`);
    console.log(`- ${rates.length} types de carburant`);
    console.log(`- ${vehicleTypes.length} types de v√©hicules`);
    console.log(`- ${usageScenarios.length} sc√©narios d'usage`);
    console.log(`- ${benchmarks.length} benchmarks`);
    console.log(`- ${maturityIndicators.length} indicateurs de maturit√©`);
    console.log(`- ${advancedRules.length} r√®gles de calcul`);

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'insertion des donn√©es TICPE:', error);
  }
}

// Ex√©cution du script
if (require.main === module) {
  insertTICPEData();
}

module.exports = { insertTICPEData }; 