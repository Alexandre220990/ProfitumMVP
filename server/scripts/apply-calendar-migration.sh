#!/bin/bash

# =====================================================
# SCRIPT : Application de la migration Calendrier
# Date : 2025-01-28
# Description : Applique la migration du syst√®me de calendrier avanc√©
# =====================================================

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
MIGRATION_FILE="migrations/20250128_create_calendar_system.sql"
BACKUP_DIR="server/backups/$(date +%Y%m%d_%H%M%S)_before_calendar_migration"
LOG_FILE="server/logs/calendar_migration_$(date +%Y%m%d_%H%M%S).log"

echo -e "${BLUE}=====================================================${NC}"
echo -e "${BLUE}  MIGRATION SYST√àME DE CALENDRIER AVANC√â${NC}"
echo -e "${BLUE}=====================================================${NC}"
echo ""

# V√©rification des pr√©requis
echo -e "${YELLOW}1. V√©rification des pr√©requis...${NC}"

# V√©rifier que le fichier de migration existe
if [ ! -f "$MIGRATION_FILE" ]; then
    echo -e "${RED}‚ùå Fichier de migration non trouv√©: $MIGRATION_FILE${NC}"
    exit 1
fi

# V√©rifier que les variables d'environnement sont d√©finies
if [ -z "$DATABASE_URL" ]; then
    echo -e "${RED}‚ùå Variable d'environnement DATABASE_URL manquante${NC}"
    echo "Assurez-vous que DATABASE_URL est d√©finie"
    exit 1
fi

echo -e "${GREEN}‚úÖ Pr√©requis v√©rifi√©s${NC}"
echo ""

# Cr√©ation du backup
echo -e "${YELLOW}2. Cr√©ation du backup...${NC}"
mkdir -p "$BACKUP_DIR"

# Backup des tables existantes li√©es au calendrier
echo "Cr√©ation du backup des donn√©es existantes..."

# V√©rifier si les tables existent d√©j√† et les sauvegarder
psql "$DATABASE_URL" -c "
DO \$\$
BEGIN
    -- Backup CalendarEvent si elle existe
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'CalendarEvent') THEN
        COPY (SELECT * FROM \"CalendarEvent\") TO '$BACKUP_DIR/calendar_event_backup.csv' WITH CSV HEADER;
        RAISE NOTICE 'Backup CalendarEvent cr√©√©';
    END IF;
    
    -- Backup DossierStep si elle existe
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'DossierStep') THEN
        COPY (SELECT * FROM \"DossierStep\") TO '$BACKUP_DIR/dossier_step_backup.csv' WITH CSV HEADER;
        RAISE NOTICE 'Backup DossierStep cr√©√©';
    END IF;
    
    -- Backup CalendarPreferences si elle existe
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'CalendarPreferences') THEN
        COPY (SELECT * FROM \"CalendarPreferences\") TO '$BACKUP_DIR/calendar_preferences_backup.csv' WITH CSV HEADER;
        RAISE NOTICE 'Backup CalendarPreferences cr√©√©';
    END IF;
END \$\$;
" 2>/dev/null || echo "Aucune table existante √† sauvegarder"

echo -e "${GREEN}‚úÖ Backup cr√©√© dans: $BACKUP_DIR${NC}"
echo ""

# Application de la migration
echo -e "${YELLOW}3. Application de la migration...${NC}"

# Cr√©er le dossier de logs
mkdir -p "$(dirname "$LOG_FILE")"

# Appliquer la migration avec logging
echo "Application de la migration du calendrier..."
psql "$DATABASE_URL" -f "$MIGRATION_FILE" > "$LOG_FILE" 2>&1

# V√©rifier le succ√®s de la migration
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Migration appliqu√©e avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå Erreur lors de l'application de la migration${NC}"
    echo "Consultez le log: $LOG_FILE"
    exit 1
fi

echo ""

# V√©rification post-migration
echo -e "${YELLOW}4. V√©rification post-migration...${NC}"

# V√©rifier que les tables ont √©t√© cr√©√©es
echo "V√©rification des tables cr√©√©es..."

TABLES_TO_CHECK=(
    "CalendarEvent"
    "CalendarEventParticipant"
    "CalendarEventReminder"
    "DossierStep"
    "CalendarPreferences"
    "CalendarEventTemplate"
    "CalendarActivityLog"
)

for table in "${TABLES_TO_CHECK[@]}"; do
    if psql "$DATABASE_URL" -c "SELECT 1 FROM \"$table\" LIMIT 1;" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Table $table cr√©√©e${NC}"
    else
        echo -e "${RED}‚ùå Table $table manquante${NC}"
    fi
done

echo ""

# V√©rification des vues
echo "V√©rification des vues cr√©√©es..."

VIEWS_TO_CHECK=(
    "v_calendar_events_with_participants"
    "v_dossier_steps_with_assignee"
    "v_today_events"
)

for view in "${VIEWS_TO_CHECK[@]}"; do
    if psql "$DATABASE_URL" -c "SELECT 1 FROM \"$view\" LIMIT 1;" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Vue $view cr√©√©e${NC}"
    else
        echo -e "${RED}‚ùå Vue $view manquante${NC}"
    fi
done

echo ""

# Test des fonctionnalit√©s
echo -e "${YELLOW}5. Test des fonctionnalit√©s...${NC}"

# Test d'insertion d'un √©v√©nement de test
echo "Test d'insertion d'un √©v√©nement de test..."

psql "$DATABASE_URL" -c "
INSERT INTO \"CalendarEvent\" (
    title, description, start_date, end_date, type, priority, status, category
) VALUES (
    'Test Migration Calendrier',
    '√âv√©nement de test pour v√©rifier la migration',
    NOW() + INTERVAL '1 hour',
    NOW() + INTERVAL '2 hours',
    'meeting',
    'medium',
    'confirmed',
    'system'
) ON CONFLICT DO NOTHING;
"

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Test d'insertion r√©ussi${NC}"
    
    # Nettoyer l'√©v√©nement de test
    psql "$DATABASE_URL" -c "
    DELETE FROM \"CalendarEvent\" 
    WHERE title = 'Test Migration Calendrier';
    "
    echo "√âv√©nement de test nettoy√©"
else
    echo -e "${RED}‚ùå Test d'insertion √©chou√©${NC}"
fi

echo ""

# R√©sum√© final
echo -e "${BLUE}=====================================================${NC}"
echo -e "${BLUE}  R√âSUM√â DE LA MIGRATION${NC}"
echo -e "${BLUE}=====================================================${NC}"
echo ""
echo -e "${GREEN}‚úÖ Migration termin√©e avec succ√®s!${NC}"
echo ""
echo -e "${YELLOW}Tables cr√©√©es:${NC}"
echo "  ‚Ä¢ CalendarEvent (√âv√©nements du calendrier)"
echo "  ‚Ä¢ CalendarEventParticipant (Participants aux √©v√©nements)"
echo "  ‚Ä¢ CalendarEventReminder (Rappels automatiques)"
echo "  ‚Ä¢ DossierStep (√âtapes de workflow avec √©ch√©ances)"
echo "  ‚Ä¢ CalendarPreferences (Pr√©f√©rences utilisateur)"
echo "  ‚Ä¢ CalendarEventTemplate (Templates d'√©v√©nements)"
echo "  ‚Ä¢ CalendarActivityLog (Logs d'activit√©)"
echo ""
echo -e "${YELLOW}Vues cr√©√©es:${NC}"
echo "  ‚Ä¢ v_calendar_events_with_participants"
echo "  ‚Ä¢ v_dossier_steps_with_assignee"
echo "  ‚Ä¢ v_today_events"
echo ""
echo -e "${YELLOW}Fonctionnalit√©s disponibles:${NC}"
echo "  ‚Ä¢ √âv√©nements collaboratifs avec participants"
echo "  ‚Ä¢ R√©unions en ligne avec URLs"
echo "  ‚Ä¢ √âch√©ances d'√©tapes par dossier"
echo "  ‚Ä¢ Syst√®me de rappels automatiques"
echo "  ‚Ä¢ Templates d'√©v√©nements pr√©d√©finis"
echo "  ‚Ä¢ Pr√©f√©rences utilisateur personnalisables"
echo "  ‚Ä¢ Logs d'activit√© pour audit"
echo ""
echo -e "${YELLOW}Fichiers g√©n√©r√©s:${NC}"
echo "  ‚Ä¢ Backup: $BACKUP_DIR"
echo "  ‚Ä¢ Log: $LOG_FILE"
echo ""
echo -e "${BLUE}Prochaines √©tapes:${NC}"
echo "  1. Tester le composant AdvancedCalendar dans l'interface"
echo "  2. Configurer les pr√©f√©rences utilisateur"
echo "  3. Cr√©er des √©v√©nements de test"
echo "  4. V√©rifier les notifications et rappels"
echo ""
echo -e "${GREEN}üéâ Migration du syst√®me de calendrier termin√©e!${NC}" 