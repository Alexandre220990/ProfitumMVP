#!/usr/bin/env node

/**
 * Script d'ex√©cution de la migration de nomenclature des tables
 * Ex√©cute le script SQL de migration directement via Supabase
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function runMigration() {
  console.log('üöÄ Lancement de la migration de nomenclature des tables...\n');

  // V√©rifier les variables d'environnement
  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.error('‚ùå Variables d\'environnement manquantes:');
    console.error('   - SUPABASE_URL');
    console.error('   - SUPABASE_SERVICE_ROLE_KEY');
    console.error('\nVeuillez configurer votre fichier .env');
    process.exit(1);
  }

  try {
    // Lire le script de migration
    const migrationPath = path.join(__dirname, '../migrations/20250103_unify_table_nomenclature.sql');
    const migrationScript = fs.readFileSync(migrationPath, 'utf8');

    console.log('üìã Script de migration charg√©');
    console.log('‚è≥ Ex√©cution de la migration...\n');

    // Ex√©cuter le script de migration
    const { data, error } = await supabase.rpc('exec_sql', {
      sql: migrationScript
    });

    if (error) {
      // Si exec_sql n'existe pas, utiliser une approche alternative
      console.log('‚ö†Ô∏è  M√©thode alternative utilis√©e...');
      
      // Ex√©cuter les commandes une par une
      const commands = migrationScript.split(';').filter(cmd => cmd.trim());
      
      for (let i = 0; i < commands.length; i++) {
        const command = commands[i].trim();
        if (command && !command.startsWith('--')) {
          console.log(`üìù Ex√©cution commande ${i + 1}/${commands.length}...`);
          
          try {
            const { error: cmdError } = await supabase.rpc('exec_sql', {
              sql: command
            });
            
            if (cmdError) {
              console.log(`   ‚ö†Ô∏è  Commande ignor√©e (peut-√™tre d√©j√† ex√©cut√©e): ${command.substring(0, 50)}...`);
            }
          } catch (e) {
            console.log(`   ‚ö†Ô∏è  Commande ignor√©e: ${e.message}`);
          }
        }
      }
    }

    console.log('\n‚úÖ Migration ex√©cut√©e !');
    console.log('üîç V√©rification des r√©sultats...\n');

    // V√©rifier les r√©sultats
    const { data: clientCount } = await supabase
      .from('Client')
      .select('*', { count: 'exact', head: true });

    const { data: expertCount } = await supabase
      .from('Expert')
      .select('*', { count: 'exact', head: true });

    const { data: documentFileCount } = await supabase
      .from('DocumentFile')
      .select('*', { count: 'exact', head: true });

    console.log('üìä R√©sultats de la migration:');
    console.log('==============================');
    console.log(`‚úÖ Client: ${clientCount || 0} lignes`);
    console.log(`‚úÖ Expert: ${expertCount || 0} lignes`);
    console.log(`‚úÖ DocumentFile: ${documentFileCount || 0} lignes`);

    // V√©rifier que les tables en minuscules n'existent plus
    console.log('\nüîç V√©rification de la suppression des tables minuscules...');
    
    try {
      await supabase.from('client').select('*', { count: 'exact', head: true });
      console.log('‚ùå Table "client" existe encore');
    } catch (e) {
      console.log('‚úÖ Table "client" supprim√©e');
    }

    try {
      await supabase.from('expert').select('*', { count: 'exact', head: true });
      console.log('‚ùå Table "expert" existe encore');
    } catch (e) {
      console.log('‚úÖ Table "expert" supprim√©e');
    }

    try {
      await supabase.from('documentfile').select('*', { count: 'exact', head: true });
      console.log('‚ùå Table "documentfile" existe encore');
    } catch (e) {
      console.log('‚úÖ Table "documentfile" supprim√©e');
    }

    console.log('\nüéâ MIGRATION TERMIN√âE AVEC SUCC√àS !');
    console.log('=====================================');
    console.log('‚úÖ Nomenclature unifi√©e (majuscules uniquement)');
    console.log('‚úÖ Donn√©es migr√©es avec succ√®s');
    console.log('‚úÖ Tables en minuscules supprim√©es');
    console.log('‚úÖ Base de donn√©es nettoy√©e');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error.message);
    console.error('\nüí° Solutions possibles:');
    console.error('   1. V√©rifier les variables d\'environnement');
    console.error('   2. Ex√©cuter manuellement dans Supabase SQL Editor');
    console.error('   3. V√©rifier les permissions de la base de donn√©es');
    process.exit(1);
  }
}

// Ex√©cuter la migration
if (require.main === module) {
  runMigration()
    .then(() => {
      console.log('\n‚úÖ Migration termin√©e');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { runMigration }; 