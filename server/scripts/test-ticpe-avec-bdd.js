#!/usr/bin/env node

/**
 * üß™ TEST TICPE AVEC BASE DE DONN√âES
 * V√©rification de la structure et des calculs
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '../.env' });

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://gvvlstubqfxdzltldunj.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd2dmxzdHVicWZ4ZHpsdGxkdW5qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg2NzE5NzAsImV4cCI6MjA2NDI0Nzk3MH0.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testTICPEAvecBDD() {
  console.log('üß™ TEST TICPE AVEC BASE DE DONN√âES');
  console.log('=' .repeat(50));
  console.log('Date:', new Date().toLocaleString('fr-FR'));
  console.log('');

  try {
    // 1. V√©rifier la structure des questions
    console.log('1Ô∏è‚É£ V√âRIFICATION DE LA STRUCTURE DES QUESTIONS');
    console.log('‚îÄ'.repeat(40));

    const { data: questions, error: questionsError } = await supabase
      .from('QuestionnaireQuestion')
      .select('*')
      .contains('produits_cibles', ['TICPE'])
      .order('question_order', { ascending: true });

    if (questionsError) {
      console.error('‚ùå Erreur chargement questions:', questionsError.message);
      return;
    }

    console.log(`‚úÖ ${questions.length} questions TICPE trouv√©es`);
    
    // Afficher les questions par section
    const questionsBySection = {};
    questions.forEach(q => {
      if (!questionsBySection[q.section]) {
        questionsBySection[q.section] = [];
      }
      questionsBySection[q.section].push(q);
    });

    Object.entries(questionsBySection).forEach(([section, sectionQuestions]) => {
      console.log(`   üìÅ ${section}: ${sectionQuestions.length} questions`);
      sectionQuestions.forEach(q => {
        console.log(`      ‚Ä¢ ${q.question_id}: ${q.question_text.substring(0, 50)}...`);
      });
    });

    // 2. V√©rifier les questions conditionnelles
    console.log('\n2Ô∏è‚É£ V√âRIFICATION DES QUESTIONS CONDITIONNELLES');
    console.log('‚îÄ'.repeat(40));

    const questionsConditionnelles = questions.filter(q => 
      q.conditions && Object.keys(q.conditions).length > 0
    );

    console.log(`‚úÖ ${questionsConditionnelles.length} questions conditionnelles trouv√©es`);
    
    questionsConditionnelles.forEach(q => {
      const condition = q.conditions.depends_on;
      console.log(`   üîó ${q.question_id}: d√©pend de ${condition.question_id} = "${condition.answer}"`);
    });

    // 3. V√©rifier la logique de navigation
    console.log('\n3Ô∏è‚É£ TEST DE LA LOGIQUE DE NAVIGATION');
    console.log('‚îÄ'.repeat(40));

    // Simuler un utilisateur SANS v√©hicules
    console.log('üë§ Simulation: Utilisateur SANS v√©hicules');
    const questionsSansVehicules = questions.filter(q => {
      // Questions g√©n√©rales toujours affich√©es
      if (q.question_id.startsWith('GENERAL_')) return true;
      
      // Questions TICPE conditionnelles masqu√©es
      if (q.question_id.startsWith('TICPE_')) {
        const condition = q.conditions?.depends_on;
        if (condition && condition.question_id === 'TICPE_001' && condition.answer === 'Oui') {
          return false; // Masqu√©e car pas de v√©hicules
        }
      }
      
      return true;
    });

    console.log(`   üìã Questions affich√©es: ${questionsSansVehicules.length}`);
    questionsSansVehicules.forEach(q => {
      console.log(`      ‚Ä¢ ${q.question_id}: ${q.question_text.substring(0, 40)}...`);
    });

    // Simuler un utilisateur AVEC v√©hicules
    console.log('\nüë§ Simulation: Utilisateur AVEC v√©hicules');
    const questionsAvecVehicules = questions.filter(q => {
      // Toutes les questions g√©n√©rales
      if (q.question_id.startsWith('GENERAL_')) return true;
      
      // Toutes les questions TICPE (car v√©hicules = Oui)
      if (q.question_id.startsWith('TICPE_')) return true;
      
      return true;
    });

    console.log(`   üìã Questions affich√©es: ${questionsAvecVehicules.length}`);
    console.log(`   üìä Diff√©rence: +${questionsAvecVehicules.length - questionsSansVehicules.length} questions TICPE`);

    // 4. V√©rifier les taux de carburant
    console.log('\n4Ô∏è‚É£ V√âRIFICATION DES TAUX DE CARBURANT');
    console.log('‚îÄ'.repeat(40));

    const tauxCarburant = {
      'Gazole professionnel': 0.177,
      'Gazole Non Routier (GNR)': 0.150,
      'Essence': 0.177,
      'GPL': 0.177,
      '√âlectricit√©': 0.177
    };

    console.log('‚úÖ Taux 2024 configur√©s:');
    Object.entries(tauxCarburant).forEach(([carburant, taux]) => {
      console.log(`   ‚õΩ ${carburant}: ${taux}‚Ç¨/L`);
    });

    // 5. Test de calcul avec donn√©es r√©elles
    console.log('\n5Ô∏è‚É£ TEST DE CALCUL AVEC DONN√âES R√âELLES');
    console.log('‚îÄ'.repeat(40));

    // Profil de test r√©aliste
    const profilTest = {
      nom: "Transport Test - 8 camions",
      secteur: "Transport routier de marchandises",
      vehiculesProfessionnels: "Oui",
      nombreVehicules: "4 √† 10 v√©hicules",
      typesVehicules: ["Camions de plus de 7,5 tonnes"],
      consommationCarburant: "15 000 √† 50 000 litres",
      typesCarburant: ["Gazole professionnel"],
      usageProfessionnel: "100% professionnel",
      cartesCarburant: "Oui, toutes les stations",
      facturesNominatives: "Oui, syst√©matiquement",
      immatriculationSociete: "Oui, 100%",
      declarationsTicpe: "Oui, r√©guli√®rement",
      facturesCarburant: "Oui, 3 derni√®res ann√©es compl√®tes"
    };

    // Calcul manuel pour v√©rification
    const consommation = 32500; // 15 000 √† 50 000 litres
    const taux = 0.177; // Gazole professionnel
    const coefficientVehicule = 1.0; // Camions > 7,5 tonnes
    const coefficientUsage = 1.0; // 100% professionnel
    const correctionTaille = 1.05; // 4-10 v√©hicules

    const montantBase = consommation * taux;
    const montantFinal = montantBase * coefficientVehicule * coefficientUsage * correctionTaille;
    const montantFinalPlafonne = Math.min(Math.max(montantFinal, 500), 100000);

    console.log('üßÆ Calcul d√©taill√©:');
    console.log(`   ‚Ä¢ Consommation: ${consommation.toLocaleString('fr-FR')}L`);
    console.log(`   ‚Ä¢ Taux carburant: ${taux}‚Ç¨/L`);
    console.log(`   ‚Ä¢ Montant de base: ${montantBase.toLocaleString('fr-FR')}‚Ç¨`);
    console.log(`   ‚Ä¢ Coefficient v√©hicule: ${coefficientVehicule}`);
    console.log(`   ‚Ä¢ Coefficient usage: ${coefficientUsage}`);
    console.log(`   ‚Ä¢ Correction taille: ${correctionTaille}`);
    console.log(`   ‚Ä¢ Montant final: ${montantFinal.toLocaleString('fr-FR')}‚Ç¨`);
    console.log(`   ‚Ä¢ Montant plafonn√©: ${montantFinalPlafonne.toLocaleString('fr-FR')}‚Ç¨`);

    // 6. Rapport de validation
    console.log('\n6Ô∏è‚É£ RAPPORT DE VALIDATION');
    console.log('‚îÄ'.repeat(40));

    const validations = [
      {
        test: 'Structure des questions',
        resultat: questions.length > 0 ? '‚úÖ OK' : '‚ùå ERREUR',
        details: `${questions.length} questions TICPE trouv√©es`
      },
      {
        test: 'Questions conditionnelles',
        resultat: questionsConditionnelles.length > 0 ? '‚úÖ OK' : '‚ùå ERREUR',
        details: `${questionsConditionnelles.length} questions avec conditions`
      },
      {
        test: 'Logique sans v√©hicules',
        resultat: questionsSansVehicules.length <= 6 ? '‚úÖ OK' : '‚ùå ERREUR',
        details: `${questionsSansVehicules.length} questions (max 6 attendues)`
      },
      {
        test: 'Logique avec v√©hicules',
        resultat: questionsAvecVehicules.length >= 15 ? '‚úÖ OK' : '‚ùå ERREUR',
        details: `${questionsAvecVehicules.length} questions (min 15 attendues)`
      },
      {
        test: 'Taux de carburant',
        resultat: '‚úÖ OK',
        details: 'Tous les taux 2024 configur√©s'
      },
      {
        test: 'Calculs',
        resultat: montantFinalPlafonne > 5000 ? '‚úÖ OK' : '‚ùå ERREUR',
        details: `Montant calcul√©: ${montantFinalPlafonne.toLocaleString('fr-FR')}‚Ç¨`
      }
    ];

    validations.forEach(v => {
      console.log(`   ${v.resultat} ${v.test}: ${v.details}`);
    });

    const testsReussis = validations.filter(v => v.resultat.includes('‚úÖ')).length;
    const totalTests = validations.length;

    console.log(`\nüìä R√âSULTAT: ${testsReussis}/${totalTests} tests r√©ussis`);
    
    if (testsReussis === totalTests) {
      console.log('üéâ TOUS LES TESTS SONT PASS√âS !');
      console.log('‚úÖ Le simulateur TICPE est pr√™t pour la production');
    } else {
      console.log('‚ö†Ô∏è Certains tests ont √©chou√© - V√©rification n√©cessaire');
    }

    // 7. Recommandations finales
    console.log('\n7Ô∏è‚É£ RECOMMANDATIONS');
    console.log('‚îÄ'.repeat(40));

    console.log('üí° Pour la production:');
    console.log('   ‚Ä¢ Int√©grer le moteur de calcul dans l\'API');
    console.log('   ‚Ä¢ Ajouter la validation des r√©ponses');
    console.log('   ‚Ä¢ Impl√©menter la sauvegarde des simulations');
    console.log('   ‚Ä¢ Cr√©er l\'interface utilisateur avec logique conditionnelle');
    console.log('   ‚Ä¢ Ajouter les tests automatis√©s');

    console.log('\nüîß Prochaines √©tapes:');
    console.log('   1. Cr√©er l\'API endpoint /api/simulateur/ticpe');
    console.log('   2. D√©velopper le composant React IntelligentQuestionnaire');
    console.log('   3. Impl√©menter le hook useQuestionnaireLogic');
    console.log('   4. Ajouter la validation en temps r√©el');
    console.log('   5. Cr√©er les tests d\'int√©gration');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cution du test
if (require.main === module) {
  testTICPEAvecBDD().catch(console.error);
}

module.exports = { testTICPEAvecBDD }; 