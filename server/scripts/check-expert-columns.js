const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://gvvlsgtubqfxdztldunj.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseKey) {
  console.error('‚ùå Erreur: SUPABASE_SERVICE_ROLE_KEY manquante');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîç V√©rification des colonnes de la table Expert...');
console.log(`üì° Connexion √†: ${supabaseUrl}`);

// Fonction pour v√©rifier les colonnes de la table Expert
async function checkExpertColumns() {
  console.log('\nüìã Colonnes de la table Expert:');
  
  const possibleColumns = [
    'id', 'Id', 'ID',
    'first_name', 'firstName', 'FirstName', 'firstname',
    'last_name', 'lastName', 'LastName', 'lastname',
    'name', 'Name',
    'full_name', 'fullName', 'FullName',
    'email', 'Email',
    'phone', 'Phone',
    'company_name', 'companyName', 'CompanyName',
    'specialization', 'Specialization',
    'bio', 'Bio',
    'created_at', 'createdAt', 'CreatedAt',
    'updated_at', 'updatedAt', 'UpdatedAt'
  ];
  
  console.log('üîç Test des colonnes possibles:');
  
  for (const column of possibleColumns) {
    try {
      const { data, error } = await supabase
        .from('Expert')
        .select(column)
        .limit(1);
      
      if (error) {
        // Essayer avec des guillemets pour les noms avec majuscules
        if (column !== column.toLowerCase()) {
          const { data: data2, error: error2 } = await supabase
            .from('Expert')
            .select(`"${column}"`)
            .limit(1);
          
          if (!error2) {
            console.log(`  ‚úÖ "${column}": Pr√©sente (avec guillemets)`);
          }
        } else {
          console.log(`  ‚ùå ${column}: ${error.message}`);
        }
      } else {
        console.log(`  ‚úÖ ${column}: Pr√©sente`);
      }
    } catch (err) {
      console.log(`  ‚ùå ${column}: ${err.message}`);
    }
  }
}

// Fonction pour tester les jointures avec Expert
async function testExpertJoins() {
  console.log('\nüîó Test des jointures avec Expert:');
  
  try {
    // Test 1: expertassignment -> Expert
    console.log('\nüîÑ Test expertassignment -> Expert...');
    
    const { data: join1, error: error1 } = await supabase
      .from('expertassignment')
      .select(`
        id,
        expert_id,
        Expert (
          id,
          name
        )
      `)
      .limit(1);
    
    if (error1) {
      console.log(`‚ùå Erreur jointure 1: ${error1.message}`);
      
      // Essayer avec d'autres noms de colonnes
      const { data: join1b, error: error1b } = await supabase
        .from('expertassignment')
        .select(`
          id,
          expert_id,
          Expert (
            id,
            firstName
          )
        `)
        .limit(1);
      
      if (error1b) {
        console.log(`‚ùå Erreur jointure 1b: ${error1b.message}`);
      } else {
        console.log('‚úÖ Jointure expertassignment -> Expert avec firstName: OK');
      }
    } else {
      console.log('‚úÖ Jointure expertassignment -> Expert avec name: OK');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests de jointures:', error);
  }
}

// Fonction pour afficher un exemple de donn√©es Expert
async function showExpertData() {
  console.log('\nüìä Exemple de donn√©es Expert:');
  
  try {
    const { data, error } = await supabase
      .from('Expert')
      .select('*')
      .limit(3);
    
    if (error) {
      console.log(`‚ùå Erreur: ${error.message}`);
    } else {
      console.log('‚úÖ Donn√©es Expert:');
      data.forEach((expert, index) => {
        console.log(`  Expert ${index + 1}:`, expert);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es:', error);
  }
}

// Fonction pour proposer la correction
function proposeCorrection() {
  console.log('\nüîß Correction propos√©e:');
  console.log('');
  console.log('Bas√© sur les tests, voici les corrections √† apporter:');
  console.log('');
  console.log('1. Identifier les noms exacts des colonnes dans Expert');
  console.log('2. Adapter les jointures dans les vues');
  console.log('3. Corriger les r√©f√©rences de colonnes');
  console.log('');
  console.log('üìù Cr√©er une nouvelle migration avec les noms corrects');
}

// Fonction principale
async function main() {
  try {
    console.log('üîç D√©marrage de la v√©rification des colonnes Expert...\n');
    
    // 1. V√©rifier les colonnes de la table Expert
    await checkExpertColumns();
    
    // 2. Tester les jointures avec Expert
    await testExpertJoins();
    
    // 3. Afficher un exemple de donn√©es
    await showExpertData();
    
    // 4. Proposer la correction
    proposeCorrection();
    
    console.log('\nüéâ V√©rification termin√©e !');
    console.log('');
    console.log('üìã Prochaines √©tapes:');
    console.log('1. Identifier les noms exacts des colonnes Expert');
    console.log('2. Cr√©er une migration corrig√©e');
    console.log('3. Tester les jointures');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script
main(); 