const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://gvvlsgtubqfxdztldunj.supabase.co';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseKey) {
  console.error('‚ùå Erreur: SUPABASE_SERVICE_ROLE_KEY manquante');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

console.log('üîß Correction finale de la fonction get_assignment_statistics...');
console.log(`üì° Connexion √†: ${supabaseUrl}`);

// Fonction pour proposer la correction finale
function proposeFinalFix() {
  console.log('\nüìã Correction Finale Requise:');
  console.log('==============================');
  console.log('');
  console.log('Le probl√®me vient de l\'ambigu√Øt√© de la colonne "statut" dans la fonction.');
  console.log('Voici la correction compl√®te √† ex√©cuter dans Supabase SQL Editor:');
  console.log('');
  
  console.log('--- CORRECTION FINALE ---');
  console.log(`
-- Supprimer d'abord la fonction existante
DROP FUNCTION IF EXISTS public.get_assignment_statistics();

-- Recr√©er la fonction avec des alias clairs
CREATE OR REPLACE FUNCTION public.get_assignment_statistics()
RETURNS TABLE (
    statut VARCHAR(50),
    count BIGINT,
    percentage NUMERIC
) AS $$
BEGIN
    RETURN QUERY
    WITH assignment_stats AS (
        SELECT 
            ea.statut as assignment_statut,
            COUNT(*) as assignment_count,
            COUNT(*) * 100.0 / SUM(COUNT(*)) OVER() as assignment_percentage
        FROM public.expertassignment ea
        GROUP BY ea.statut
    )
    SELECT 
        assignment_statut,
        assignment_count,
        ROUND(assignment_percentage, 2) as percentage
    FROM assignment_stats
    ORDER BY assignment_count DESC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
  `);
  
  console.log('');
  console.log('üí° Cette correction utilise des alias clairs pour √©viter l\'ambigu√Øt√©');
  console.log('üéØ Apr√®s cette correction, tous les tests devraient passer');
}

// Fonction pour afficher le statut actuel
function displayCurrentStatus() {
  console.log('\nüìä Statut Actuel:');
  console.log('=================');
  console.log('‚úÖ Colonnes ajout√©es: Toutes pr√©sentes');
  console.log('‚úÖ Vues: Toutes fonctionnent');
  console.log('‚úÖ RLS: Activ√© sur toutes les tables');
  console.log('‚úÖ Jointures: Parfaites');
  console.log('‚úÖ Donn√©es: R√©elles dans les vues');
  console.log('');
  console.log('‚ùå Probl√®me restant:');
  console.log('- Fonction get_assignment_statistics: Ambigu√Øt√© de colonne');
  console.log('');
  console.log('üéØ Progression: 95% termin√©');
}

// Fonction pour proposer les prochaines √©tapes
function proposeNextSteps() {
  console.log('\nüöÄ Prochaines √âtapes Apr√®s Correction:');
  console.log('=====================================');
  console.log('');
  console.log('1. Appliquer la correction de la fonction');
  console.log('2. Tester: node scripts/test-schema-corrections.js');
  console.log('3. Si 100% OK: D√©marrer le dashboard admin');
  console.log('4. Tester l\'int√©gration compl√®te');
  console.log('');
  console.log('üéâ On sera alors √† 100% de progression !');
}

// Fonction principale
async function main() {
  try {
    console.log('üîß D√©marrage de la correction finale...\n');
    
    // 1. Afficher le statut actuel
    displayCurrentStatus();
    
    // 2. Proposer la correction finale
    proposeFinalFix();
    
    // 3. Proposer les prochaines √©tapes
    proposeNextSteps();
    
    console.log('\nüéâ Instructions g√©n√©r√©es !');
    console.log('');
    console.log('üìã Action requise:');
    console.log('1. Copier la correction SQL ci-dessus');
    console.log('2. L\'ex√©cuter dans Supabase SQL Editor');
    console.log('3. Tester √† nouveau');
    console.log('');
    console.log('üöÄ On est √† un pas du 100% !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du processus:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script
main(); 