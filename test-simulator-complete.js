#!/usr/bin/env node

/**
 * üß™ Test complet du simulateur d'√©ligibilit√©
 * ===========================================
 * 
 * Ce script teste l'ensemble du processus du simulateur :
 * 1. Cr√©ation de session
 * 2. R√©cup√©ration des questions
 * 3. Envoi des r√©ponses
 * 4. Calcul d'√©ligibilit√©
 * 5. V√©rification des r√©sultats
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:5001';
const API_BASE = `${BASE_URL}/api/simulator`;

// Couleurs pour les messages
const colors = {
    reset: '\x1b[0m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
    console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
    log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
    log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
    log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
    log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

async function testSimulator() {
    let sessionToken = '';
    let sessionId = '';
    let questions = [];
    let responses = [];

    log('üöÄ D√©marrage du test complet du simulateur', 'cyan');
    log('==========================================', 'cyan');

    try {
        // 1. Test de cr√©ation de session
        logInfo('1. Cr√©ation d\'une session temporaire...');
        const sessionResponse = await fetch(`${API_BASE}/session`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                ip_address: '127.0.0.1',
                user_agent: 'Test-Script'
            })
        });

        if (!sessionResponse.ok) {
            throw new Error(`Erreur cr√©ation session: ${sessionResponse.status} ${sessionResponse.statusText}`);
        }

        const sessionData = await sessionResponse.json();
        sessionToken = sessionData.session_token;
        sessionId = sessionData.id;
        logSuccess(`Session cr√©√©e: ${sessionToken}`);

        // 2. Test de r√©cup√©ration des questions
        logInfo('2. R√©cup√©ration des questions...');
        const questionsResponse = await fetch(`${API_BASE}/questions`);
        
        if (!questionsResponse.ok) {
            throw new Error(`Erreur r√©cup√©ration questions: ${questionsResponse.status} ${questionsResponse.statusText}`);
        }

        questions = await questionsResponse.json();
        logSuccess(`${questions.length} questions r√©cup√©r√©es`);

        // Afficher les questions
        questions.forEach((q, index) => {
            log(`   ${index + 1}. ${q.question_text} (${q.question_type})`, 'magenta');
        });

        // 3. Test d'envoi de r√©ponses
        logInfo('3. Envoi des r√©ponses de test...');
        
        // R√©ponses de test pour chaque question
        const testResponses = [
            'Transport / Logistique', // Secteur d'activit√©
            'Entreprise', // Statut
            'Oui, salari√©s', // Salari√©s
            '5 √† 20', // Nombre d'employ√©s
            'Heures supp', // Contrats sp√©cifiques
            'Oui', // V√©hicules professionnels
            'Oui', // V√©hicules +3,5T
            'Oui' // Taxes fonci√®res
        ];

        for (let i = 0; i < Math.min(questions.length, testResponses.length); i++) {
            const question = questions[i];
            const response = testResponses[i];

            logInfo(`   Envoi r√©ponse ${i + 1}/${questions.length}: ${response}`);

            const responseResult = await fetch(`${API_BASE}/response`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    session_id: sessionId,
                    question_id: question.id,
                    response_value: response
                })
            });

            if (!responseResult.ok) {
                logWarning(`   ‚ö†Ô∏è  Erreur r√©ponse ${i + 1}: ${responseResult.status}`);
            } else {
                logSuccess(`   ‚úÖ R√©ponse ${i + 1} envoy√©e`);
            }

            responses.push({
                question_id: question.id,
                response_value: response
            });

            // Petite pause entre les r√©ponses
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        // 4. Test de calcul d'√©ligibilit√©
        logInfo('4. Calcul de l\'√©ligibilit√©...');
        const eligibilityResponse = await fetch(`${API_BASE}/calculate-eligibility`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                session_id: sessionId
            })
        });

        if (!eligibilityResponse.ok) {
            throw new Error(`Erreur calcul √©ligibilit√©: ${eligibilityResponse.status} ${eligibilityResponse.statusText}`);
        }

        const eligibilityResults = await eligibilityResponse.json();
        logSuccess(`${eligibilityResults.length} r√©sultats d'√©ligibilit√© calcul√©s`);

        // 5. Affichage des r√©sultats
        logInfo('5. R√©sultats de l\'√©ligibilit√©:');
        eligibilityResults.forEach((result, index) => {
            log(`   ${index + 1}. ${result.produit_id}:`, 'cyan');
            log(`      - Score: ${result.eligibility_score}%`, 'green');
            log(`      - √âconomies estim√©es: ${result.estimated_savings?.toLocaleString('fr-FR')}‚Ç¨`, 'green');
            log(`      - Confiance: ${result.confidence_level}`, 'yellow');
            
            if (result.recommendations && result.recommendations.length > 0) {
                log(`      - Recommandations:`, 'magenta');
                result.recommendations.forEach((rec, recIndex) => {
                    log(`        ${recIndex + 1}. ${rec}`, 'magenta');
                });
            }
        });

        // 6. Calcul du total des √©conomies
        const totalSavings = eligibilityResults.reduce((sum, result) => sum + (result.estimated_savings || 0), 0);
        const highEligibilityCount = eligibilityResults.filter(r => r.eligibility_score >= 70).length;

        log('üìä R√©sum√© de la simulation:', 'cyan');
        log(`   - Total des √©conomies potentielles: ${totalSavings.toLocaleString('fr-FR')}‚Ç¨`, 'green');
        log(`   - Produits tr√®s √©ligibles (‚â•70%): ${highEligibilityCount}/${eligibilityResults.length}`, 'green');
        log(`   - Score moyen: ${Math.round(eligibilityResults.reduce((sum, r) => sum + r.eligibility_score, 0) / eligibilityResults.length)}%`, 'green');

        // 7. Test de r√©cup√©ration des r√©sultats
        logInfo('6. V√©rification de la persistance des donn√©es...');
        const resultsResponse = await fetch(`${API_BASE}/results/${sessionId}`);
        
        if (resultsResponse.ok) {
            const savedResults = await resultsResponse.json();
            logSuccess(`Donn√©es persist√©es: ${savedResults.length} r√©sultats sauvegard√©s`);
        } else {
            logWarning('‚ö†Ô∏è  Impossible de r√©cup√©rer les r√©sultats sauvegard√©s');
        }

        logSuccess('üéâ Test complet du simulateur termin√© avec succ√®s !');

    } catch (error) {
        logError(`Erreur lors du test: ${error.message}`);
        console.error(error);
        process.exit(1);
    }
}

// Fonction pour tester la connectivit√©
async function testConnectivity() {
    log('üîç Test de connectivit√©...', 'cyan');
    
    try {
        const response = await fetch(`${BASE_URL}/health`);
        if (response.ok) {
            logSuccess('Serveur accessible');
            return true;
        } else {
            logError(`Serveur r√©pond avec ${response.status}`);
            return false;
        }
    } catch (error) {
        logError(`Impossible de se connecter au serveur: ${error.message}`);
        return false;
    }
}

// Fonction principale
async function main() {
    log('üß™ Test du simulateur d\'√©ligibilit√©', 'cyan');
    log('====================================', 'cyan');
    
    // Test de connectivit√©
    const isConnected = await testConnectivity();
    if (!isConnected) {
        logError('‚ùå Impossible de se connecter au serveur. Assurez-vous qu\'il est d√©marr√© sur le port 5001.');
        process.exit(1);
    }
    
    // Test complet
    await testSimulator();
    
    log('‚úÖ Tous les tests termin√©s', 'green');
}

// Ex√©cution
if (require.main === module) {
    main().catch(error => {
        logError(`Erreur fatale: ${error.message}`);
        process.exit(1);
    });
}

module.exports = { testSimulator, testConnectivity }; 