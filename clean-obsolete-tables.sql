-- ============================================================================
-- NETTOYAGE TABLES OBSOL√àTES
-- ============================================================================
-- Date : 22 octobre 2025
-- Tables identifi√©es : notification_templates, performance_tests
-- V√©rification : Aucune r√©f√©rence dans le code ‚úÖ

-- ‚ö†Ô∏è CE SCRIPT SUPPRIME D√âFINITIVEMENT DES DONN√âES !
-- Recommandation : Sauvegarde avant ex√©cution

BEGIN;

-- ============================================================================
-- √âTAPE 1 : INFORMATION SUR LES TABLES √Ä SUPPRIMER
-- ============================================================================

-- Afficher les infos des tables
SELECT 
    'üìä INFORMATIONS TABLES √Ä SUPPRIMER' as section;

-- notification_templates
SELECT 
    'notification_templates' as table_name,
    COUNT(*) as nombre_lignes,
    pg_size_pretty(pg_total_relation_size('public.notification_templates')) as taille_disque
FROM notification_templates;

-- performance_tests
SELECT 
    'performance_tests' as table_name,
    COUNT(*) as nombre_lignes,
    pg_size_pretty(pg_total_relation_size('public.performance_tests')) as taille_disque
FROM performance_tests;

-- ============================================================================
-- √âTAPE 2 : V√âRIFIER LES D√âPENDANCES (foreign keys pointant vers ces tables)
-- ============================================================================

SELECT 
    'üîó V√âRIFICATION D√âPENDANCES' as section;

-- V√©rifier si d'autres tables d√©pendent de notification_templates
SELECT 
    'notification_templates' as table_cible,
    tc.table_name as table_source,
    tc.constraint_name,
    kcu.column_name
FROM information_schema.table_constraints AS tc 
JOIN information_schema.key_column_usage AS kcu
    ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage AS ccu
    ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY'
AND ccu.table_name = 'notification_templates';

-- V√©rifier si d'autres tables d√©pendent de performance_tests
SELECT 
    'performance_tests' as table_cible,
    tc.table_name as table_source,
    tc.constraint_name,
    kcu.column_name
FROM information_schema.table_constraints AS tc 
JOIN information_schema.key_column_usage AS kcu
    ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage AS ccu
    ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY'
AND ccu.table_name = 'performance_tests';

-- ============================================================================
-- √âTAPE 3 : SAUVEGARDE (OPTIONNELLE - d√©commenter si besoin)
-- ============================================================================

-- Si tu veux garder une copie avant suppression :
/*
CREATE TABLE backup_notification_templates AS 
SELECT * FROM notification_templates;

CREATE TABLE backup_performance_tests AS 
SELECT * FROM performance_tests;

SELECT 
    'üíæ SAUVEGARDE CR√â√âE' as info,
    (SELECT COUNT(*) FROM backup_notification_templates) as backup_notification_templates,
    (SELECT COUNT(*) FROM backup_performance_tests) as backup_performance_tests;
*/

-- ============================================================================
-- √âTAPE 4 : SUPPRESSION DES TABLES
-- ============================================================================

-- ‚ö†Ô∏è CASCADE supprimera aussi toutes les d√©pendances (indexes, triggers, etc.)

DROP TABLE IF EXISTS notification_templates CASCADE;
DROP TABLE IF EXISTS performance_tests CASCADE;

-- ============================================================================
-- √âTAPE 5 : V√âRIFICATION APR√àS SUPPRESSION
-- ============================================================================

SELECT 
    '‚úÖ V√âRIFICATION POST-SUPPRESSION' as section;

-- V√©rifier que les tables n'existent plus
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'notification_templates')
        THEN '‚ùå notification_templates existe encore'
        ELSE '‚úÖ notification_templates supprim√©e'
    END as status_notification_templates,
    CASE 
        WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'performance_tests')
        THEN '‚ùå performance_tests existe encore'
        ELSE '‚úÖ performance_tests supprim√©e'
    END as status_performance_tests;

-- ============================================================================
-- √âTAPE 6 : ESPACE DISQUE R√âCUP√âR√â
-- ============================================================================

-- Note: L'espace sera vraiment lib√©r√© apr√®s un VACUUM
SELECT 
    'üíæ ESPACE R√âCUP√âR√â' as info,
    '~112 kB (96 kB + 16 kB)' as espace_libere,
    'Ex√©cuter VACUUM pour lib√©rer physiquement' as note;

-- ============================================================================
-- √âTAPE 7 : D√âCISION FINALE
-- ============================================================================

SELECT 
    'üéØ D√âCISION' as section,
    'Si tout est OK ci-dessus, d√©commenter COMMIT' as action,
    'Sinon, le ROLLBACK annulera tout' as securite;

-- Par d√©faut, ROLLBACK (s√©curit√©)
-- D√©commenter COMMIT seulement si tu es s√ªr !

-- COMMIT;
ROLLBACK;

-- ============================================================================
-- INSTRUCTIONS D'UTILISATION
-- ============================================================================

/*
COMMENT UTILISER CE SCRIPT :

1. PREMI√àRE EX√âCUTION (TEST)
   - Ex√©cuter tel quel (avec ROLLBACK)
   - V√©rifier les r√©sultats
   - Aucune modification ne sera faite

2. SUPPRESSION R√âELLE
   - Remplacer ROLLBACK par COMMIT √† la fin
   - Ex√©cuter le script
   - Les tables seront supprim√©es d√©finitivement

3. NETTOYAGE COMPLET (apr√®s suppression)
   - Ex√©cuter : VACUUM ANALYZE;
   - Cela lib√®re l'espace disque physiquement

ROLLBACK VS COMMIT :
- ROLLBACK = Annule tout (s√©curit√©)
- COMMIT = Valide les suppressions (d√©finitif)
*/

