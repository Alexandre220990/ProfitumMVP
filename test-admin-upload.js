// Script de test pour l'upload admin avec guides PDF
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://gvvlsgtubqfxdztldunj.supabase.co';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd2dmxzZ3R1YnFmeGR6dGxkdW5qIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTczOTU5NzI5NywiZXhwIjoyMDU1MTczMjk3fQ.Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8Ej8';
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Guides de test √† cr√©er
const testGuides = [
  {
    title: 'Guide GED Admin Am√©lior√©e',
    description: 'Guide complet de la Gestion √âlectronique Documentaire admin avec ciblage avanc√©',
    category: 'guide',
    priority: 'high',
    content: `
# Guide GED Admin Am√©lior√©e

## Vue d'ensemble

La page GED (Gestion √âlectronique Documentaire) admin a √©t√© enti√®rement modernis√©e avec des fonctionnalit√©s de ciblage avanc√©, permettant √† l'administrateur de cr√©er et g√©rer des documents avec un contr√¥le granulaire des acc√®s.

## Nouvelles fonctionnalit√©s

### Ciblage avanc√©
- **Documents pour tous** : Acc√®s public √† tous les utilisateurs
- **Documents pour clients sp√©cifiques** : Ciblage individuel ou multiple
- **Documents pour experts sp√©cifiques** : Ciblage individuel ou multiple  
- **Documents pour groupes** : Cr√©ation et gestion de groupes mixtes
- **Documents pour l'admin uniquement** : Acc√®s restreint

### Niveaux d'acc√®s
- **Public** : Visible par tous les utilisateurs
- **Private** : Visible uniquement par les cibles sp√©cifi√©es
- **Restricted** : Acc√®s limit√© avec restrictions suppl√©mentaires
- **Confidential** : Acc√®s hautement s√©curis√©

## Utilisation

### 1. Cr√©ation d'un nouveau document
1. Acc√©der √† la page GED : /admin/ged-management
2. Cliquer sur "Nouveau Document"
3. Remplir les informations de base
4. Configurer le ciblage avanc√©
5. Sauvegarder

### 2. Configuration du ciblage
- S√©lectionner le niveau d'acc√®s
- Choisir les cibles (clients, experts, groupes)
- Utiliser la recherche avanc√©e
- Valider les permissions

## Interface utilisateur

### Design moderne
- Cards organis√©es
- Ic√¥nes intuitives
- Couleurs coh√©rentes
- Responsive design

### Affichage des cibles
- Badges color√©s
- Compteurs
- Aper√ßu compact
- Actions rapides

## Bonnes pratiques

### Organisation
1. Utiliser des cat√©gories claires
2. Cr√©er des groupes logiques
3. Documenter les cibles
4. R√©viser r√©guli√®rement

### S√©curit√©
1. Principe du moindre privil√®ge
2. R√©vision p√©riodique
3. Audit des acc√®s
4. Formation des utilisateurs
    `
  },
  {
    title: 'Guide Calendrier Avanc√©',
    description: 'Utilisation avanc√©e du syst√®me de calendrier et gestion des √©v√©nements',
    category: 'guide',
    priority: 'high',
    content: `
# Guide Calendrier Avanc√©

## Introduction

Le syst√®me de calendrier avanc√© de Profitum permet une gestion compl√®te des √©v√©nements, rendez-vous et planifications pour tous les utilisateurs.

## Fonctionnalit√©s principales

### Gestion des √©v√©nements
- Cr√©ation d'√©v√©nements simples et r√©currents
- Gestion des participants
- Notifications automatiques
- Int√©gration avec les workflows

### Calendriers multiples
- Calendrier personnel
- Calendrier d'√©quipe
- Calendrier client
- Calendrier projet

### Synchronisation
- Synchronisation avec Google Calendar
- Export vers Outlook
- API de synchronisation
- Notifications push

## Utilisation avanc√©e

### Cr√©ation d'√©v√©nements
1. S√©lectionner la date et l'heure
2. D√©finir le type d'√©v√©nement
3. Ajouter les participants
4. Configurer les notifications
5. Sauvegarder

### Gestion des r√©currences
- Quotidien
- Hebdomadaire
- Mensuel
- Annuel
- Personnalis√©

### Int√©grations
- Workflows automatiques
- Notifications syst√®me
- Rapports et analytics
- Export de donn√©es

## Configuration

### Param√®tres utilisateur
- Fuseau horaire
- Notifications
- Affichage
- Permissions

### Param√®tres admin
- Types d'√©v√©nements
- Templates
- Permissions globales
- Int√©grations
    `
  },
  {
    title: 'Guide Workflows Business',
    description: 'Gestion des workflows m√©tier et processus automatis√©s',
    category: 'procedure',
    priority: 'high',
    content: `
# Guide Workflows Business

## Vue d'ensemble

Les workflows business de Profitum automatisent les processus m√©tier pour am√©liorer l'efficacit√© et r√©duire les erreurs.

## Workflows disponibles

### Workflow 1: CGV Profitum
- G√©n√©ration automatique des CGV
- Validation par √©tapes
- Signature √©lectronique
- Archivage s√©curis√©

### Workflow 2: Rapport de simulation
- Calcul automatique des √©ligibilit√©s
- G√©n√©ration de rapports
- Validation expert
- Notification client

### Workflow 3: Rapport pr√©-√©ligibilit√©
- Analyse pr√©liminaire
- V√©rification des crit√®res
- Rapport d√©taill√©
- Recommandations

### Workflow 4: Rapport √©ligibilit√© expert
- Validation technique
- Contr√¥les qualit√©
- Rapport final
- Archivage

### Workflow 5: Bon de commande
- G√©n√©ration automatique
- Validation budg√©taire
- Approbation hi√©rarchique
- Transmission fournisseur

### Workflow 6: Facturation
- Calcul automatique
- Validation comptable
- G√©n√©ration facture
- Envoi client

### Workflow 7: Suivi administratif
- Suivi des dossiers
- Alertes automatiques
- Rapports de progression
- Validation finale

### Workflow 8: Remboursement
- Calcul des montants
- Validation comptable
- Traitement bancaire
- Confirmation client

## Configuration

### Param√®tres g√©n√©raux
- Activer/d√©sactiver les workflows
- Configurer les notifications
- D√©finir les d√©lais
- G√©rer les permissions

### Personnalisation
- Templates personnalis√©s
- Champs additionnels
- Validations sp√©cifiques
- Int√©grations externes

## Monitoring

### Tableau de bord
- Workflows en cours
- Statistiques de performance
- Alertes et erreurs
- Rapports d'activit√©

### Analytics
- Temps de traitement
- Taux de r√©ussite
- Goulots d'√©tranglement
- Optimisations possibles
    `
  }
];

// Fonction pour cr√©er un PDF simple (simulation)
function createSimplePDF(title, content) {
  const html = `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>${title}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 40px;
            color: #333;
        }
        h1 {
            color: #2563eb;
            border-bottom: 3px solid #2563eb;
            padding-bottom: 10px;
        }
        h2 {
            color: #374151;
            margin-top: 30px;
        }
        h3 {
            color: #4b5563;
        }
        code {
            background: #f3f4f6;
            padding: 2px 4px;
            border-radius: 3px;
        }
        pre {
            background: #f9fafb;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            padding: 15px;
            overflow-x: auto;
        }
        ul, ol {
            margin: 15px 0;
            padding-left: 25px;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #e5e7eb;
            text-align: center;
            font-size: 12px;
            color: #9ca3af;
        }
    </style>
</head>
<body>
    <h1>${title}</h1>
    ${content}
    <div class="footer">
        <p>Document g√©n√©r√© automatiquement par le syst√®me Profitum</p>
        <p>Date: ${new Date().toLocaleDateString('fr-FR')}</p>
    </div>
</body>
</html>`;

  return html;
}

// Fonction pour uploader un document dans Supabase
async function uploadDocumentToSupabase(htmlContent, fileName, metadata) {
  try {
    console.log(`üì§ Upload de ${fileName}...`);
    
    // Convertir HTML en buffer (simulation PDF)
    const buffer = Buffer.from(htmlContent, 'utf8');
    
    // Upload vers Supabase Storage
    const { data, error } = await supabase.storage
      .from('admin-documents')
      .upload(`guides/${fileName}`, buffer, {
        contentType: 'text/html',
        upsert: true,
        metadata: {
          title: metadata.title,
          description: metadata.description,
          category: metadata.category,
          priority: metadata.priority,
          type: 'guide',
          created_at: new Date().toISOString()
        }
      });

    if (error) {
      console.error(`‚ùå Erreur upload ${fileName}:`, error);
      return null;
    }

    console.log(`‚úÖ ${fileName} upload√© avec succ√®s`);
    return data.path;
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'upload de ${fileName}:`, error);
    return null;
  }
}

// Fonction pour cr√©er et uploader les guides de test
async function createAndUploadTestGuides() {
  console.log('üîÑ Cr√©ation et upload des guides de test...\n');

  const results = [];

  for (const guide of testGuides) {
    try {
      console.log(`üìñ Cr√©ation de ${guide.title}...`);
      
      // Cr√©er le contenu HTML
      const htmlContent = createSimplePDF(guide.title, guide.content);
      
      // G√©n√©rer le nom de fichier
      const fileName = `${guide.title.toLowerCase().replace(/[^a-z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}.html`;
      
      // Upload vers Supabase
      const uploadedPath = await uploadDocumentToSupabase(htmlContent, fileName, guide);
      
      if (uploadedPath) {
        results.push({
          ...guide,
          file_path: uploadedPath,
          status: 'success'
        });
      } else {
        results.push({
          ...guide,
          status: 'upload_failed'
        });
      }

    } catch (error) {
      console.error(`‚ùå Erreur lors du traitement de ${guide.title}:`, error);
      results.push({
        ...guide,
        status: 'error',
        error: error.message
      });
    }
  }

  // Afficher le r√©sum√©
  console.log('\nüìä R√©sum√© de la cr√©ation:');
  console.log('========================');
  
  const successful = results.filter(r => r.status === 'success').length;
  const failed = results.filter(r => r.status !== 'success').length;
  
  console.log(`‚úÖ Succ√®s: ${successful}`);
  console.log(`‚ùå √âchecs: ${failed}`);
  console.log(`üìÅ Total: ${results.length}`);

  if (successful > 0) {
    console.log('\nüéâ Guides cr√©√©s avec succ√®s:');
    results.filter(r => r.status === 'success').forEach(guide => {
      console.log(`   üìÑ ${guide.title} -> ${guide.file_path}`);
    });
  }

  if (failed > 0) {
    console.log('\n‚ö†Ô∏è  Guides en √©chec:');
    results.filter(r => r.status !== 'success').forEach(guide => {
      console.log(`   ‚ùå ${guide.title}: ${guide.status}`);
    });
  }

  return results;
}

// Fonction pour tester l'API admin
async function testAdminAPI() {
  console.log('\nüß™ Test de l\'API admin...\n');

  try {
    // Test 1: R√©cup√©ration des documents admin
    console.log('1Ô∏è‚É£ Test r√©cup√©ration documents admin...');
    const { data: documents, error: docsError } = await supabase
      .from('DocumentFile')
      .select('*')
      .eq('category', 'admin')
      .limit(5);

    if (docsError) {
      console.log('‚ùå Erreur r√©cup√©ration documents:', docsError.message);
    } else {
      console.log(`‚úÖ ${documents.length} documents admin trouv√©s`);
    }

    // Test 2: V√©rification du bucket admin-documents
    console.log('\n2Ô∏è‚É£ Test bucket admin-documents...');
    const { data: files, error: bucketError } = await supabase.storage
      .from('admin-documents')
      .list('guides');

    if (bucketError) {
      console.log('‚ùå Erreur bucket:', bucketError.message);
    } else {
      console.log(`‚úÖ ${files.length} fichiers dans le bucket admin-documents`);
    }

    // Test 3: Test d'upload simple
    console.log('\n3Ô∏è‚É£ Test upload simple...');
    const testContent = '<html><body><h1>Test Admin</h1><p>Document de test pour l\'admin.</p></body></html>';
    const testBuffer = Buffer.from(testContent, 'utf8');
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('admin-documents')
      .upload(`test/admin-test-${Date.now()}.html`, testBuffer, {
        contentType: 'text/html',
        upsert: true
      });

    if (uploadError) {
      console.log('‚ùå Erreur upload test:', uploadError.message);
    } else {
      console.log('‚úÖ Upload test r√©ussi:', uploadData.path);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors des tests API:', error);
  }
}

// Ex√©cuter les tests
async function runTests() {
  console.log('üöÄ D√©marrage des tests admin upload...\n');
  
  await testAdminAPI();
  await createAndUploadTestGuides();
  
  console.log('\nüéâ Tests termin√©s !');
  console.log('\nüìã Prochaines √©tapes:');
  console.log('   1. Acc√©der √† /admin/admin-document-upload');
  console.log('   2. V√©rifier les guides cr√©√©s');
  console.log('   3. Tester l\'upload manuel');
  console.log('   4. Configurer le ciblage avanc√©');
}

runTests().catch(console.error); 