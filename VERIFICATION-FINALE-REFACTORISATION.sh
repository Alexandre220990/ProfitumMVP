#!/bin/bash

# ============================================================================
# SCRIPT DE V√âRIFICATION FINALE - REFACTORISATION SIMULATEUR
# ============================================================================

echo "üîç V√âRIFICATION FINALE DE LA REFACTORISATION"
echo "============================================================================"
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

ERRORS=0

# 1. V√©rifier que simulation.ts n'existe plus
echo "1Ô∏è‚É£  V√©rification suppression de simulation.ts"
if [ -f "server/src/routes/simulation.ts" ]; then
    echo -e "${RED}‚ùå ERREUR: simulation.ts existe encore${NC}"
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ simulation.ts supprim√©${NC}"
fi

# 2. V√©rifier qu'il n'y a pas de r√©f√©rences √† simulation.ts
echo ""
echo "2Ô∏è‚É£  V√©rification des imports de simulation.ts"
REFS=$(grep -r "from.*['\"]./routes/simulation['\"]" server/src --include="*.ts" 2>/dev/null | grep -v "SUPPRIM√â" | wc -l | tr -d ' ')
if [ "$REFS" -gt 0 ]; then
    echo -e "${RED}‚ùå ERREUR: $REFS r√©f√©rences actives √† simulation.ts trouv√©es${NC}"
    grep -r "from.*['\"]./routes/simulation['\"]" server/src --include="*.ts" 2>/dev/null | grep -v "SUPPRIM√â"
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ Aucune r√©f√©rence active √† simulation.ts${NC}"
fi

# 3. V√©rifier qu'il n'y a plus de .from('Simulation') avec majuscule
echo ""
echo "3Ô∏è‚É£  V√©rification des r√©f√©rences aux anciennes tables"
OLD_TABLES=$(grep -r "\.from\(['\"]\(Simulation\|simulation\|Simulations\|chatbotsimulation\)['\"])" server/src/routes server/src/services --include="*.ts" 2>/dev/null | wc -l | tr -d ' ')
if [ "$OLD_TABLES" -gt 0 ]; then
    echo -e "${RED}‚ùå ERREUR: $OLD_TABLES r√©f√©rences aux anciennes tables trouv√©es${NC}"
    grep -r "\.from\(['\"]\(Simulation\|simulation\|Simulations\|chatbotsimulation\)['\"])" server/src/routes server/src/services --include="*.ts" 2>/dev/null
    ((ERRORS++))
else
    echo -e "${GREEN}‚úÖ Aucune r√©f√©rence aux anciennes tables${NC}"
fi

# 4. V√©rifier que simulations (minuscule) est utilis√©
echo ""
echo "4Ô∏è‚É£  V√©rification utilisation de 'simulations' (correct)"
GOOD_REFS=$(grep -r "\.from\(['\"]simulations['\"]\)" server/src --include="*.ts" 2>/dev/null | wc -l | tr -d ' ')
echo -e "${GREEN}‚úÖ $GOOD_REFS utilisations de 'simulations' (table correcte)${NC}"

# 5. V√©rifier les fichiers existants
echo ""
echo "5Ô∏è‚É£  V√©rification des fichiers de simulation existants"
echo "Fichiers trouv√©s :"
ls -lh server/src/routes/simulation* 2>/dev/null | awk '{print "   " $9 " (" $5 ")"}'
ls -lh server/src/services/simulation* 2>/dev/null | awk '{print "   " $9 " (" $5 ")"}'

# 6. Test de compilation TypeScript
echo ""
echo "6Ô∏è‚É£  Test de compilation TypeScript"
if command -v tsc &> /dev/null; then
    cd server
    if tsc --noEmit 2>&1 | grep -q "error"; then
        echo -e "${RED}‚ùå Erreurs TypeScript d√©tect√©es${NC}"
        tsc --noEmit | head -20
        ((ERRORS++))
    else
        echo -e "${GREEN}‚úÖ Aucune erreur TypeScript${NC}"
    fi
    cd ..
else
    echo -e "${YELLOW}‚ö†Ô∏è  TypeScript non disponible, test ignor√©${NC}"
fi

# R√©sum√© final
echo ""
echo "============================================================================"
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ‚úÖ‚úÖ TOUS LES TESTS SONT PASS√âS ! ‚úÖ‚úÖ‚úÖ${NC}"
    echo ""
    echo "üéâ Refactorisation compl√®te et valid√©e !"
    echo ""
    echo "Structure finale :"
    echo "  ‚úÖ simulationRoutes.ts - API principale"
    echo "  ‚úÖ simulations.ts - API avanc√©e"
    echo "  ‚úÖ simulator.ts - Sessions publiques"
    echo "  ‚úÖ client-simulation.ts - API clients"
    echo "  ‚úÖ simulationProcessor.ts - Service core"
    echo ""
    exit 0
else
    echo -e "${RED}‚ùå $ERRORS ERREUR(S) D√âTECT√âE(S)${NC}"
    echo ""
    echo "Actions recommand√©es :"
    echo "  1. Corriger les erreurs ci-dessus"
    echo "  2. Relancer ce script de v√©rification"
    echo ""
    exit 1
fi

