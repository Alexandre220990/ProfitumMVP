#!/bin/bash

# Test d'int√©gration messagerie-documents
echo "üß™ TEST D'INT√âGRATION MESSAGERIE-DOCUMENTS"
echo "=========================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables de test
TOTAL_TESTS=0
PASSED_TESTS=0

# Fonction pour incr√©menter les compteurs
increment_test() {
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
}

pass_test() {
    PASSED_TESTS=$((PASSED_TESTS + 1))
    echo -e "${GREEN}‚úÖ${NC} $1"
}

fail_test() {
    echo -e "${RED}‚ùå${NC} $1"
}

info_test() {
    echo -e "${BLUE}‚ÑπÔ∏è${NC} $1"
}

warning_test() {
    echo -e "${YELLOW}‚ö†Ô∏è${NC} $1"
}

echo ""
echo "üîç V√©rification des services d'int√©gration..."

# Test 1: Service d'int√©gration
increment_test
if [ -f "client/src/services/messaging-document-integration.ts" ]; then
    pass_test "Service d'int√©gration trouv√©: messaging-document-integration.ts"
else
    fail_test "Service d'int√©gration manquant: messaging-document-integration.ts"
fi

# Test 2: Composant DocumentAttachments
increment_test
if [ -f "client/src/components/messaging/DocumentAttachments.tsx" ]; then
    pass_test "Composant trouv√©: DocumentAttachments.tsx"
else
    fail_test "Composant manquant: DocumentAttachments.tsx"
fi

# Test 3: Composant DocumentUpload
increment_test
if [ -f "client/src/components/messaging/DocumentUpload.tsx" ]; then
    pass_test "Composant trouv√©: DocumentUpload.tsx"
else
    fail_test "Composant manquant: DocumentUpload.tsx"
fi

# Test 4: ConversationView mis √† jour
increment_test
if [ -f "client/src/components/messaging/ConversationView.tsx" ]; then
    # V√©rifier si le fichier contient les imports d'int√©gration
    if grep -q "DocumentAttachments" "client/src/components/messaging/ConversationView.tsx" && \
       grep -q "DocumentUpload" "client/src/components/messaging/ConversationView.tsx"; then
        pass_test "ConversationView.tsx int√©gr√© avec les composants documentaires"
    else
        fail_test "ConversationView.tsx non int√©gr√© avec les composants documentaires"
    fi
else
    fail_test "ConversationView.tsx manquant"
fi

echo ""
echo "üîß Test de compilation TypeScript..."

# Test 5: Compilation TypeScript
increment_test
cd client
if npx tsc --noEmit --project tsconfig.json 2>&1 | grep -q "error"; then
    warning_test "Erreurs de compilation TypeScript d√©tect√©es"
    info_test "Ex√©cutez 'npx tsc --noEmit --project tsconfig.json' pour voir les erreurs"
else
    pass_test "Compilation TypeScript r√©ussie"
fi
cd ..

echo ""
echo "üìã V√©rification des types..."

# Test 6: Types d'int√©gration
increment_test
if grep -q "MessageAttachment" "client/src/services/messaging-document-integration.ts" && \
   grep -q "IntegratedMessage" "client/src/services/messaging-document-integration.ts" && \
   grep -q "DocumentNotification" "client/src/services/messaging-document-integration.ts"; then
    pass_test "Types d'int√©gration d√©finis correctement"
else
    fail_test "Types d'int√©gration manquants ou incomplets"
fi

# Test 7: Hook d'int√©gration
increment_test
if grep -q "useMessagingDocumentIntegration" "client/src/services/messaging-document-integration.ts"; then
    pass_test "Hook d'int√©gration cr√©√©: useMessagingDocumentIntegration"
else
    fail_test "Hook d'int√©gration manquant: useMessagingDocumentIntegration"
fi

echo ""
echo "üîó V√©rification des int√©grations..."

# Test 8: Int√©gration avec le syst√®me documentaire
increment_test
if grep -q "uploadFile" "client/src/services/messaging-document-integration.ts" && \
   grep -q "shareFile" "client/src/services/messaging-document-integration.ts"; then
    pass_test "Int√©gration avec le syst√®me documentaire configur√©e"
else
    fail_test "Int√©gration avec le syst√®me documentaire manquante"
fi

# Test 9: Notifications crois√©es
increment_test
if grep -q "createDocumentNotification" "client/src/services/messaging-document-integration.ts" && \
   grep -q "createSystemMessage" "client/src/services/messaging-document-integration.ts"; then
    pass_test "Syst√®me de notifications crois√©es configur√©"
else
    fail_test "Syst√®me de notifications crois√©es manquant"
fi

# Test 10: Gestion des pi√®ces jointes
increment_test
if grep -q "uploadMessageAttachment" "client/src/services/messaging-document-integration.ts" && \
   grep -q "shareDocumentInMessage" "client/src/services/messaging-document-integration.ts"; then
    pass_test "Gestion des pi√®ces jointes documentaires configur√©e"
else
    fail_test "Gestion des pi√®ces jointes documentaires manquante"
fi

echo ""
echo "üé® V√©rification de l'interface utilisateur..."

# Test 11: Interface d'upload
increment_test
if grep -q "drag.*drop" "client/src/components/messaging/DocumentUpload.tsx" && \
   grep -q "Progress" "client/src/components/messaging/DocumentUpload.tsx"; then
    pass_test "Interface d'upload avec drag & drop et progression"
else
    fail_test "Interface d'upload incompl√®te"
fi

# Test 12: Interface d'affichage
increment_test
if grep -q "getFileIcon" "client/src/components/messaging/DocumentAttachments.tsx" && \
   grep -q "formatFileSize" "client/src/components/messaging/DocumentAttachments.tsx"; then
    pass_test "Interface d'affichage des documents avec ic√¥nes et tailles"
else
    fail_test "Interface d'affichage des documents incompl√®te"
fi

# Test 13: Actions sur documents
increment_test
if grep -q "handleDownload" "client/src/components/messaging/DocumentAttachments.tsx" && \
   grep -q "handleView" "client/src/components/messaging/DocumentAttachments.tsx" && \
   grep -q "handleShare" "client/src/components/messaging/DocumentAttachments.tsx"; then
    pass_test "Actions sur documents (t√©l√©charger, voir, partager) configur√©es"
else
    fail_test "Actions sur documents manquantes"
fi

echo ""
echo "üîí V√©rification de la s√©curit√©..."

# Test 14: Validation des fichiers
increment_test
if grep -q "validateFile" "client/src/components/messaging/DocumentUpload.tsx" && \
   grep -q "maxFileSize" "client/src/components/messaging/DocumentUpload.tsx" && \
   grep -q "allowedTypes" "client/src/components/messaging/DocumentUpload.tsx"; then
    pass_test "Validation des fichiers configur√©e (taille, type)"
else
    fail_test "Validation des fichiers manquante"
fi

# Test 15: Permissions
increment_test
if grep -q "readonly" "client/src/components/messaging/DocumentAttachments.tsx" && \
   grep -q "onRemoveAttachment" "client/src/components/messaging/DocumentAttachments.tsx"; then
    pass_test "Gestion des permissions configur√©e"
else
    fail_test "Gestion des permissions manquante"
fi

echo ""
echo "üìä R√âSUM√â DU TEST D'INT√âGRATION"
echo "==============================="
echo "Tests totaux: $TOTAL_TESTS"
echo "Tests r√©ussis: $PASSED_TESTS"
echo "Taux de r√©ussite: $((PASSED_TESTS * 100 / TOTAL_TESTS))%"

if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
    echo -e "${GREEN}üéâ Int√©gration messagerie-documents pr√™te pour la production !${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les points mentionn√©s ci-dessus.${NC}"
fi

echo ""
echo "üìã PROCHAINES √âTAPES"
echo "===================="
echo "1. Tester l'upload de documents via messagerie"
echo "2. V√©rifier le partage de documents entre client et expert"
echo "3. Tester les notifications automatiques"
echo "4. Valider l'affichage des documents dans les conversations"
echo "5. Tester la gestion des permissions"
echo "6. V√©rifier la responsivit√© sur mobile"
echo "7. Tester les performances avec de gros volumes"
echo "8. Int√©grer avec les workflows ClientProduitEligible"

echo ""
echo "‚ÑπÔ∏è  Test termin√© ! Consultez les r√©sultats ci-dessus pour identifier les probl√®mes √©ventuels." 