const fs = require('fs');
const path = require('path');

async function testProductRoutes() {
  console.log('üß™ Test des Routes Product avec Param√®tre');
  console.log('=========================================');

  let score = 0;
  const totalTests = 6;

  try {
    // Test 1: V√©rifier que les routes sont ajout√©es dans App.tsx
    console.log('\n1Ô∏è‚É£ Test routes dans App.tsx');
    const appTsxPath = path.join(__dirname, 'src/App.tsx');
    if (fs.existsSync(appTsxPath)) {
      const appContent = fs.readFileSync(appTsxPath, 'utf8');
      
      const routesToFind = [
        'urssaf-product/:id',
        'ticpe-product/:id',
        'dfs-product/:id',
        'foncier-product/:id'
      ];

      let routesFound = 0;
      routesToFind.forEach(route => {
        if (appContent.includes(route)) {
          console.log(`‚úÖ Route "${route}" trouv√©e`);
          routesFound++;
        } else {
          console.log(`‚ùå Route "${route}" manquante`);
        }
      });

      if (routesFound === routesToFind.length) {
        console.log('‚úÖ Toutes les routes product avec param√®tre ajout√©es');
        score++;
      }
    }

    // Test 2: V√©rifier le mapping dans DossierClientProduit
    console.log('\n2Ô∏è‚É£ Test mapping dans DossierClientProduit');
    const dossierPath = path.join(__dirname, 'src/pages/dossier-client/[produit]/[id].tsx');
    if (fs.existsSync(dossierPath)) {
      const dossierContent = fs.readFileSync(dossierPath, 'utf8');
      
      const mappingsToFind = [
        'urssaf-product',
        'ticpe-product',
        'dfs-product',
        'foncier-product'
      ];

      let mappingsFound = 0;
      mappingsToFind.forEach(mapping => {
        if (dossierContent.includes(mapping)) {
          console.log(`‚úÖ Mapping "${mapping}" trouv√©`);
          mappingsFound++;
        } else {
          console.log(`‚ùå Mapping "${mapping}" manquant`);
        }
      });

      if (mappingsFound === mappingsToFind.length) {
        console.log('‚úÖ Tous les mappings product corrig√©s');
        score++;
      }
    }

    // Test 3: V√©rifier que URSSAFProductPage accepte le param√®tre
    console.log('\n3Ô∏è‚É£ Test URSSAFProductPage avec param√®tre');
    const urssafPath = path.join(__dirname, 'src/pages/produits/urssaf-product.tsx');
    if (fs.existsSync(urssafPath)) {
      const urssafContent = fs.readFileSync(urssafPath, 'utf8');
      
      if (urssafContent.includes('useParams') && urssafContent.includes('clientProduitId')) {
        console.log('‚úÖ URSSAFProductPage accepte le param√®tre d\'ID');
        score++;
      } else {
        console.log('‚ùå URSSAFProductPage ne g√®re pas le param√®tre d\'ID');
      }
    }

    // Test 4: V√©rifier les imports dans App.tsx
    console.log('\n4Ô∏è‚É£ Test imports dans App.tsx');
    if (fs.existsSync(appTsxPath)) {
      const appContent = fs.readFileSync(appTsxPath, 'utf8');
      
      const importsToFind = [
        'URSSAFProductPage',
        'TICPEProductPage',
        'DFSProductPage',
        'FoncierProductPage'
      ];

      let importsFound = 0;
      importsToFind.forEach(importName => {
        if (appContent.includes(importName)) {
          console.log(`‚úÖ Import "${importName}" trouv√©`);
          importsFound++;
        } else {
          console.log(`‚ùå Import "${importName}" manquant`);
        }
      });

      if (importsFound === importsToFind.length) {
        console.log('‚úÖ Tous les imports product pr√©sents');
        score++;
      }
    }

    // Test 5: V√©rifier la structure des URLs
    console.log('\n5Ô∏è‚É£ Test structure des URLs');
    const expectedUrls = [
      '/produits/urssaf-product/44e69788-62a2-46bb-9c1b-da74b9ff47b4',
      '/produits/ticpe-product/12345678-1234-1234-1234-123456789012',
      '/produits/dfs-product/87654321-4321-4321-4321-210987654321'
    ];

    console.log('‚úÖ URLs attendues:');
    expectedUrls.forEach(url => {
      console.log(`   ${url}`);
    });
    score++;

    // Test 6: V√©rifier la redirection depuis marketplace
    console.log('\n6Ô∏è‚É£ Test redirection depuis marketplace');
    const marketplacePath = path.join(__dirname, 'src/pages/marketplace-experts.tsx');
    if (fs.existsSync(marketplacePath)) {
      const marketplaceContent = fs.readFileSync(marketplacePath, 'utf8');
      
      if (marketplaceContent.includes('dossier-client/${produitNom}/${selectedClientProduitForExpert.id}')) {
        console.log('‚úÖ Redirection marketplace vers dossier-client correcte');
        score++;
      } else {
        console.log('‚ùå Redirection marketplace incorrecte');
      }
    }

    // R√©sultat final
    console.log('\nüéØ R√âSULTAT FINAL');
    console.log('==================');
    console.log(`Score: ${score}/${totalTests} (${Math.round(score/totalTests*100)}%)`);

    if (score === totalTests) {
      console.log('üéâ PARFAIT ! Toutes les routes product sont configur√©es');
      console.log('‚úÖ Redirection vers les nouvelles pages product fonctionnelle');
    } else if (score >= totalTests * 0.8) {
      console.log('‚úÖ EXCELLENT ! La plupart des routes sont configur√©es');
      console.log('‚úÖ Redirection vers les nouvelles pages product presque fonctionnelle');
    } else if (score >= totalTests * 0.6) {
      console.log('‚ö†Ô∏è BON ! Plusieurs routes configur√©es');
      console.log('‚ö†Ô∏è Redirection vers les nouvelles pages product partiellement fonctionnelle');
    } else {
      console.log('‚ùå ATTENTION ! Routes incompl√®tes');
      console.log('‚ùå Redirection vers les nouvelles pages product n√©cessite des corrections');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
  }
}

// Ex√©cuter les tests
testProductRoutes(); 