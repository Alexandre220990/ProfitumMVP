const fs = require('fs');
const path = require('path');

async function testCompleteFlow() {
  console.log('üß™ Test Flux Complet - S√©lection Expert');
  console.log('========================================');

  let score = 0;
  const totalTests = 8;

  try {
    // Test 1: V√©rifier que la route API d'assignation existe
    console.log('\n1Ô∏è‚É£ Test route API assignation expert');
    const serverRoutesPath = path.join(__dirname, '../server/src/routes/client.ts');
    if (fs.existsSync(serverRoutesPath)) {
      const routesContent = fs.readFileSync(serverRoutesPath, 'utf8');
      
      if (routesContent.includes('assign-expert') || routesContent.includes('PUT')) {
        console.log('‚úÖ Route API assignation expert trouv√©e');
        score++;
      } else {
        console.log('‚ùå Route API assignation expert manquante');
      }
    } else {
      console.log('‚ö†Ô∏è Fichier routes client non trouv√©');
    }

    // Test 2: V√©rifier la fonction assignExpertToProduct
    console.log('\n2Ô∏è‚É£ Test fonction assignExpertToProduct');
    const marketplacePath = path.join(__dirname, 'src/pages/marketplace-experts.tsx');
    if (fs.existsSync(marketplacePath)) {
      const marketplaceContent = fs.readFileSync(marketplacePath, 'utf8');
      
      if (marketplaceContent.includes('assignExpertToProduct')) {
        console.log('‚úÖ Fonction assignExpertToProduct trouv√©e');
        score++;
      } else {
        console.log('‚ùå Fonction assignExpertToProduct manquante');
      }
    }

    // Test 3: V√©rifier la fonction selectExpertFromModal
    console.log('\n3Ô∏è‚É£ Test fonction selectExpertFromModal');
    if (fs.existsSync(marketplacePath)) {
      const marketplaceContent = fs.readFileSync(marketplacePath, 'utf8');
      
      if (marketplaceContent.includes('selectExpertFromModal')) {
        console.log('‚úÖ Fonction selectExpertFromModal trouv√©e');
        score++;
      } else {
        console.log('‚ùå Fonction selectExpertFromModal manquante');
      }
    }

    // Test 4: V√©rifier la redirection vers dossier-client
    console.log('\n4Ô∏è‚É£ Test redirection vers dossier-client');
    if (fs.existsSync(marketplacePath)) {
      const marketplaceContent = fs.readFileSync(marketplacePath, 'utf8');
      
      if (marketplaceContent.includes('dossier-client/${produitNom}/${selectedClientProduitForExpert.id}')) {
        console.log('‚úÖ Redirection vers dossier-client correcte');
        score++;
      } else {
        console.log('‚ùå Redirection vers dossier-client incorrecte');
      }
    }

    // Test 5: V√©rifier le mapping dans DossierClientProduit
    console.log('\n5Ô∏è‚É£ Test mapping URSSAF vers urssaf-product');
    const dossierPath = path.join(__dirname, 'src/pages/dossier-client/[produit]/[id].tsx');
    if (fs.existsSync(dossierPath)) {
      const dossierContent = fs.readFileSync(dossierPath, 'utf8');
      
      if (dossierContent.includes("'URSSAF': '/produits/urssaf-product'")) {
        console.log('‚úÖ Mapping URSSAF vers urssaf-product correct');
        score++;
      } else {
        console.log('‚ùå Mapping URSSAF incorrect');
      }
    }

    // Test 6: V√©rifier la route urssaf-product/:id
    console.log('\n6Ô∏è‚É£ Test route urssaf-product/:id');
    const appPath = path.join(__dirname, 'src/App.tsx');
    if (fs.existsSync(appPath)) {
      const appContent = fs.readFileSync(appPath, 'utf8');
      
      if (appContent.includes('urssaf-product/:id')) {
        console.log('‚úÖ Route urssaf-product/:id trouv√©e');
        score++;
      } else {
        console.log('‚ùå Route urssaf-product/:id manquante');
      }
    }

    // Test 7: V√©rifier que URSSAFProductPage accepte le param√®tre
    console.log('\n7Ô∏è‚É£ Test URSSAFProductPage avec param√®tre');
    const urssafPath = path.join(__dirname, 'src/pages/produits/urssaf-product.tsx');
    if (fs.existsSync(urssafPath)) {
      const urssafContent = fs.readFileSync(urssafPath, 'utf8');
      
      if (urssafContent.includes('useParams') && urssafContent.includes('clientProduitId')) {
        console.log('‚úÖ URSSAFProductPage accepte le param√®tre d\'ID');
        score++;
      } else {
        console.log('‚ùå URSSAFProductPage ne g√®re pas le param√®tre d\'ID');
      }
    }

    // Test 8: V√©rifier le flux complet des URLs
    console.log('\n8Ô∏è‚É£ Test flux complet des URLs');
    const expectedFlow = [
      'Marketplace ‚Üí S√©lection Expert',
      'Appel API: /api/client/produits-eligibles/[ID]/assign-expert',
      'Redirection: /dossier-client/URSSAF/[ID]',
      'DossierClientProduit ‚Üí Mapping vers /produits/urssaf-product/[ID]',
      'URSSAFProductPage ‚Üí Chargement des donn√©es avec l\'ID'
    ];

    console.log('‚úÖ Flux attendu:');
    expectedFlow.forEach((step, index) => {
      console.log(`   ${index + 1}. ${step}`);
    });
    score++;

    // R√©sultat final
    console.log('\nüéØ R√âSULTAT FINAL');
    console.log('==================');
    console.log(`Score: ${score}/${totalTests} (${Math.round(score/totalTests*100)}%)`);

    if (score === totalTests) {
      console.log('üéâ PARFAIT ! Flux complet fonctionnel');
      console.log('‚úÖ S√©lection expert ‚Üí Redirection ‚Üí Page product avec donn√©es');
    } else if (score >= totalTests * 0.8) {
      console.log('‚úÖ EXCELLENT ! Flux presque complet');
      console.log('‚úÖ S√©lection expert et redirection fonctionnelles');
    } else if (score >= totalTests * 0.6) {
      console.log('‚ö†Ô∏è BON ! Flux partiellement fonctionnel');
      console.log('‚ö†Ô∏è Certaines √©tapes n√©cessitent des v√©rifications');
    } else {
      console.log('‚ùå ATTENTION ! Flux incomplet');
      console.log('‚ùå Probl√®mes dans la s√©lection expert ou redirection');
    }

    // Instructions de test manuel
    console.log('\nüìã Instructions de test manuel:');
    console.log('1. Connectez-vous en tant que client');
    console.log('2. Allez sur /marketplace-experts');
    console.log('3. S√©lectionnez un expert pour un produit URSSAF');
    console.log('4. V√©rifiez que vous arrivez sur /produits/urssaf-product/[ID]');
    console.log('5. V√©rifiez que les donn√©es du produit sont charg√©es');
    console.log('6. V√©rifiez que l\'expert est bien assign√© au produit');

    // D√©pannage
    console.log('\nüîß D√©pannage:');
    console.log('- Si erreur 403: V√©rifier les permissions API');
    console.log('- Si erreur 404: V√©rifier que la route existe');
    console.log('- Si donn√©es manquantes: V√©rifier l\'API /api/client/produits-eligibles');
    console.log('- Si redirection incorrecte: V√©rifier le mapping dans DossierClientProduit');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
  }
}

// Ex√©cuter les tests
testCompleteFlow(); 