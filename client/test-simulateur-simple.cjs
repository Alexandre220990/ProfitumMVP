// Test simple du simulateur d'√©ligibilit√©
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testSimulateurSimple() {
  console.log('üß™ Test Simple du Simulateur d\'√âligibilit√©');
  console.log('===========================================');
  
  const baseUrl = 'http://localhost:5000';
  
  try {
    // Test 1: V√©rifier que le serveur r√©pond
    console.log('\nüìã Test 1: V√©rification du serveur');
    try {
      const healthResponse = await fetch(`${baseUrl}/health`);
      if (healthResponse.ok) {
        console.log('‚úÖ Serveur backend accessible');
      } else {
        console.log('‚ùå Serveur backend non accessible');
        return;
      }
    } catch (error) {
      console.log('‚ùå Impossible de se connecter au serveur backend');
      console.log('   Assurez-vous que le serveur backend est d√©marr√© sur le port 5000');
      return;
    }
    
    // Test 2: Cr√©er une session de simulation
    console.log('\nüìã Test 2: Cr√©ation d\'une session de simulation');
    try {
      const sessionResponse = await fetch(`${baseUrl}/api/simulator/session`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          productType: 'TICPE',
          clientInfo: {
            companyType: 'TRANSPORT',
            employeeCount: 10,
            annualRevenue: 500000
          }
        })
      });
      
      if (sessionResponse.ok) {
        const sessionData = await sessionResponse.json();
        console.log('‚úÖ Session cr√©√©e avec succ√®s');
        console.log(`   Session ID: ${sessionData.sessionId}`);
        console.log(`   Produit: ${sessionData.productType}`);
        return sessionData.sessionId;
      } else {
        console.log('‚ùå √âchec de cr√©ation de session');
        const errorText = await sessionResponse.text();
        console.log(`   Erreur: ${errorText}`);
        return null;
      }
    } catch (error) {
      console.log('‚ùå Erreur lors de la cr√©ation de session:', error.message);
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Fonction pour tester les questions
async function testQuestions(sessionId) {
  if (!sessionId) return;
  
  console.log('\nüìã Test 3: R√©cup√©ration des questions');
  
  try {
    const questionsResponse = await fetch(`http://localhost:5000/api/simulator/questions/${sessionId}`);
    
    if (questionsResponse.ok) {
      const questions = await questionsResponse.json();
      console.log('‚úÖ Questions r√©cup√©r√©es avec succ√®s');
      console.log(`   Nombre de questions: ${questions.length}`);
      
      // Afficher la premi√®re question
      if (questions.length > 0) {
        console.log(`   Premi√®re question: ${questions[0].question}`);
      }
      
      return questions;
    } else {
      console.log('‚ùå √âchec de r√©cup√©ration des questions');
      return null;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration des questions:', error.message);
    return null;
  }
}

// Fonction pour tester les r√©ponses
async function testAnswers(sessionId, questions) {
  if (!sessionId || !questions) return;
  
  console.log('\nüìã Test 4: Envoi des r√©ponses');
  
  try {
    const answers = questions.map((q, index) => ({
      questionId: q.id,
      answer: index % 2 === 0 ? 'yes' : 'no',
      value: index % 2 === 0 ? '1000' : '500'
    }));
    
    const answersResponse = await fetch(`http://localhost:5000/api/simulator/answers/${sessionId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ answers })
    });
    
    if (answersResponse.ok) {
      console.log('‚úÖ R√©ponses envoy√©es avec succ√®s');
      return true;
    } else {
      console.log('‚ùå √âchec d\'envoi des r√©ponses');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors de l\'envoi des r√©ponses:', error.message);
    return false;
  }
}

// Fonction pour tester le calcul d'√©ligibilit√©
async function testEligibility(sessionId) {
  if (!sessionId) return;
  
  console.log('\nüìã Test 5: Calcul d\'√©ligibilit√©');
  
  try {
    const eligibilityResponse = await fetch(`http://localhost:5000/api/simulator/eligibility/${sessionId}`);
    
    if (eligibilityResponse.ok) {
      const eligibility = await eligibilityResponse.json();
      console.log('‚úÖ Calcul d\'√©ligibilit√© r√©ussi');
      console.log(`   √âligibilit√©: ${eligibility.eligibility}%`);
      console.log(`   Gain estim√©: ${eligibility.estimatedGain}‚Ç¨`);
      console.log(`   Recommandations: ${eligibility.recommendations.length}`);
      return eligibility;
    } else {
      console.log('‚ùå √âchec du calcul d\'√©ligibilit√©');
      return null;
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du calcul d\'√©ligibilit√©:', error.message);
    return null;
  }
}

// Fonction principale
async function runAllTests() {
  console.log('üöÄ D√©marrage des tests du simulateur...\n');
  
  const sessionId = await testSimulateurSimple();
  const questions = await testQuestions(sessionId);
  const answersSent = await testAnswers(sessionId, questions);
  const eligibility = await testEligibility(sessionId);
  
  console.log('\nüéâ R√©sum√© des tests:');
  console.log('===================');
  console.log(`‚úÖ Serveur: ${sessionId ? 'OK' : '√âCHEC'}`);
  console.log(`‚úÖ Questions: ${questions ? 'OK' : '√âCHEC'}`);
  console.log(`‚úÖ R√©ponses: ${answersSent ? 'OK' : '√âCHEC'}`);
  console.log(`‚úÖ √âligibilit√©: ${eligibility ? 'OK' : '√âCHEC'}`);
  
  if (eligibility) {
    console.log('\nüí∞ R√©sultats de simulation:');
    console.log(`   √âligibilit√©: ${eligibility.eligibility}%`);
    console.log(`   Gain potentiel: ${eligibility.estimatedGain}‚Ç¨`);
    console.log(`   Produit: ${eligibility.productType}`);
  }
  
  console.log('\n‚ú® Test termin√© !');
}

// Lancer les tests
runAllTests().catch(console.error); 