// Script de debug pour v√©rifier les donn√©es de migration
require('dotenv').config({ path: '../.env' });

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugMigration() {
  console.log('üîç DEBUG MIGRATION');
  console.log('='.repeat(40));

  try {
    // 1. V√©rifier les sessions r√©centes
    console.log('\n1Ô∏è‚É£ Sessions r√©centes...');
    
    const { data: sessions, error: sessionsError } = await supabase
      .from('TemporarySession')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);

    if (sessionsError) {
      console.error('‚ùå Erreur sessions:', sessionsError);
      return;
    }

    console.log(`‚úÖ ${sessions?.length || 0} sessions trouv√©es`);
    
    if (sessions && sessions.length > 0) {
      sessions.forEach((session, index) => {
        console.log(`   ${index + 1}. ID: ${session.id}, Token: ${session.session_token}, Migr√©: ${session.migrated_to_account}`);
      });
    }

    // 2. V√©rifier les √©ligibilit√©s pour la derni√®re session
    if (sessions && sessions.length > 0) {
      const lastSession = sessions[0];
      console.log(`\n2Ô∏è‚É£ √âligibilit√©s pour la session ${lastSession.session_token}...`);
      
      const { data: eligibilities, error: eligibilitiesError } = await supabase
        .from('TemporaryEligibility')
        .select('*')
        .eq('session_id', lastSession.id);

      if (eligibilitiesError) {
        console.error('‚ùå Erreur √©ligibilit√©s:', eligibilitiesError);
        return;
      }

      console.log(`‚úÖ ${eligibilities?.length || 0} √©ligibilit√©s trouv√©es`);
      
      if (eligibilities && eligibilities.length > 0) {
        eligibilities.forEach((elig, index) => {
          console.log(`   ${index + 1}. Produit: ${elig.produit_id}, Score: ${elig.eligibility_score}%, √âconomies: ${elig.estimated_savings}‚Ç¨`);
        });
      } else {
        console.log('   ‚ö†Ô∏è Aucune √©ligibilit√© trouv√©e');
      }
    }

    // 3. V√©rifier les clients r√©cents
    console.log('\n3Ô∏è‚É£ Clients r√©cents...');
    
    const { data: clients, error: clientsError } = await supabase
      .from('Client')
      .select('id, email, name, company_name, created_at')
      .order('created_at', { ascending: false })
      .limit(3);

    if (clientsError) {
      console.error('‚ùå Erreur clients:', clientsError);
      return;
    }

    console.log(`‚úÖ ${clients?.length || 0} clients trouv√©s`);
    
    if (clients && clients.length > 0) {
      clients.forEach((client, index) => {
        console.log(`   ${index + 1}. Email: ${client.email}, Nom: ${client.name}`);
      });
    }

    // 4. V√©rifier les ClientProduitEligible pour le dernier client
    if (clients && clients.length > 0) {
      const lastClient = clients[0];
      console.log(`\n4Ô∏è‚É£ ClientProduitEligible pour ${lastClient.email}...`);
      
      const { data: clientProducts, error: productsError } = await supabase
        .from('ClientProduitEligible')
        .select(`
          *,
          ProduitEligible(id, nom, description, category)
        `)
        .eq('clientId', lastClient.id);

      if (productsError) {
        console.error('‚ùå Erreur produits:', productsError);
        return;
      }

      console.log(`‚úÖ ${clientProducts?.length || 0} produits √©ligibles trouv√©s`);
      
      if (clientProducts && clientProducts.length > 0) {
        clientProducts.forEach((product, index) => {
          console.log(`   ${index + 1}. ${product.ProduitEligible?.nom || product.produitId}, Statut: ${product.statut}, Montant: ${product.montantFinal}‚Ç¨`);
        });
      } else {
        console.log('   ‚ö†Ô∏è Aucun produit √©ligible trouv√©');
      }
    }

    console.log('\n‚úÖ Debug termin√©');

  } catch (error) {
    console.error('‚ùå Erreur debug:', error);
  }
}

debugMigration(); 