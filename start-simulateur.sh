#!/bin/bash

echo "üöÄ D√©marrage du Simulateur d'√âligibilit√© Profitum"
echo "=================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier si on est dans le bon r√©pertoire
if [ ! -f "package.json" ] || [ ! -d "server" ] || [ ! -d "client" ]; then
    print_error "Veuillez ex√©cuter ce script depuis la racine du projet FinancialTracker"
    exit 1
fi

print_status "V√©rification de l'environnement..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©"
    exit 1
fi

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    print_error "npm n'est pas install√©"
    exit 1
fi

print_success "Environnement Node.js v√©rifi√©"

# Fonction pour nettoyer les processus existants
cleanup_processes() {
    print_status "Nettoyage des processus existants..."
    
    # Tuer les processus sur les ports 5000 et 3000
    pkill -f "node.*5000" 2>/dev/null || true
    pkill -f "node.*3000" 2>/dev/null || true
    pkill -f "vite" 2>/dev/null || true
    
    sleep 2
}

# Fonction pour d√©marrer le backend
start_backend() {
    print_status "D√©marrage du serveur backend..."
    
    cd server
    
    # V√©rifier si les d√©pendances sont install√©es
    if [ ! -d "node_modules" ]; then
        print_warning "Installation des d√©pendances backend..."
        npm install
    fi
    
    # D√©marrer le backend en arri√®re-plan
    npm run dev > ../backend.log 2>&1 &
    BACKEND_PID=$!
    
    cd ..
    
    # Attendre que le backend soit pr√™t
    print_status "Attente du d√©marrage du backend..."
    for i in {1..30}; do
        if curl -s http://localhost:5000/health > /dev/null 2>&1; then
            print_success "Backend d√©marr√© avec succ√®s (PID: $BACKEND_PID)"
            return 0
        fi
        sleep 1
    done
    
    print_error "Le backend n'a pas d√©marr√© dans les temps"
    return 1
}

# Fonction pour d√©marrer le frontend
start_frontend() {
    print_status "D√©marrage du serveur frontend..."
    
    cd client
    
    # V√©rifier si les d√©pendances sont install√©es
    if [ ! -d "node_modules" ]; then
        print_warning "Installation des d√©pendances frontend..."
        npm install
    fi
    
    # D√©marrer le frontend en arri√®re-plan
    npm run dev > ../frontend.log 2>&1 &
    FRONTEND_PID=$!
    
    cd ..
    
    # Attendre que le frontend soit pr√™t
    print_status "Attente du d√©marrage du frontend..."
    for i in {1..30}; do
        if curl -s http://localhost:3000 > /dev/null 2>&1; then
            print_success "Frontend d√©marr√© avec succ√®s (PID: $FRONTEND_PID)"
            return 0
        fi
        sleep 1
    done
    
    print_error "Le frontend n'a pas d√©marr√© dans les temps"
    return 1
}

# Fonction pour afficher les URLs
show_urls() {
    echo ""
    echo "üéâ Simulateur d'√âligibilit√© d√©marr√© avec succ√®s !"
    echo "=================================================="
    echo ""
    echo "üì± Frontend (Interface utilisateur):"
    echo "   http://localhost:3000"
    echo ""
    echo "üîß Backend (API):"
    echo "   http://localhost:5000"
    echo ""
    echo "üß™ Simulateur d'√âligibilit√©:"
    echo "   http://localhost:3000/simulateur-eligibilite"
    echo ""
    echo "üìä Logs:"
    echo "   Backend:  tail -f backend.log"
    echo "   Frontend: tail -f frontend.log"
    echo ""
    echo "üõë Pour arr√™ter les serveurs:"
    echo "   pkill -f 'node.*dev'"
    echo ""
}

# Fonction pour g√©rer l'arr√™t propre
cleanup_on_exit() {
    print_status "Arr√™t des serveurs..."
    kill $BACKEND_PID 2>/dev/null || true
    kill $FRONTEND_PID 2>/dev/null || true
    print_success "Serveurs arr√™t√©s"
    exit 0
}

# Capturer Ctrl+C pour un arr√™t propre
trap cleanup_on_exit INT

# Script principal
main() {
    cleanup_processes
    
    if start_backend; then
        if start_frontend; then
            show_urls
            
            # Garder le script en vie
            print_status "Serveurs en cours d'ex√©cution. Appuyez sur Ctrl+C pour arr√™ter."
            while true; do
                sleep 10
            done
        else
            print_error "√âchec du d√©marrage du frontend"
            kill $BACKEND_PID 2>/dev/null || true
            exit 1
        fi
    else
        print_error "√âchec du d√©marrage du backend"
        exit 1
    fi
}

# Lancer le script principal
main 